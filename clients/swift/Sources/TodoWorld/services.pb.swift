// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: services.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Options:
//
//Date: 2019-12-12 22:37:48
//
//Version: 5.71
//
//Tip: To override a DTO option, remove "//" prefix before updating
//
//BaseUrl: https://localhost:5001
//
//
////GlobalNamespace: 
//
////AddDescriptionAsComments: True

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct AssignRoles {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userName: String = String()

  public var permissions: [String] = []

  public var roles: [String] = []

  public var meta: Dictionary<String,String> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct AssignRolesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var allRoles: [String] {
    get {return _storage._allRoles}
    set {_uniqueStorage()._allRoles = newValue}
  }

  public var allPermissions: [String] {
    get {return _storage._allPermissions}
    set {_uniqueStorage()._allPermissions = newValue}
  }

  public var meta: Dictionary<String,String> {
    get {return _storage._meta}
    set {_uniqueStorage()._meta = newValue}
  }

  public var responseStatus: ResponseStatus {
    get {return _storage._responseStatus ?? ResponseStatus()}
    set {_uniqueStorage()._responseStatus = newValue}
  }
  /// Returns true if `responseStatus` has been explicitly set.
  public var hasResponseStatus: Bool {return _storage._responseStatus != nil}
  /// Clears the value of `responseStatus`. Subsequent reads from it will return its default value.
  public mutating func clearResponseStatus() {_uniqueStorage()._responseStatus = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Authenticate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var provider: String {
    get {return _storage._provider}
    set {_uniqueStorage()._provider = newValue}
  }

  public var state: String {
    get {return _storage._state}
    set {_uniqueStorage()._state = newValue}
  }

  public var oauthToken: String {
    get {return _storage._oauthToken}
    set {_uniqueStorage()._oauthToken = newValue}
  }

  public var oauthVerifier: String {
    get {return _storage._oauthVerifier}
    set {_uniqueStorage()._oauthVerifier = newValue}
  }

  public var userName: String {
    get {return _storage._userName}
    set {_uniqueStorage()._userName = newValue}
  }

  public var password: String {
    get {return _storage._password}
    set {_uniqueStorage()._password = newValue}
  }

  public var rememberMe: Bool {
    get {return _storage._rememberMe}
    set {_uniqueStorage()._rememberMe = newValue}
  }

  public var `continue`: String {
    get {return _storage._continue}
    set {_uniqueStorage()._continue = newValue}
  }

  public var errorView: String {
    get {return _storage._errorView}
    set {_uniqueStorage()._errorView = newValue}
  }

  public var nonce: String {
    get {return _storage._nonce}
    set {_uniqueStorage()._nonce = newValue}
  }

  public var uri: String {
    get {return _storage._uri}
    set {_uniqueStorage()._uri = newValue}
  }

  public var response: String {
    get {return _storage._response}
    set {_uniqueStorage()._response = newValue}
  }

  public var qop: String {
    get {return _storage._qop}
    set {_uniqueStorage()._qop = newValue}
  }

  public var nc: String {
    get {return _storage._nc}
    set {_uniqueStorage()._nc = newValue}
  }

  public var cnonce: String {
    get {return _storage._cnonce}
    set {_uniqueStorage()._cnonce = newValue}
  }

  public var useTokenCookie: Bool {
    get {return _storage._useTokenCookie}
    set {_uniqueStorage()._useTokenCookie = newValue}
  }

  public var accessToken: String {
    get {return _storage._accessToken}
    set {_uniqueStorage()._accessToken = newValue}
  }

  public var accessTokenSecret: String {
    get {return _storage._accessTokenSecret}
    set {_uniqueStorage()._accessTokenSecret = newValue}
  }

  public var scope: String {
    get {return _storage._scope}
    set {_uniqueStorage()._scope = newValue}
  }

  public var meta: Dictionary<String,String> {
    get {return _storage._meta}
    set {_uniqueStorage()._meta = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct AuthenticateResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userID: String {
    get {return _storage._userID}
    set {_uniqueStorage()._userID = newValue}
  }

  public var sessionID: String {
    get {return _storage._sessionID}
    set {_uniqueStorage()._sessionID = newValue}
  }

  public var userName: String {
    get {return _storage._userName}
    set {_uniqueStorage()._userName = newValue}
  }

  public var displayName: String {
    get {return _storage._displayName}
    set {_uniqueStorage()._displayName = newValue}
  }

  public var referrerURL: String {
    get {return _storage._referrerURL}
    set {_uniqueStorage()._referrerURL = newValue}
  }

  public var bearerToken: String {
    get {return _storage._bearerToken}
    set {_uniqueStorage()._bearerToken = newValue}
  }

  public var refreshToken: String {
    get {return _storage._refreshToken}
    set {_uniqueStorage()._refreshToken = newValue}
  }

  public var profileURL: String {
    get {return _storage._profileURL}
    set {_uniqueStorage()._profileURL = newValue}
  }

  public var roles: [String] {
    get {return _storage._roles}
    set {_uniqueStorage()._roles = newValue}
  }

  public var permissions: [String] {
    get {return _storage._permissions}
    set {_uniqueStorage()._permissions = newValue}
  }

  public var responseStatus: ResponseStatus {
    get {return _storage._responseStatus ?? ResponseStatus()}
    set {_uniqueStorage()._responseStatus = newValue}
  }
  /// Returns true if `responseStatus` has been explicitly set.
  public var hasResponseStatus: Bool {return _storage._responseStatus != nil}
  /// Clears the value of `responseStatus`. Subsequent reads from it will return its default value.
  public mutating func clearResponseStatus() {_uniqueStorage()._responseStatus = nil}

  public var meta: Dictionary<String,String> {
    get {return _storage._meta}
    set {_uniqueStorage()._meta = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct ConvertSessionToToken {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var preserveSession: Bool = false

  public var meta: Dictionary<String,String> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct ConvertSessionToTokenResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var meta: Dictionary<String,String> {
    get {return _storage._meta}
    set {_uniqueStorage()._meta = newValue}
  }

  public var accessToken: String {
    get {return _storage._accessToken}
    set {_uniqueStorage()._accessToken = newValue}
  }

  public var refreshToken: String {
    get {return _storage._refreshToken}
    set {_uniqueStorage()._refreshToken = newValue}
  }

  public var responseStatus: ResponseStatus {
    get {return _storage._responseStatus ?? ResponseStatus()}
    set {_uniqueStorage()._responseStatus = newValue}
  }
  /// Returns true if `responseStatus` has been explicitly set.
  public var hasResponseStatus: Bool {return _storage._responseStatus != nil}
  /// Clears the value of `responseStatus`. Subsequent reads from it will return its default value.
  public mutating func clearResponseStatus() {_uniqueStorage()._responseStatus = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct CreateTodo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var title: String = String()

  public var order: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct CreateTodoResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var result: Todo {
    get {return _storage._result ?? Todo()}
    set {_uniqueStorage()._result = newValue}
  }
  /// Returns true if `result` has been explicitly set.
  public var hasResult: Bool {return _storage._result != nil}
  /// Clears the value of `result`. Subsequent reads from it will return its default value.
  public mutating func clearResult() {_uniqueStorage()._result = nil}

  public var responseStatus: ResponseStatus {
    get {return _storage._responseStatus ?? ResponseStatus()}
    set {_uniqueStorage()._responseStatus = newValue}
  }
  /// Returns true if `responseStatus` has been explicitly set.
  public var hasResponseStatus: Bool {return _storage._responseStatus != nil}
  /// Clears the value of `responseStatus`. Subsequent reads from it will return its default value.
  public mutating func clearResponseStatus() {_uniqueStorage()._responseStatus = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct DeleteTodo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct DeleteTodos {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var ids: [Int64] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct EmptyResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var responseStatus: ResponseStatus {
    get {return _storage._responseStatus ?? ResponseStatus()}
    set {_uniqueStorage()._responseStatus = newValue}
  }
  /// Returns true if `responseStatus` has been explicitly set.
  public var hasResponseStatus: Bool {return _storage._responseStatus != nil}
  /// Clears the value of `responseStatus`. Subsequent reads from it will return its default value.
  public mutating func clearResponseStatus() {_uniqueStorage()._responseStatus = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct FileContent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var type: String {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  public var length: Int32 {
    get {return _storage._length}
    set {_uniqueStorage()._length = newValue}
  }

  public var body: Data {
    get {return _storage._body}
    set {_uniqueStorage()._body = newValue}
  }

  public var responseStatus: ResponseStatus {
    get {return _storage._responseStatus ?? ResponseStatus()}
    set {_uniqueStorage()._responseStatus = newValue}
  }
  /// Returns true if `responseStatus` has been explicitly set.
  public var hasResponseStatus: Bool {return _storage._responseStatus != nil}
  /// Clears the value of `responseStatus`. Subsequent reads from it will return its default value.
  public mutating func clearResponseStatus() {_uniqueStorage()._responseStatus = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct GetAccessToken {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var refreshToken: String = String()

  public var useTokenCookie: Bool = false

  public var meta: Dictionary<String,String> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct GetAccessTokenResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var accessToken: String {
    get {return _storage._accessToken}
    set {_uniqueStorage()._accessToken = newValue}
  }

  public var meta: Dictionary<String,String> {
    get {return _storage._meta}
    set {_uniqueStorage()._meta = newValue}
  }

  public var responseStatus: ResponseStatus {
    get {return _storage._responseStatus ?? ResponseStatus()}
    set {_uniqueStorage()._responseStatus = newValue}
  }
  /// Returns true if `responseStatus` has been explicitly set.
  public var hasResponseStatus: Bool {return _storage._responseStatus != nil}
  /// Clears the value of `responseStatus`. Subsequent reads from it will return its default value.
  public mutating func clearResponseStatus() {_uniqueStorage()._responseStatus = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct GetTodo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct GetTodoResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var result: Todo {
    get {return _storage._result ?? Todo()}
    set {_uniqueStorage()._result = newValue}
  }
  /// Returns true if `result` has been explicitly set.
  public var hasResult: Bool {return _storage._result != nil}
  /// Clears the value of `result`. Subsequent reads from it will return its default value.
  public mutating func clearResult() {_uniqueStorage()._result = nil}

  public var responseStatus: ResponseStatus {
    get {return _storage._responseStatus ?? ResponseStatus()}
    set {_uniqueStorage()._responseStatus = newValue}
  }
  /// Returns true if `responseStatus` has been explicitly set.
  public var hasResponseStatus: Bool {return _storage._responseStatus != nil}
  /// Clears the value of `responseStatus`. Subsequent reads from it will return its default value.
  public mutating func clearResponseStatus() {_uniqueStorage()._responseStatus = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct GetTodos {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct GetTodosResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var results: [Todo] {
    get {return _storage._results}
    set {_uniqueStorage()._results = newValue}
  }

  public var responseStatus: ResponseStatus {
    get {return _storage._responseStatus ?? ResponseStatus()}
    set {_uniqueStorage()._responseStatus = newValue}
  }
  /// Returns true if `responseStatus` has been explicitly set.
  public var hasResponseStatus: Bool {return _storage._responseStatus != nil}
  /// Clears the value of `responseStatus`. Subsequent reads from it will return its default value.
  public mutating func clearResponseStatus() {_uniqueStorage()._responseStatus = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Hello {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct HelloResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var result: String {
    get {return _storage._result}
    set {_uniqueStorage()._result = newValue}
  }

  public var responseStatus: ResponseStatus {
    get {return _storage._responseStatus ?? ResponseStatus()}
    set {_uniqueStorage()._responseStatus = newValue}
  }
  /// Returns true if `responseStatus` has been explicitly set.
  public var hasResponseStatus: Bool {return _storage._responseStatus != nil}
  /// Clears the value of `responseStatus`. Subsequent reads from it will return its default value.
  public mutating func clearResponseStatus() {_uniqueStorage()._responseStatus = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct HelloSecure {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Register {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userName: String = String()

  public var firstName: String = String()

  public var lastName: String = String()

  public var displayName: String = String()

  public var email: String = String()

  public var password: String = String()

  public var confirmPassword: String = String()

  public var autoLogin: Bool = false

  public var `continue`: String = String()

  public var errorView: String = String()

  public var meta: Dictionary<String,String> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct RegisterResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userID: String {
    get {return _storage._userID}
    set {_uniqueStorage()._userID = newValue}
  }

  public var sessionID: String {
    get {return _storage._sessionID}
    set {_uniqueStorage()._sessionID = newValue}
  }

  public var userName: String {
    get {return _storage._userName}
    set {_uniqueStorage()._userName = newValue}
  }

  public var referrerURL: String {
    get {return _storage._referrerURL}
    set {_uniqueStorage()._referrerURL = newValue}
  }

  public var bearerToken: String {
    get {return _storage._bearerToken}
    set {_uniqueStorage()._bearerToken = newValue}
  }

  public var refreshToken: String {
    get {return _storage._refreshToken}
    set {_uniqueStorage()._refreshToken = newValue}
  }

  public var responseStatus: ResponseStatus {
    get {return _storage._responseStatus ?? ResponseStatus()}
    set {_uniqueStorage()._responseStatus = newValue}
  }
  /// Returns true if `responseStatus` has been explicitly set.
  public var hasResponseStatus: Bool {return _storage._responseStatus != nil}
  /// Clears the value of `responseStatus`. Subsequent reads from it will return its default value.
  public mutating func clearResponseStatus() {_uniqueStorage()._responseStatus = nil}

  public var meta: Dictionary<String,String> {
    get {return _storage._meta}
    set {_uniqueStorage()._meta = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct ResetTodos {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct ResponseError {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var errorCode: String = String()

  public var fieldName: String = String()

  public var message: String = String()

  public var meta: Dictionary<String,String> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct ResponseStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var errorCode: String = String()

  public var message: String = String()

  public var stackTrace: String = String()

  public var errors: [ResponseError] = []

  public var meta: Dictionary<String,String> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct StreamFiles {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var paths: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct StreamServerEvents {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var channels: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct StreamServerEventsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var eventID: Int64 {
    get {return _storage._eventID}
    set {_uniqueStorage()._eventID = newValue}
  }

  public var channel: String {
    get {return _storage._channel}
    set {_uniqueStorage()._channel = newValue}
  }

  public var selector: String {
    get {return _storage._selector}
    set {_uniqueStorage()._selector = newValue}
  }

  public var json: String {
    get {return _storage._json}
    set {_uniqueStorage()._json = newValue}
  }

  public var op: String {
    get {return _storage._op}
    set {_uniqueStorage()._op = newValue}
  }

  public var target: String {
    get {return _storage._target}
    set {_uniqueStorage()._target = newValue}
  }

  public var cssSelector: String {
    get {return _storage._cssSelector}
    set {_uniqueStorage()._cssSelector = newValue}
  }

  public var meta: Dictionary<String,String> {
    get {return _storage._meta}
    set {_uniqueStorage()._meta = newValue}
  }

  public var userID: String {
    get {return _storage._userID}
    set {_uniqueStorage()._userID = newValue}
  }

  public var displayName: String {
    get {return _storage._displayName}
    set {_uniqueStorage()._displayName = newValue}
  }

  public var profileURL: String {
    get {return _storage._profileURL}
    set {_uniqueStorage()._profileURL = newValue}
  }

  public var isAuthenticated: Bool {
    get {return _storage._isAuthenticated}
    set {_uniqueStorage()._isAuthenticated = newValue}
  }

  public var channels: [String] {
    get {return _storage._channels}
    set {_uniqueStorage()._channels = newValue}
  }

  public var createdAt: Int64 {
    get {return _storage._createdAt}
    set {_uniqueStorage()._createdAt = newValue}
  }

  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var unRegisterURL: String {
    get {return _storage._unRegisterURL}
    set {_uniqueStorage()._unRegisterURL = newValue}
  }

  public var updateSubscriberURL: String {
    get {return _storage._updateSubscriberURL}
    set {_uniqueStorage()._updateSubscriberURL = newValue}
  }

  public var heartbeatURL: String {
    get {return _storage._heartbeatURL}
    set {_uniqueStorage()._heartbeatURL = newValue}
  }

  public var heartbeatIntervalMs: Int64 {
    get {return _storage._heartbeatIntervalMs}
    set {_uniqueStorage()._heartbeatIntervalMs = newValue}
  }

  public var idleTimeoutMs: Int64 {
    get {return _storage._idleTimeoutMs}
    set {_uniqueStorage()._idleTimeoutMs = newValue}
  }

  public var responseStatus: ResponseStatus {
    get {return _storage._responseStatus ?? ResponseStatus()}
    set {_uniqueStorage()._responseStatus = newValue}
  }
  /// Returns true if `responseStatus` has been explicitly set.
  public var hasResponseStatus: Bool {return _storage._responseStatus != nil}
  /// Clears the value of `responseStatus`. Subsequent reads from it will return its default value.
  public mutating func clearResponseStatus() {_uniqueStorage()._responseStatus = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Todo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Int64 = 0

  public var title: String = String()

  public var order: Int32 = 0

  public var completed: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct UnAssignRoles {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userName: String = String()

  public var permissions: [String] = []

  public var roles: [String] = []

  public var meta: Dictionary<String,String> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct UnAssignRolesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var allRoles: [String] {
    get {return _storage._allRoles}
    set {_uniqueStorage()._allRoles = newValue}
  }

  public var allPermissions: [String] {
    get {return _storage._allPermissions}
    set {_uniqueStorage()._allPermissions = newValue}
  }

  public var meta: Dictionary<String,String> {
    get {return _storage._meta}
    set {_uniqueStorage()._meta = newValue}
  }

  public var responseStatus: ResponseStatus {
    get {return _storage._responseStatus ?? ResponseStatus()}
    set {_uniqueStorage()._responseStatus = newValue}
  }
  /// Returns true if `responseStatus` has been explicitly set.
  public var hasResponseStatus: Bool {return _storage._responseStatus != nil}
  /// Clears the value of `responseStatus`. Subsequent reads from it will return its default value.
  public mutating func clearResponseStatus() {_uniqueStorage()._responseStatus = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct UpdateTodo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Int64 = 0

  public var title: String = String()

  public var order: Int32 = 0

  public var completed: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension AssignRoles: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "AssignRoles"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "UserName"),
    2: .same(proto: "Permissions"),
    3: .same(proto: "Roles"),
    4: .same(proto: "Meta"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.userName)
      case 2: try decoder.decodeRepeatedStringField(value: &self.permissions)
      case 3: try decoder.decodeRepeatedStringField(value: &self.roles)
      case 4: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.meta)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.userName.isEmpty {
      try visitor.visitSingularStringField(value: self.userName, fieldNumber: 1)
    }
    if !self.permissions.isEmpty {
      try visitor.visitRepeatedStringField(value: self.permissions, fieldNumber: 2)
    }
    if !self.roles.isEmpty {
      try visitor.visitRepeatedStringField(value: self.roles, fieldNumber: 3)
    }
    if !self.meta.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.meta, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: AssignRoles, rhs: AssignRoles) -> Bool {
    if lhs.userName != rhs.userName {return false}
    if lhs.permissions != rhs.permissions {return false}
    if lhs.roles != rhs.roles {return false}
    if lhs.meta != rhs.meta {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension AssignRolesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "AssignRolesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "AllRoles"),
    2: .same(proto: "AllPermissions"),
    3: .same(proto: "Meta"),
    4: .same(proto: "ResponseStatus"),
  ]

  fileprivate class _StorageClass {
    var _allRoles: [String] = []
    var _allPermissions: [String] = []
    var _meta: Dictionary<String,String> = [:]
    var _responseStatus: ResponseStatus? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _allRoles = source._allRoles
      _allPermissions = source._allPermissions
      _meta = source._meta
      _responseStatus = source._responseStatus
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedStringField(value: &_storage._allRoles)
        case 2: try decoder.decodeRepeatedStringField(value: &_storage._allPermissions)
        case 3: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_storage._meta)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._responseStatus)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._allRoles.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._allRoles, fieldNumber: 1)
      }
      if !_storage._allPermissions.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._allPermissions, fieldNumber: 2)
      }
      if !_storage._meta.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _storage._meta, fieldNumber: 3)
      }
      if let v = _storage._responseStatus {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: AssignRolesResponse, rhs: AssignRolesResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._allRoles != rhs_storage._allRoles {return false}
        if _storage._allPermissions != rhs_storage._allPermissions {return false}
        if _storage._meta != rhs_storage._meta {return false}
        if _storage._responseStatus != rhs_storage._responseStatus {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Authenticate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "Authenticate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "provider"),
    2: .same(proto: "State"),
    3: .standard(proto: "oauth_token"),
    4: .standard(proto: "oauth_verifier"),
    5: .same(proto: "UserName"),
    6: .same(proto: "Password"),
    7: .same(proto: "RememberMe"),
    8: .same(proto: "Continue"),
    9: .same(proto: "ErrorView"),
    10: .same(proto: "nonce"),
    11: .same(proto: "uri"),
    12: .same(proto: "response"),
    13: .same(proto: "qop"),
    14: .same(proto: "nc"),
    15: .same(proto: "cnonce"),
    16: .same(proto: "UseTokenCookie"),
    17: .same(proto: "AccessToken"),
    18: .same(proto: "AccessTokenSecret"),
    19: .same(proto: "scope"),
    20: .same(proto: "Meta"),
  ]

  fileprivate class _StorageClass {
    var _provider: String = String()
    var _state: String = String()
    var _oauthToken: String = String()
    var _oauthVerifier: String = String()
    var _userName: String = String()
    var _password: String = String()
    var _rememberMe: Bool = false
    var _continue: String = String()
    var _errorView: String = String()
    var _nonce: String = String()
    var _uri: String = String()
    var _response: String = String()
    var _qop: String = String()
    var _nc: String = String()
    var _cnonce: String = String()
    var _useTokenCookie: Bool = false
    var _accessToken: String = String()
    var _accessTokenSecret: String = String()
    var _scope: String = String()
    var _meta: Dictionary<String,String> = [:]

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _provider = source._provider
      _state = source._state
      _oauthToken = source._oauthToken
      _oauthVerifier = source._oauthVerifier
      _userName = source._userName
      _password = source._password
      _rememberMe = source._rememberMe
      _continue = source._continue
      _errorView = source._errorView
      _nonce = source._nonce
      _uri = source._uri
      _response = source._response
      _qop = source._qop
      _nc = source._nc
      _cnonce = source._cnonce
      _useTokenCookie = source._useTokenCookie
      _accessToken = source._accessToken
      _accessTokenSecret = source._accessTokenSecret
      _scope = source._scope
      _meta = source._meta
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._provider)
        case 2: try decoder.decodeSingularStringField(value: &_storage._state)
        case 3: try decoder.decodeSingularStringField(value: &_storage._oauthToken)
        case 4: try decoder.decodeSingularStringField(value: &_storage._oauthVerifier)
        case 5: try decoder.decodeSingularStringField(value: &_storage._userName)
        case 6: try decoder.decodeSingularStringField(value: &_storage._password)
        case 7: try decoder.decodeSingularBoolField(value: &_storage._rememberMe)
        case 8: try decoder.decodeSingularStringField(value: &_storage._continue)
        case 9: try decoder.decodeSingularStringField(value: &_storage._errorView)
        case 10: try decoder.decodeSingularStringField(value: &_storage._nonce)
        case 11: try decoder.decodeSingularStringField(value: &_storage._uri)
        case 12: try decoder.decodeSingularStringField(value: &_storage._response)
        case 13: try decoder.decodeSingularStringField(value: &_storage._qop)
        case 14: try decoder.decodeSingularStringField(value: &_storage._nc)
        case 15: try decoder.decodeSingularStringField(value: &_storage._cnonce)
        case 16: try decoder.decodeSingularBoolField(value: &_storage._useTokenCookie)
        case 17: try decoder.decodeSingularStringField(value: &_storage._accessToken)
        case 18: try decoder.decodeSingularStringField(value: &_storage._accessTokenSecret)
        case 19: try decoder.decodeSingularStringField(value: &_storage._scope)
        case 20: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_storage._meta)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._provider.isEmpty {
        try visitor.visitSingularStringField(value: _storage._provider, fieldNumber: 1)
      }
      if !_storage._state.isEmpty {
        try visitor.visitSingularStringField(value: _storage._state, fieldNumber: 2)
      }
      if !_storage._oauthToken.isEmpty {
        try visitor.visitSingularStringField(value: _storage._oauthToken, fieldNumber: 3)
      }
      if !_storage._oauthVerifier.isEmpty {
        try visitor.visitSingularStringField(value: _storage._oauthVerifier, fieldNumber: 4)
      }
      if !_storage._userName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._userName, fieldNumber: 5)
      }
      if !_storage._password.isEmpty {
        try visitor.visitSingularStringField(value: _storage._password, fieldNumber: 6)
      }
      if _storage._rememberMe != false {
        try visitor.visitSingularBoolField(value: _storage._rememberMe, fieldNumber: 7)
      }
      if !_storage._continue.isEmpty {
        try visitor.visitSingularStringField(value: _storage._continue, fieldNumber: 8)
      }
      if !_storage._errorView.isEmpty {
        try visitor.visitSingularStringField(value: _storage._errorView, fieldNumber: 9)
      }
      if !_storage._nonce.isEmpty {
        try visitor.visitSingularStringField(value: _storage._nonce, fieldNumber: 10)
      }
      if !_storage._uri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uri, fieldNumber: 11)
      }
      if !_storage._response.isEmpty {
        try visitor.visitSingularStringField(value: _storage._response, fieldNumber: 12)
      }
      if !_storage._qop.isEmpty {
        try visitor.visitSingularStringField(value: _storage._qop, fieldNumber: 13)
      }
      if !_storage._nc.isEmpty {
        try visitor.visitSingularStringField(value: _storage._nc, fieldNumber: 14)
      }
      if !_storage._cnonce.isEmpty {
        try visitor.visitSingularStringField(value: _storage._cnonce, fieldNumber: 15)
      }
      if _storage._useTokenCookie != false {
        try visitor.visitSingularBoolField(value: _storage._useTokenCookie, fieldNumber: 16)
      }
      if !_storage._accessToken.isEmpty {
        try visitor.visitSingularStringField(value: _storage._accessToken, fieldNumber: 17)
      }
      if !_storage._accessTokenSecret.isEmpty {
        try visitor.visitSingularStringField(value: _storage._accessTokenSecret, fieldNumber: 18)
      }
      if !_storage._scope.isEmpty {
        try visitor.visitSingularStringField(value: _storage._scope, fieldNumber: 19)
      }
      if !_storage._meta.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _storage._meta, fieldNumber: 20)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Authenticate, rhs: Authenticate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._provider != rhs_storage._provider {return false}
        if _storage._state != rhs_storage._state {return false}
        if _storage._oauthToken != rhs_storage._oauthToken {return false}
        if _storage._oauthVerifier != rhs_storage._oauthVerifier {return false}
        if _storage._userName != rhs_storage._userName {return false}
        if _storage._password != rhs_storage._password {return false}
        if _storage._rememberMe != rhs_storage._rememberMe {return false}
        if _storage._continue != rhs_storage._continue {return false}
        if _storage._errorView != rhs_storage._errorView {return false}
        if _storage._nonce != rhs_storage._nonce {return false}
        if _storage._uri != rhs_storage._uri {return false}
        if _storage._response != rhs_storage._response {return false}
        if _storage._qop != rhs_storage._qop {return false}
        if _storage._nc != rhs_storage._nc {return false}
        if _storage._cnonce != rhs_storage._cnonce {return false}
        if _storage._useTokenCookie != rhs_storage._useTokenCookie {return false}
        if _storage._accessToken != rhs_storage._accessToken {return false}
        if _storage._accessTokenSecret != rhs_storage._accessTokenSecret {return false}
        if _storage._scope != rhs_storage._scope {return false}
        if _storage._meta != rhs_storage._meta {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension AuthenticateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "AuthenticateResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "UserId"),
    2: .same(proto: "SessionId"),
    3: .same(proto: "UserName"),
    4: .same(proto: "DisplayName"),
    5: .same(proto: "ReferrerUrl"),
    6: .same(proto: "BearerToken"),
    7: .same(proto: "RefreshToken"),
    8: .same(proto: "ProfileUrl"),
    9: .same(proto: "Roles"),
    10: .same(proto: "Permissions"),
    11: .same(proto: "ResponseStatus"),
    12: .same(proto: "Meta"),
  ]

  fileprivate class _StorageClass {
    var _userID: String = String()
    var _sessionID: String = String()
    var _userName: String = String()
    var _displayName: String = String()
    var _referrerURL: String = String()
    var _bearerToken: String = String()
    var _refreshToken: String = String()
    var _profileURL: String = String()
    var _roles: [String] = []
    var _permissions: [String] = []
    var _responseStatus: ResponseStatus? = nil
    var _meta: Dictionary<String,String> = [:]

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _userID = source._userID
      _sessionID = source._sessionID
      _userName = source._userName
      _displayName = source._displayName
      _referrerURL = source._referrerURL
      _bearerToken = source._bearerToken
      _refreshToken = source._refreshToken
      _profileURL = source._profileURL
      _roles = source._roles
      _permissions = source._permissions
      _responseStatus = source._responseStatus
      _meta = source._meta
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._userID)
        case 2: try decoder.decodeSingularStringField(value: &_storage._sessionID)
        case 3: try decoder.decodeSingularStringField(value: &_storage._userName)
        case 4: try decoder.decodeSingularStringField(value: &_storage._displayName)
        case 5: try decoder.decodeSingularStringField(value: &_storage._referrerURL)
        case 6: try decoder.decodeSingularStringField(value: &_storage._bearerToken)
        case 7: try decoder.decodeSingularStringField(value: &_storage._refreshToken)
        case 8: try decoder.decodeSingularStringField(value: &_storage._profileURL)
        case 9: try decoder.decodeRepeatedStringField(value: &_storage._roles)
        case 10: try decoder.decodeRepeatedStringField(value: &_storage._permissions)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._responseStatus)
        case 12: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_storage._meta)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._userID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._userID, fieldNumber: 1)
      }
      if !_storage._sessionID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sessionID, fieldNumber: 2)
      }
      if !_storage._userName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._userName, fieldNumber: 3)
      }
      if !_storage._displayName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._displayName, fieldNumber: 4)
      }
      if !_storage._referrerURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._referrerURL, fieldNumber: 5)
      }
      if !_storage._bearerToken.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bearerToken, fieldNumber: 6)
      }
      if !_storage._refreshToken.isEmpty {
        try visitor.visitSingularStringField(value: _storage._refreshToken, fieldNumber: 7)
      }
      if !_storage._profileURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._profileURL, fieldNumber: 8)
      }
      if !_storage._roles.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._roles, fieldNumber: 9)
      }
      if !_storage._permissions.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._permissions, fieldNumber: 10)
      }
      if let v = _storage._responseStatus {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if !_storage._meta.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _storage._meta, fieldNumber: 12)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: AuthenticateResponse, rhs: AuthenticateResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._userID != rhs_storage._userID {return false}
        if _storage._sessionID != rhs_storage._sessionID {return false}
        if _storage._userName != rhs_storage._userName {return false}
        if _storage._displayName != rhs_storage._displayName {return false}
        if _storage._referrerURL != rhs_storage._referrerURL {return false}
        if _storage._bearerToken != rhs_storage._bearerToken {return false}
        if _storage._refreshToken != rhs_storage._refreshToken {return false}
        if _storage._profileURL != rhs_storage._profileURL {return false}
        if _storage._roles != rhs_storage._roles {return false}
        if _storage._permissions != rhs_storage._permissions {return false}
        if _storage._responseStatus != rhs_storage._responseStatus {return false}
        if _storage._meta != rhs_storage._meta {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConvertSessionToToken: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConvertSessionToToken"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "PreserveSession"),
    2: .same(proto: "Meta"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.preserveSession)
      case 2: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.meta)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.preserveSession != false {
      try visitor.visitSingularBoolField(value: self.preserveSession, fieldNumber: 1)
    }
    if !self.meta.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.meta, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConvertSessionToToken, rhs: ConvertSessionToToken) -> Bool {
    if lhs.preserveSession != rhs.preserveSession {return false}
    if lhs.meta != rhs.meta {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConvertSessionToTokenResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConvertSessionToTokenResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Meta"),
    2: .same(proto: "AccessToken"),
    3: .same(proto: "RefreshToken"),
    4: .same(proto: "ResponseStatus"),
  ]

  fileprivate class _StorageClass {
    var _meta: Dictionary<String,String> = [:]
    var _accessToken: String = String()
    var _refreshToken: String = String()
    var _responseStatus: ResponseStatus? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _meta = source._meta
      _accessToken = source._accessToken
      _refreshToken = source._refreshToken
      _responseStatus = source._responseStatus
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_storage._meta)
        case 2: try decoder.decodeSingularStringField(value: &_storage._accessToken)
        case 3: try decoder.decodeSingularStringField(value: &_storage._refreshToken)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._responseStatus)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._meta.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _storage._meta, fieldNumber: 1)
      }
      if !_storage._accessToken.isEmpty {
        try visitor.visitSingularStringField(value: _storage._accessToken, fieldNumber: 2)
      }
      if !_storage._refreshToken.isEmpty {
        try visitor.visitSingularStringField(value: _storage._refreshToken, fieldNumber: 3)
      }
      if let v = _storage._responseStatus {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConvertSessionToTokenResponse, rhs: ConvertSessionToTokenResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._meta != rhs_storage._meta {return false}
        if _storage._accessToken != rhs_storage._accessToken {return false}
        if _storage._refreshToken != rhs_storage._refreshToken {return false}
        if _storage._responseStatus != rhs_storage._responseStatus {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CreateTodo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "CreateTodo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Title"),
    2: .same(proto: "Order"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.title)
      case 2: try decoder.decodeSingularInt32Field(value: &self.order)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if self.order != 0 {
      try visitor.visitSingularInt32Field(value: self.order, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: CreateTodo, rhs: CreateTodo) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.order != rhs.order {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CreateTodoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "CreateTodoResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Result"),
    2: .same(proto: "ResponseStatus"),
  ]

  fileprivate class _StorageClass {
    var _result: Todo? = nil
    var _responseStatus: ResponseStatus? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _result = source._result
      _responseStatus = source._responseStatus
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._result)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._responseStatus)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._result {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._responseStatus {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: CreateTodoResponse, rhs: CreateTodoResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._result != rhs_storage._result {return false}
        if _storage._responseStatus != rhs_storage._responseStatus {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DeleteTodo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "DeleteTodo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DeleteTodo, rhs: DeleteTodo) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DeleteTodos: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "DeleteTodos"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedInt64Field(value: &self.ids)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ids.isEmpty {
      try visitor.visitRepeatedInt64Field(value: self.ids, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DeleteTodos, rhs: DeleteTodos) -> Bool {
    if lhs.ids != rhs.ids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension EmptyResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "EmptyResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ResponseStatus"),
  ]

  fileprivate class _StorageClass {
    var _responseStatus: ResponseStatus? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _responseStatus = source._responseStatus
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._responseStatus)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._responseStatus {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: EmptyResponse, rhs: EmptyResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._responseStatus != rhs_storage._responseStatus {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension FileContent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "FileContent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Name"),
    2: .same(proto: "Type"),
    3: .same(proto: "Length"),
    4: .same(proto: "Body"),
    5: .same(proto: "ResponseStatus"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _type: String = String()
    var _length: Int32 = 0
    var _body: Data = SwiftProtobuf.Internal.emptyData
    var _responseStatus: ResponseStatus? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _type = source._type
      _length = source._length
      _body = source._body
      _responseStatus = source._responseStatus
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeSingularStringField(value: &_storage._type)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._length)
        case 4: try decoder.decodeSingularBytesField(value: &_storage._body)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._responseStatus)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if !_storage._type.isEmpty {
        try visitor.visitSingularStringField(value: _storage._type, fieldNumber: 2)
      }
      if _storage._length != 0 {
        try visitor.visitSingularInt32Field(value: _storage._length, fieldNumber: 3)
      }
      if !_storage._body.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._body, fieldNumber: 4)
      }
      if let v = _storage._responseStatus {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: FileContent, rhs: FileContent) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._length != rhs_storage._length {return false}
        if _storage._body != rhs_storage._body {return false}
        if _storage._responseStatus != rhs_storage._responseStatus {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetAccessToken: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "GetAccessToken"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "RefreshToken"),
    2: .same(proto: "UseTokenCookie"),
    3: .same(proto: "Meta"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.refreshToken)
      case 2: try decoder.decodeSingularBoolField(value: &self.useTokenCookie)
      case 3: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.meta)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.refreshToken.isEmpty {
      try visitor.visitSingularStringField(value: self.refreshToken, fieldNumber: 1)
    }
    if self.useTokenCookie != false {
      try visitor.visitSingularBoolField(value: self.useTokenCookie, fieldNumber: 2)
    }
    if !self.meta.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.meta, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: GetAccessToken, rhs: GetAccessToken) -> Bool {
    if lhs.refreshToken != rhs.refreshToken {return false}
    if lhs.useTokenCookie != rhs.useTokenCookie {return false}
    if lhs.meta != rhs.meta {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetAccessTokenResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "GetAccessTokenResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "AccessToken"),
    2: .same(proto: "Meta"),
    3: .same(proto: "ResponseStatus"),
  ]

  fileprivate class _StorageClass {
    var _accessToken: String = String()
    var _meta: Dictionary<String,String> = [:]
    var _responseStatus: ResponseStatus? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _accessToken = source._accessToken
      _meta = source._meta
      _responseStatus = source._responseStatus
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._accessToken)
        case 2: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_storage._meta)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._responseStatus)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._accessToken.isEmpty {
        try visitor.visitSingularStringField(value: _storage._accessToken, fieldNumber: 1)
      }
      if !_storage._meta.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _storage._meta, fieldNumber: 2)
      }
      if let v = _storage._responseStatus {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: GetAccessTokenResponse, rhs: GetAccessTokenResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._accessToken != rhs_storage._accessToken {return false}
        if _storage._meta != rhs_storage._meta {return false}
        if _storage._responseStatus != rhs_storage._responseStatus {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetTodo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "GetTodo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: GetTodo, rhs: GetTodo) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetTodoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "GetTodoResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Result"),
    2: .same(proto: "ResponseStatus"),
  ]

  fileprivate class _StorageClass {
    var _result: Todo? = nil
    var _responseStatus: ResponseStatus? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _result = source._result
      _responseStatus = source._responseStatus
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._result)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._responseStatus)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._result {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._responseStatus {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: GetTodoResponse, rhs: GetTodoResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._result != rhs_storage._result {return false}
        if _storage._responseStatus != rhs_storage._responseStatus {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetTodos: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "GetTodos"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: GetTodos, rhs: GetTodos) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetTodosResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "GetTodosResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Results"),
    2: .same(proto: "ResponseStatus"),
  ]

  fileprivate class _StorageClass {
    var _results: [Todo] = []
    var _responseStatus: ResponseStatus? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _results = source._results
      _responseStatus = source._responseStatus
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._results)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._responseStatus)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._results.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._results, fieldNumber: 1)
      }
      if let v = _storage._responseStatus {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: GetTodosResponse, rhs: GetTodosResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._results != rhs_storage._results {return false}
        if _storage._responseStatus != rhs_storage._responseStatus {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Hello: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "Hello"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Hello, rhs: Hello) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension HelloResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "HelloResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Result"),
    2: .same(proto: "ResponseStatus"),
  ]

  fileprivate class _StorageClass {
    var _result: String = String()
    var _responseStatus: ResponseStatus? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _result = source._result
      _responseStatus = source._responseStatus
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._result)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._responseStatus)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._result.isEmpty {
        try visitor.visitSingularStringField(value: _storage._result, fieldNumber: 1)
      }
      if let v = _storage._responseStatus {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: HelloResponse, rhs: HelloResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._result != rhs_storage._result {return false}
        if _storage._responseStatus != rhs_storage._responseStatus {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension HelloSecure: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "HelloSecure"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: HelloSecure, rhs: HelloSecure) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Register: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "Register"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "UserName"),
    2: .same(proto: "FirstName"),
    3: .same(proto: "LastName"),
    4: .same(proto: "DisplayName"),
    5: .same(proto: "Email"),
    6: .same(proto: "Password"),
    7: .same(proto: "ConfirmPassword"),
    8: .same(proto: "AutoLogin"),
    9: .same(proto: "Continue"),
    10: .same(proto: "ErrorView"),
    11: .same(proto: "Meta"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.userName)
      case 2: try decoder.decodeSingularStringField(value: &self.firstName)
      case 3: try decoder.decodeSingularStringField(value: &self.lastName)
      case 4: try decoder.decodeSingularStringField(value: &self.displayName)
      case 5: try decoder.decodeSingularStringField(value: &self.email)
      case 6: try decoder.decodeSingularStringField(value: &self.password)
      case 7: try decoder.decodeSingularStringField(value: &self.confirmPassword)
      case 8: try decoder.decodeSingularBoolField(value: &self.autoLogin)
      case 9: try decoder.decodeSingularStringField(value: &self.`continue`)
      case 10: try decoder.decodeSingularStringField(value: &self.errorView)
      case 11: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.meta)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.userName.isEmpty {
      try visitor.visitSingularStringField(value: self.userName, fieldNumber: 1)
    }
    if !self.firstName.isEmpty {
      try visitor.visitSingularStringField(value: self.firstName, fieldNumber: 2)
    }
    if !self.lastName.isEmpty {
      try visitor.visitSingularStringField(value: self.lastName, fieldNumber: 3)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 4)
    }
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 5)
    }
    if !self.password.isEmpty {
      try visitor.visitSingularStringField(value: self.password, fieldNumber: 6)
    }
    if !self.confirmPassword.isEmpty {
      try visitor.visitSingularStringField(value: self.confirmPassword, fieldNumber: 7)
    }
    if self.autoLogin != false {
      try visitor.visitSingularBoolField(value: self.autoLogin, fieldNumber: 8)
    }
    if !self.`continue`.isEmpty {
      try visitor.visitSingularStringField(value: self.`continue`, fieldNumber: 9)
    }
    if !self.errorView.isEmpty {
      try visitor.visitSingularStringField(value: self.errorView, fieldNumber: 10)
    }
    if !self.meta.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.meta, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Register, rhs: Register) -> Bool {
    if lhs.userName != rhs.userName {return false}
    if lhs.firstName != rhs.firstName {return false}
    if lhs.lastName != rhs.lastName {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs.email != rhs.email {return false}
    if lhs.password != rhs.password {return false}
    if lhs.confirmPassword != rhs.confirmPassword {return false}
    if lhs.autoLogin != rhs.autoLogin {return false}
    if lhs.`continue` != rhs.`continue` {return false}
    if lhs.errorView != rhs.errorView {return false}
    if lhs.meta != rhs.meta {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RegisterResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "RegisterResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "UserId"),
    2: .same(proto: "SessionId"),
    3: .same(proto: "UserName"),
    4: .same(proto: "ReferrerUrl"),
    5: .same(proto: "BearerToken"),
    6: .same(proto: "RefreshToken"),
    7: .same(proto: "ResponseStatus"),
    8: .same(proto: "Meta"),
  ]

  fileprivate class _StorageClass {
    var _userID: String = String()
    var _sessionID: String = String()
    var _userName: String = String()
    var _referrerURL: String = String()
    var _bearerToken: String = String()
    var _refreshToken: String = String()
    var _responseStatus: ResponseStatus? = nil
    var _meta: Dictionary<String,String> = [:]

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _userID = source._userID
      _sessionID = source._sessionID
      _userName = source._userName
      _referrerURL = source._referrerURL
      _bearerToken = source._bearerToken
      _refreshToken = source._refreshToken
      _responseStatus = source._responseStatus
      _meta = source._meta
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._userID)
        case 2: try decoder.decodeSingularStringField(value: &_storage._sessionID)
        case 3: try decoder.decodeSingularStringField(value: &_storage._userName)
        case 4: try decoder.decodeSingularStringField(value: &_storage._referrerURL)
        case 5: try decoder.decodeSingularStringField(value: &_storage._bearerToken)
        case 6: try decoder.decodeSingularStringField(value: &_storage._refreshToken)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._responseStatus)
        case 8: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_storage._meta)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._userID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._userID, fieldNumber: 1)
      }
      if !_storage._sessionID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sessionID, fieldNumber: 2)
      }
      if !_storage._userName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._userName, fieldNumber: 3)
      }
      if !_storage._referrerURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._referrerURL, fieldNumber: 4)
      }
      if !_storage._bearerToken.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bearerToken, fieldNumber: 5)
      }
      if !_storage._refreshToken.isEmpty {
        try visitor.visitSingularStringField(value: _storage._refreshToken, fieldNumber: 6)
      }
      if let v = _storage._responseStatus {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if !_storage._meta.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _storage._meta, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: RegisterResponse, rhs: RegisterResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._userID != rhs_storage._userID {return false}
        if _storage._sessionID != rhs_storage._sessionID {return false}
        if _storage._userName != rhs_storage._userName {return false}
        if _storage._referrerURL != rhs_storage._referrerURL {return false}
        if _storage._bearerToken != rhs_storage._bearerToken {return false}
        if _storage._refreshToken != rhs_storage._refreshToken {return false}
        if _storage._responseStatus != rhs_storage._responseStatus {return false}
        if _storage._meta != rhs_storage._meta {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ResetTodos: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ResetTodos"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ResetTodos, rhs: ResetTodos) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ResponseError: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ResponseError"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ErrorCode"),
    2: .same(proto: "FieldName"),
    3: .same(proto: "Message"),
    4: .same(proto: "Meta"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.errorCode)
      case 2: try decoder.decodeSingularStringField(value: &self.fieldName)
      case 3: try decoder.decodeSingularStringField(value: &self.message)
      case 4: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.meta)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.errorCode.isEmpty {
      try visitor.visitSingularStringField(value: self.errorCode, fieldNumber: 1)
    }
    if !self.fieldName.isEmpty {
      try visitor.visitSingularStringField(value: self.fieldName, fieldNumber: 2)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 3)
    }
    if !self.meta.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.meta, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ResponseError, rhs: ResponseError) -> Bool {
    if lhs.errorCode != rhs.errorCode {return false}
    if lhs.fieldName != rhs.fieldName {return false}
    if lhs.message != rhs.message {return false}
    if lhs.meta != rhs.meta {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ResponseStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ResponseStatus"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ErrorCode"),
    2: .same(proto: "Message"),
    3: .same(proto: "StackTrace"),
    4: .same(proto: "Errors"),
    5: .same(proto: "Meta"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.errorCode)
      case 2: try decoder.decodeSingularStringField(value: &self.message)
      case 3: try decoder.decodeSingularStringField(value: &self.stackTrace)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.errors)
      case 5: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.meta)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.errorCode.isEmpty {
      try visitor.visitSingularStringField(value: self.errorCode, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    if !self.stackTrace.isEmpty {
      try visitor.visitSingularStringField(value: self.stackTrace, fieldNumber: 3)
    }
    if !self.errors.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.errors, fieldNumber: 4)
    }
    if !self.meta.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.meta, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ResponseStatus, rhs: ResponseStatus) -> Bool {
    if lhs.errorCode != rhs.errorCode {return false}
    if lhs.message != rhs.message {return false}
    if lhs.stackTrace != rhs.stackTrace {return false}
    if lhs.errors != rhs.errors {return false}
    if lhs.meta != rhs.meta {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StreamFiles: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "StreamFiles"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Paths"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedStringField(value: &self.paths)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.paths.isEmpty {
      try visitor.visitRepeatedStringField(value: self.paths, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: StreamFiles, rhs: StreamFiles) -> Bool {
    if lhs.paths != rhs.paths {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StreamServerEvents: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "StreamServerEvents"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Channels"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedStringField(value: &self.channels)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.channels.isEmpty {
      try visitor.visitRepeatedStringField(value: self.channels, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: StreamServerEvents, rhs: StreamServerEvents) -> Bool {
    if lhs.channels != rhs.channels {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StreamServerEventsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "StreamServerEventsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "EventId"),
    2: .same(proto: "Channel"),
    4: .same(proto: "Selector"),
    5: .same(proto: "Json"),
    6: .same(proto: "Op"),
    7: .same(proto: "Target"),
    8: .same(proto: "CssSelector"),
    9: .same(proto: "Meta"),
    10: .same(proto: "UserId"),
    11: .same(proto: "DisplayName"),
    12: .same(proto: "ProfileUrl"),
    13: .same(proto: "IsAuthenticated"),
    14: .same(proto: "Channels"),
    15: .same(proto: "CreatedAt"),
    21: .same(proto: "Id"),
    22: .same(proto: "UnRegisterUrl"),
    23: .same(proto: "UpdateSubscriberUrl"),
    24: .same(proto: "HeartbeatUrl"),
    25: .same(proto: "HeartbeatIntervalMs"),
    26: .same(proto: "IdleTimeoutMs"),
    30: .same(proto: "ResponseStatus"),
  ]

  fileprivate class _StorageClass {
    var _eventID: Int64 = 0
    var _channel: String = String()
    var _selector: String = String()
    var _json: String = String()
    var _op: String = String()
    var _target: String = String()
    var _cssSelector: String = String()
    var _meta: Dictionary<String,String> = [:]
    var _userID: String = String()
    var _displayName: String = String()
    var _profileURL: String = String()
    var _isAuthenticated: Bool = false
    var _channels: [String] = []
    var _createdAt: Int64 = 0
    var _id: String = String()
    var _unRegisterURL: String = String()
    var _updateSubscriberURL: String = String()
    var _heartbeatURL: String = String()
    var _heartbeatIntervalMs: Int64 = 0
    var _idleTimeoutMs: Int64 = 0
    var _responseStatus: ResponseStatus? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _eventID = source._eventID
      _channel = source._channel
      _selector = source._selector
      _json = source._json
      _op = source._op
      _target = source._target
      _cssSelector = source._cssSelector
      _meta = source._meta
      _userID = source._userID
      _displayName = source._displayName
      _profileURL = source._profileURL
      _isAuthenticated = source._isAuthenticated
      _channels = source._channels
      _createdAt = source._createdAt
      _id = source._id
      _unRegisterURL = source._unRegisterURL
      _updateSubscriberURL = source._updateSubscriberURL
      _heartbeatURL = source._heartbeatURL
      _heartbeatIntervalMs = source._heartbeatIntervalMs
      _idleTimeoutMs = source._idleTimeoutMs
      _responseStatus = source._responseStatus
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._eventID)
        case 2: try decoder.decodeSingularStringField(value: &_storage._channel)
        case 4: try decoder.decodeSingularStringField(value: &_storage._selector)
        case 5: try decoder.decodeSingularStringField(value: &_storage._json)
        case 6: try decoder.decodeSingularStringField(value: &_storage._op)
        case 7: try decoder.decodeSingularStringField(value: &_storage._target)
        case 8: try decoder.decodeSingularStringField(value: &_storage._cssSelector)
        case 9: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_storage._meta)
        case 10: try decoder.decodeSingularStringField(value: &_storage._userID)
        case 11: try decoder.decodeSingularStringField(value: &_storage._displayName)
        case 12: try decoder.decodeSingularStringField(value: &_storage._profileURL)
        case 13: try decoder.decodeSingularBoolField(value: &_storage._isAuthenticated)
        case 14: try decoder.decodeRepeatedStringField(value: &_storage._channels)
        case 15: try decoder.decodeSingularInt64Field(value: &_storage._createdAt)
        case 21: try decoder.decodeSingularStringField(value: &_storage._id)
        case 22: try decoder.decodeSingularStringField(value: &_storage._unRegisterURL)
        case 23: try decoder.decodeSingularStringField(value: &_storage._updateSubscriberURL)
        case 24: try decoder.decodeSingularStringField(value: &_storage._heartbeatURL)
        case 25: try decoder.decodeSingularInt64Field(value: &_storage._heartbeatIntervalMs)
        case 26: try decoder.decodeSingularInt64Field(value: &_storage._idleTimeoutMs)
        case 30: try decoder.decodeSingularMessageField(value: &_storage._responseStatus)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._eventID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._eventID, fieldNumber: 1)
      }
      if !_storage._channel.isEmpty {
        try visitor.visitSingularStringField(value: _storage._channel, fieldNumber: 2)
      }
      if !_storage._selector.isEmpty {
        try visitor.visitSingularStringField(value: _storage._selector, fieldNumber: 4)
      }
      if !_storage._json.isEmpty {
        try visitor.visitSingularStringField(value: _storage._json, fieldNumber: 5)
      }
      if !_storage._op.isEmpty {
        try visitor.visitSingularStringField(value: _storage._op, fieldNumber: 6)
      }
      if !_storage._target.isEmpty {
        try visitor.visitSingularStringField(value: _storage._target, fieldNumber: 7)
      }
      if !_storage._cssSelector.isEmpty {
        try visitor.visitSingularStringField(value: _storage._cssSelector, fieldNumber: 8)
      }
      if !_storage._meta.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _storage._meta, fieldNumber: 9)
      }
      if !_storage._userID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._userID, fieldNumber: 10)
      }
      if !_storage._displayName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._displayName, fieldNumber: 11)
      }
      if !_storage._profileURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._profileURL, fieldNumber: 12)
      }
      if _storage._isAuthenticated != false {
        try visitor.visitSingularBoolField(value: _storage._isAuthenticated, fieldNumber: 13)
      }
      if !_storage._channels.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._channels, fieldNumber: 14)
      }
      if _storage._createdAt != 0 {
        try visitor.visitSingularInt64Field(value: _storage._createdAt, fieldNumber: 15)
      }
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 21)
      }
      if !_storage._unRegisterURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._unRegisterURL, fieldNumber: 22)
      }
      if !_storage._updateSubscriberURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._updateSubscriberURL, fieldNumber: 23)
      }
      if !_storage._heartbeatURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._heartbeatURL, fieldNumber: 24)
      }
      if _storage._heartbeatIntervalMs != 0 {
        try visitor.visitSingularInt64Field(value: _storage._heartbeatIntervalMs, fieldNumber: 25)
      }
      if _storage._idleTimeoutMs != 0 {
        try visitor.visitSingularInt64Field(value: _storage._idleTimeoutMs, fieldNumber: 26)
      }
      if let v = _storage._responseStatus {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 30)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: StreamServerEventsResponse, rhs: StreamServerEventsResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._eventID != rhs_storage._eventID {return false}
        if _storage._channel != rhs_storage._channel {return false}
        if _storage._selector != rhs_storage._selector {return false}
        if _storage._json != rhs_storage._json {return false}
        if _storage._op != rhs_storage._op {return false}
        if _storage._target != rhs_storage._target {return false}
        if _storage._cssSelector != rhs_storage._cssSelector {return false}
        if _storage._meta != rhs_storage._meta {return false}
        if _storage._userID != rhs_storage._userID {return false}
        if _storage._displayName != rhs_storage._displayName {return false}
        if _storage._profileURL != rhs_storage._profileURL {return false}
        if _storage._isAuthenticated != rhs_storage._isAuthenticated {return false}
        if _storage._channels != rhs_storage._channels {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._id != rhs_storage._id {return false}
        if _storage._unRegisterURL != rhs_storage._unRegisterURL {return false}
        if _storage._updateSubscriberURL != rhs_storage._updateSubscriberURL {return false}
        if _storage._heartbeatURL != rhs_storage._heartbeatURL {return false}
        if _storage._heartbeatIntervalMs != rhs_storage._heartbeatIntervalMs {return false}
        if _storage._idleTimeoutMs != rhs_storage._idleTimeoutMs {return false}
        if _storage._responseStatus != rhs_storage._responseStatus {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Todo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "Todo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Id"),
    2: .same(proto: "Title"),
    3: .same(proto: "Order"),
    4: .same(proto: "Completed"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.title)
      case 3: try decoder.decodeSingularInt32Field(value: &self.order)
      case 4: try decoder.decodeSingularBoolField(value: &self.completed)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if self.order != 0 {
      try visitor.visitSingularInt32Field(value: self.order, fieldNumber: 3)
    }
    if self.completed != false {
      try visitor.visitSingularBoolField(value: self.completed, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Todo, rhs: Todo) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.title != rhs.title {return false}
    if lhs.order != rhs.order {return false}
    if lhs.completed != rhs.completed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension UnAssignRoles: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "UnAssignRoles"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "UserName"),
    2: .same(proto: "Permissions"),
    3: .same(proto: "Roles"),
    4: .same(proto: "Meta"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.userName)
      case 2: try decoder.decodeRepeatedStringField(value: &self.permissions)
      case 3: try decoder.decodeRepeatedStringField(value: &self.roles)
      case 4: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.meta)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.userName.isEmpty {
      try visitor.visitSingularStringField(value: self.userName, fieldNumber: 1)
    }
    if !self.permissions.isEmpty {
      try visitor.visitRepeatedStringField(value: self.permissions, fieldNumber: 2)
    }
    if !self.roles.isEmpty {
      try visitor.visitRepeatedStringField(value: self.roles, fieldNumber: 3)
    }
    if !self.meta.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.meta, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: UnAssignRoles, rhs: UnAssignRoles) -> Bool {
    if lhs.userName != rhs.userName {return false}
    if lhs.permissions != rhs.permissions {return false}
    if lhs.roles != rhs.roles {return false}
    if lhs.meta != rhs.meta {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension UnAssignRolesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "UnAssignRolesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "AllRoles"),
    2: .same(proto: "AllPermissions"),
    3: .same(proto: "Meta"),
    4: .same(proto: "ResponseStatus"),
  ]

  fileprivate class _StorageClass {
    var _allRoles: [String] = []
    var _allPermissions: [String] = []
    var _meta: Dictionary<String,String> = [:]
    var _responseStatus: ResponseStatus? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _allRoles = source._allRoles
      _allPermissions = source._allPermissions
      _meta = source._meta
      _responseStatus = source._responseStatus
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedStringField(value: &_storage._allRoles)
        case 2: try decoder.decodeRepeatedStringField(value: &_storage._allPermissions)
        case 3: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_storage._meta)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._responseStatus)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._allRoles.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._allRoles, fieldNumber: 1)
      }
      if !_storage._allPermissions.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._allPermissions, fieldNumber: 2)
      }
      if !_storage._meta.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _storage._meta, fieldNumber: 3)
      }
      if let v = _storage._responseStatus {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: UnAssignRolesResponse, rhs: UnAssignRolesResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._allRoles != rhs_storage._allRoles {return false}
        if _storage._allPermissions != rhs_storage._allPermissions {return false}
        if _storage._meta != rhs_storage._meta {return false}
        if _storage._responseStatus != rhs_storage._responseStatus {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension UpdateTodo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "UpdateTodo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Id"),
    2: .same(proto: "Title"),
    3: .same(proto: "Order"),
    4: .same(proto: "Completed"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.title)
      case 3: try decoder.decodeSingularInt32Field(value: &self.order)
      case 4: try decoder.decodeSingularBoolField(value: &self.completed)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if self.order != 0 {
      try visitor.visitSingularInt32Field(value: self.order, fieldNumber: 3)
    }
    if self.completed != false {
      try visitor.visitSingularBoolField(value: self.completed, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: UpdateTodo, rhs: UpdateTodo) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.title != rhs.title {return false}
    if lhs.order != rhs.order {return false}
    if lhs.completed != rhs.completed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
