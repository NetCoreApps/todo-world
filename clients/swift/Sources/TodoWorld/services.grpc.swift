//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: services.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import GRPC
import NIO
import NIOHTTP1
import SwiftProtobuf


/// Usage: instantiate GrpcServicesServiceClient, then call methods of this protocol to make API calls.
public protocol GrpcServicesService {
  func postAssignRoles(_ request: AssignRoles, callOptions: CallOptions?) -> UnaryCall<AssignRoles, AssignRolesResponse>
  func optionsAuthenticate(_ request: Authenticate, callOptions: CallOptions?) -> UnaryCall<Authenticate, AuthenticateResponse>
  func getAuthenticate(_ request: Authenticate, callOptions: CallOptions?) -> UnaryCall<Authenticate, AuthenticateResponse>
  func postAuthenticate(_ request: Authenticate, callOptions: CallOptions?) -> UnaryCall<Authenticate, AuthenticateResponse>
  func deleteAuthenticate(_ request: Authenticate, callOptions: CallOptions?) -> UnaryCall<Authenticate, AuthenticateResponse>
  func postConvertSessionToToken(_ request: ConvertSessionToToken, callOptions: CallOptions?) -> UnaryCall<ConvertSessionToToken, ConvertSessionToTokenResponse>
  func postCreateTodo(_ request: CreateTodo, callOptions: CallOptions?) -> UnaryCall<CreateTodo, CreateTodoResponse>
  func callDeleteTodo(_ request: DeleteTodo, callOptions: CallOptions?) -> UnaryCall<DeleteTodo, EmptyResponse>
  func callDeleteTodos(_ request: DeleteTodos, callOptions: CallOptions?) -> UnaryCall<DeleteTodos, EmptyResponse>
  func postGetAccessToken(_ request: GetAccessToken, callOptions: CallOptions?) -> UnaryCall<GetAccessToken, GetAccessTokenResponse>
  func callGetTodo(_ request: GetTodo, callOptions: CallOptions?) -> UnaryCall<GetTodo, GetTodoResponse>
  func callGetTodos(_ request: GetTodos, callOptions: CallOptions?) -> UnaryCall<GetTodos, GetTodosResponse>
  func getHello(_ request: Hello, callOptions: CallOptions?) -> UnaryCall<Hello, HelloResponse>
  func postHello(_ request: Hello, callOptions: CallOptions?) -> UnaryCall<Hello, HelloResponse>
  func putHello(_ request: Hello, callOptions: CallOptions?) -> UnaryCall<Hello, HelloResponse>
  func deleteHello(_ request: Hello, callOptions: CallOptions?) -> UnaryCall<Hello, HelloResponse>
  func patchHello(_ request: Hello, callOptions: CallOptions?) -> UnaryCall<Hello, HelloResponse>
  func getHelloSecure(_ request: HelloSecure, callOptions: CallOptions?) -> UnaryCall<HelloSecure, HelloResponse>
  func postHelloSecure(_ request: HelloSecure, callOptions: CallOptions?) -> UnaryCall<HelloSecure, HelloResponse>
  func putHelloSecure(_ request: HelloSecure, callOptions: CallOptions?) -> UnaryCall<HelloSecure, HelloResponse>
  func deleteHelloSecure(_ request: HelloSecure, callOptions: CallOptions?) -> UnaryCall<HelloSecure, HelloResponse>
  func patchHelloSecure(_ request: HelloSecure, callOptions: CallOptions?) -> UnaryCall<HelloSecure, HelloResponse>
  func putRegister(_ request: Register, callOptions: CallOptions?) -> UnaryCall<Register, RegisterResponse>
  func postRegister(_ request: Register, callOptions: CallOptions?) -> UnaryCall<Register, RegisterResponse>
  func postResetTodos(_ request: ResetTodos, callOptions: CallOptions?) -> UnaryCall<ResetTodos, EmptyResponse>
  func serverStreamFiles(_ request: StreamFiles, callOptions: CallOptions?, handler: @escaping (FileContent) -> Void) -> ServerStreamingCall<StreamFiles, FileContent>
  func serverStreamServerEvents(_ request: StreamServerEvents, callOptions: CallOptions?, handler: @escaping (StreamServerEventsResponse) -> Void) -> ServerStreamingCall<StreamServerEvents, StreamServerEventsResponse>
  func postUnAssignRoles(_ request: UnAssignRoles, callOptions: CallOptions?) -> UnaryCall<UnAssignRoles, UnAssignRolesResponse>
  func putUpdateTodo(_ request: UpdateTodo, callOptions: CallOptions?) -> UnaryCall<UpdateTodo, EmptyResponse>
}

public final class GrpcServicesServiceClient: GRPCClient, GrpcServicesService {
  public let connection: ClientConnection
  public var defaultCallOptions: CallOptions

  /// Creates a client for the GrpcServices service.
  ///
  /// - Parameters:
  ///   - connection: `ClientConnection` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(connection: ClientConnection, defaultCallOptions: CallOptions = CallOptions()) {
    self.connection = connection
    self.defaultCallOptions = defaultCallOptions
  }

  /// Asynchronous unary call to PostAssignRoles.
  ///
  /// - Parameters:
  ///   - request: Request to send to PostAssignRoles.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func postAssignRoles(_ request: AssignRoles, callOptions: CallOptions? = nil) -> UnaryCall<AssignRoles, AssignRolesResponse> {
    return self.makeUnaryCall(path: "/GrpcServices/PostAssignRoles",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to OptionsAuthenticate.
  ///
  /// - Parameters:
  ///   - request: Request to send to OptionsAuthenticate.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func optionsAuthenticate(_ request: Authenticate, callOptions: CallOptions? = nil) -> UnaryCall<Authenticate, AuthenticateResponse> {
    return self.makeUnaryCall(path: "/GrpcServices/OptionsAuthenticate",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to GetAuthenticate.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAuthenticate.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getAuthenticate(_ request: Authenticate, callOptions: CallOptions? = nil) -> UnaryCall<Authenticate, AuthenticateResponse> {
    return self.makeUnaryCall(path: "/GrpcServices/GetAuthenticate",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to PostAuthenticate.
  ///
  /// - Parameters:
  ///   - request: Request to send to PostAuthenticate.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func postAuthenticate(_ request: Authenticate, callOptions: CallOptions? = nil) -> UnaryCall<Authenticate, AuthenticateResponse> {
    return self.makeUnaryCall(path: "/GrpcServices/PostAuthenticate",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to DeleteAuthenticate.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteAuthenticate.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteAuthenticate(_ request: Authenticate, callOptions: CallOptions? = nil) -> UnaryCall<Authenticate, AuthenticateResponse> {
    return self.makeUnaryCall(path: "/GrpcServices/DeleteAuthenticate",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to PostConvertSessionToToken.
  ///
  /// - Parameters:
  ///   - request: Request to send to PostConvertSessionToToken.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func postConvertSessionToToken(_ request: ConvertSessionToToken, callOptions: CallOptions? = nil) -> UnaryCall<ConvertSessionToToken, ConvertSessionToTokenResponse> {
    return self.makeUnaryCall(path: "/GrpcServices/PostConvertSessionToToken",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to PostCreateTodo.
  ///
  /// - Parameters:
  ///   - request: Request to send to PostCreateTodo.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func postCreateTodo(_ request: CreateTodo, callOptions: CallOptions? = nil) -> UnaryCall<CreateTodo, CreateTodoResponse> {
    return self.makeUnaryCall(path: "/GrpcServices/PostCreateTodo",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to CallDeleteTodo.
  ///
  /// - Parameters:
  ///   - request: Request to send to CallDeleteTodo.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func callDeleteTodo(_ request: DeleteTodo, callOptions: CallOptions? = nil) -> UnaryCall<DeleteTodo, EmptyResponse> {
    return self.makeUnaryCall(path: "/GrpcServices/CallDeleteTodo",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to CallDeleteTodos.
  ///
  /// - Parameters:
  ///   - request: Request to send to CallDeleteTodos.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func callDeleteTodos(_ request: DeleteTodos, callOptions: CallOptions? = nil) -> UnaryCall<DeleteTodos, EmptyResponse> {
    return self.makeUnaryCall(path: "/GrpcServices/CallDeleteTodos",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to PostGetAccessToken.
  ///
  /// - Parameters:
  ///   - request: Request to send to PostGetAccessToken.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func postGetAccessToken(_ request: GetAccessToken, callOptions: CallOptions? = nil) -> UnaryCall<GetAccessToken, GetAccessTokenResponse> {
    return self.makeUnaryCall(path: "/GrpcServices/PostGetAccessToken",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to CallGetTodo.
  ///
  /// - Parameters:
  ///   - request: Request to send to CallGetTodo.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func callGetTodo(_ request: GetTodo, callOptions: CallOptions? = nil) -> UnaryCall<GetTodo, GetTodoResponse> {
    return self.makeUnaryCall(path: "/GrpcServices/CallGetTodo",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to CallGetTodos.
  ///
  /// - Parameters:
  ///   - request: Request to send to CallGetTodos.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func callGetTodos(_ request: GetTodos, callOptions: CallOptions? = nil) -> UnaryCall<GetTodos, GetTodosResponse> {
    return self.makeUnaryCall(path: "/GrpcServices/CallGetTodos",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to GetHello.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetHello.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getHello(_ request: Hello, callOptions: CallOptions? = nil) -> UnaryCall<Hello, HelloResponse> {
    return self.makeUnaryCall(path: "/GrpcServices/GetHello",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to PostHello.
  ///
  /// - Parameters:
  ///   - request: Request to send to PostHello.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func postHello(_ request: Hello, callOptions: CallOptions? = nil) -> UnaryCall<Hello, HelloResponse> {
    return self.makeUnaryCall(path: "/GrpcServices/PostHello",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to PutHello.
  ///
  /// - Parameters:
  ///   - request: Request to send to PutHello.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func putHello(_ request: Hello, callOptions: CallOptions? = nil) -> UnaryCall<Hello, HelloResponse> {
    return self.makeUnaryCall(path: "/GrpcServices/PutHello",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to DeleteHello.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteHello.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteHello(_ request: Hello, callOptions: CallOptions? = nil) -> UnaryCall<Hello, HelloResponse> {
    return self.makeUnaryCall(path: "/GrpcServices/DeleteHello",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to PatchHello.
  ///
  /// - Parameters:
  ///   - request: Request to send to PatchHello.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func patchHello(_ request: Hello, callOptions: CallOptions? = nil) -> UnaryCall<Hello, HelloResponse> {
    return self.makeUnaryCall(path: "/GrpcServices/PatchHello",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to GetHelloSecure.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetHelloSecure.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getHelloSecure(_ request: HelloSecure, callOptions: CallOptions? = nil) -> UnaryCall<HelloSecure, HelloResponse> {
    return self.makeUnaryCall(path: "/GrpcServices/GetHelloSecure",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to PostHelloSecure.
  ///
  /// - Parameters:
  ///   - request: Request to send to PostHelloSecure.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func postHelloSecure(_ request: HelloSecure, callOptions: CallOptions? = nil) -> UnaryCall<HelloSecure, HelloResponse> {
    return self.makeUnaryCall(path: "/GrpcServices/PostHelloSecure",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to PutHelloSecure.
  ///
  /// - Parameters:
  ///   - request: Request to send to PutHelloSecure.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func putHelloSecure(_ request: HelloSecure, callOptions: CallOptions? = nil) -> UnaryCall<HelloSecure, HelloResponse> {
    return self.makeUnaryCall(path: "/GrpcServices/PutHelloSecure",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to DeleteHelloSecure.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteHelloSecure.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteHelloSecure(_ request: HelloSecure, callOptions: CallOptions? = nil) -> UnaryCall<HelloSecure, HelloResponse> {
    return self.makeUnaryCall(path: "/GrpcServices/DeleteHelloSecure",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to PatchHelloSecure.
  ///
  /// - Parameters:
  ///   - request: Request to send to PatchHelloSecure.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func patchHelloSecure(_ request: HelloSecure, callOptions: CallOptions? = nil) -> UnaryCall<HelloSecure, HelloResponse> {
    return self.makeUnaryCall(path: "/GrpcServices/PatchHelloSecure",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to PutRegister.
  ///
  /// - Parameters:
  ///   - request: Request to send to PutRegister.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func putRegister(_ request: Register, callOptions: CallOptions? = nil) -> UnaryCall<Register, RegisterResponse> {
    return self.makeUnaryCall(path: "/GrpcServices/PutRegister",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to PostRegister.
  ///
  /// - Parameters:
  ///   - request: Request to send to PostRegister.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func postRegister(_ request: Register, callOptions: CallOptions? = nil) -> UnaryCall<Register, RegisterResponse> {
    return self.makeUnaryCall(path: "/GrpcServices/PostRegister",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to PostResetTodos.
  ///
  /// - Parameters:
  ///   - request: Request to send to PostResetTodos.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func postResetTodos(_ request: ResetTodos, callOptions: CallOptions? = nil) -> UnaryCall<ResetTodos, EmptyResponse> {
    return self.makeUnaryCall(path: "/GrpcServices/PostResetTodos",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous server-streaming call to ServerStreamFiles.
  ///
  /// - Parameters:
  ///   - request: Request to send to ServerStreamFiles.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func serverStreamFiles(_ request: StreamFiles, callOptions: CallOptions? = nil, handler: @escaping (FileContent) -> Void) -> ServerStreamingCall<StreamFiles, FileContent> {
    return self.makeServerStreamingCall(path: "/GrpcServices/ServerStreamFiles",
                                        request: request,
                                        callOptions: callOptions ?? self.defaultCallOptions,
                                        handler: handler)
  }

  /// Asynchronous server-streaming call to ServerStreamServerEvents.
  ///
  /// - Parameters:
  ///   - request: Request to send to ServerStreamServerEvents.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func serverStreamServerEvents(_ request: StreamServerEvents, callOptions: CallOptions? = nil, handler: @escaping (StreamServerEventsResponse) -> Void) -> ServerStreamingCall<StreamServerEvents, StreamServerEventsResponse> {
    return self.makeServerStreamingCall(path: "/GrpcServices/ServerStreamServerEvents",
                                        request: request,
                                        callOptions: callOptions ?? self.defaultCallOptions,
                                        handler: handler)
  }

  /// Asynchronous unary call to PostUnAssignRoles.
  ///
  /// - Parameters:
  ///   - request: Request to send to PostUnAssignRoles.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func postUnAssignRoles(_ request: UnAssignRoles, callOptions: CallOptions? = nil) -> UnaryCall<UnAssignRoles, UnAssignRolesResponse> {
    return self.makeUnaryCall(path: "/GrpcServices/PostUnAssignRoles",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to PutUpdateTodo.
  ///
  /// - Parameters:
  ///   - request: Request to send to PutUpdateTodo.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func putUpdateTodo(_ request: UpdateTodo, callOptions: CallOptions? = nil) -> UnaryCall<UpdateTodo, EmptyResponse> {
    return self.makeUnaryCall(path: "/GrpcServices/PutUpdateTodo",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

}

