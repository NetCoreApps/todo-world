// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: services.proto
// Original file comments:
// Options:
// Date: 2019-12-08 21:36:46
// Version: 5.71
// Tip: To override a DTO option, remove "//" prefix before updating
// BaseUrl: https://localhost:5001
//
// //GlobalNamespace: 
// //AddDescriptionAsComments: True
//
#ifndef GRPC_services_2eproto__INCLUDED
#define GRPC_services_2eproto__INCLUDED

#include "services.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

class GrpcServices final {
 public:
  static constexpr char const* service_full_name() {
    return "GrpcServices";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status PostAssignRoles(::grpc::ClientContext* context, const ::AssignRoles& request, ::AssignRolesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AssignRolesResponse>> AsyncPostAssignRoles(::grpc::ClientContext* context, const ::AssignRoles& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AssignRolesResponse>>(AsyncPostAssignRolesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AssignRolesResponse>> PrepareAsyncPostAssignRoles(::grpc::ClientContext* context, const ::AssignRoles& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AssignRolesResponse>>(PrepareAsyncPostAssignRolesRaw(context, request, cq));
    }
    virtual ::grpc::Status OptionsAuthenticate(::grpc::ClientContext* context, const ::Authenticate& request, ::AuthenticateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AuthenticateResponse>> AsyncOptionsAuthenticate(::grpc::ClientContext* context, const ::Authenticate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AuthenticateResponse>>(AsyncOptionsAuthenticateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AuthenticateResponse>> PrepareAsyncOptionsAuthenticate(::grpc::ClientContext* context, const ::Authenticate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AuthenticateResponse>>(PrepareAsyncOptionsAuthenticateRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAuthenticate(::grpc::ClientContext* context, const ::Authenticate& request, ::AuthenticateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AuthenticateResponse>> AsyncGetAuthenticate(::grpc::ClientContext* context, const ::Authenticate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AuthenticateResponse>>(AsyncGetAuthenticateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AuthenticateResponse>> PrepareAsyncGetAuthenticate(::grpc::ClientContext* context, const ::Authenticate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AuthenticateResponse>>(PrepareAsyncGetAuthenticateRaw(context, request, cq));
    }
    virtual ::grpc::Status PostAuthenticate(::grpc::ClientContext* context, const ::Authenticate& request, ::AuthenticateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AuthenticateResponse>> AsyncPostAuthenticate(::grpc::ClientContext* context, const ::Authenticate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AuthenticateResponse>>(AsyncPostAuthenticateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AuthenticateResponse>> PrepareAsyncPostAuthenticate(::grpc::ClientContext* context, const ::Authenticate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AuthenticateResponse>>(PrepareAsyncPostAuthenticateRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteAuthenticate(::grpc::ClientContext* context, const ::Authenticate& request, ::AuthenticateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AuthenticateResponse>> AsyncDeleteAuthenticate(::grpc::ClientContext* context, const ::Authenticate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AuthenticateResponse>>(AsyncDeleteAuthenticateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AuthenticateResponse>> PrepareAsyncDeleteAuthenticate(::grpc::ClientContext* context, const ::Authenticate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AuthenticateResponse>>(PrepareAsyncDeleteAuthenticateRaw(context, request, cq));
    }
    virtual ::grpc::Status PostConvertSessionToToken(::grpc::ClientContext* context, const ::ConvertSessionToToken& request, ::ConvertSessionToTokenResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ConvertSessionToTokenResponse>> AsyncPostConvertSessionToToken(::grpc::ClientContext* context, const ::ConvertSessionToToken& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ConvertSessionToTokenResponse>>(AsyncPostConvertSessionToTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ConvertSessionToTokenResponse>> PrepareAsyncPostConvertSessionToToken(::grpc::ClientContext* context, const ::ConvertSessionToToken& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ConvertSessionToTokenResponse>>(PrepareAsyncPostConvertSessionToTokenRaw(context, request, cq));
    }
    virtual ::grpc::Status PostCreateTodo(::grpc::ClientContext* context, const ::CreateTodo& request, ::CreateTodoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CreateTodoResponse>> AsyncPostCreateTodo(::grpc::ClientContext* context, const ::CreateTodo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CreateTodoResponse>>(AsyncPostCreateTodoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CreateTodoResponse>> PrepareAsyncPostCreateTodo(::grpc::ClientContext* context, const ::CreateTodo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CreateTodoResponse>>(PrepareAsyncPostCreateTodoRaw(context, request, cq));
    }
    virtual ::grpc::Status CallDeleteTodo(::grpc::ClientContext* context, const ::DeleteTodo& request, ::EmptyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EmptyResponse>> AsyncCallDeleteTodo(::grpc::ClientContext* context, const ::DeleteTodo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EmptyResponse>>(AsyncCallDeleteTodoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EmptyResponse>> PrepareAsyncCallDeleteTodo(::grpc::ClientContext* context, const ::DeleteTodo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EmptyResponse>>(PrepareAsyncCallDeleteTodoRaw(context, request, cq));
    }
    virtual ::grpc::Status CallDeleteTodos(::grpc::ClientContext* context, const ::DeleteTodos& request, ::EmptyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EmptyResponse>> AsyncCallDeleteTodos(::grpc::ClientContext* context, const ::DeleteTodos& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EmptyResponse>>(AsyncCallDeleteTodosRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EmptyResponse>> PrepareAsyncCallDeleteTodos(::grpc::ClientContext* context, const ::DeleteTodos& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EmptyResponse>>(PrepareAsyncCallDeleteTodosRaw(context, request, cq));
    }
    virtual ::grpc::Status PostGetAccessToken(::grpc::ClientContext* context, const ::GetAccessToken& request, ::GetAccessTokenResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetAccessTokenResponse>> AsyncPostGetAccessToken(::grpc::ClientContext* context, const ::GetAccessToken& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetAccessTokenResponse>>(AsyncPostGetAccessTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetAccessTokenResponse>> PrepareAsyncPostGetAccessToken(::grpc::ClientContext* context, const ::GetAccessToken& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetAccessTokenResponse>>(PrepareAsyncPostGetAccessTokenRaw(context, request, cq));
    }
    virtual ::grpc::Status CallGetTodo(::grpc::ClientContext* context, const ::GetTodo& request, ::GetTodoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetTodoResponse>> AsyncCallGetTodo(::grpc::ClientContext* context, const ::GetTodo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetTodoResponse>>(AsyncCallGetTodoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetTodoResponse>> PrepareAsyncCallGetTodo(::grpc::ClientContext* context, const ::GetTodo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetTodoResponse>>(PrepareAsyncCallGetTodoRaw(context, request, cq));
    }
    virtual ::grpc::Status CallGetTodos(::grpc::ClientContext* context, const ::GetTodos& request, ::GetTodosResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetTodosResponse>> AsyncCallGetTodos(::grpc::ClientContext* context, const ::GetTodos& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetTodosResponse>>(AsyncCallGetTodosRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetTodosResponse>> PrepareAsyncCallGetTodos(::grpc::ClientContext* context, const ::GetTodos& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetTodosResponse>>(PrepareAsyncCallGetTodosRaw(context, request, cq));
    }
    virtual ::grpc::Status GetHello(::grpc::ClientContext* context, const ::Hello& request, ::HelloResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>> AsyncGetHello(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>>(AsyncGetHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>> PrepareAsyncGetHello(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>>(PrepareAsyncGetHelloRaw(context, request, cq));
    }
    virtual ::grpc::Status PostHello(::grpc::ClientContext* context, const ::Hello& request, ::HelloResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>> AsyncPostHello(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>>(AsyncPostHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>> PrepareAsyncPostHello(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>>(PrepareAsyncPostHelloRaw(context, request, cq));
    }
    virtual ::grpc::Status PutHello(::grpc::ClientContext* context, const ::Hello& request, ::HelloResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>> AsyncPutHello(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>>(AsyncPutHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>> PrepareAsyncPutHello(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>>(PrepareAsyncPutHelloRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteHello(::grpc::ClientContext* context, const ::Hello& request, ::HelloResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>> AsyncDeleteHello(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>>(AsyncDeleteHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>> PrepareAsyncDeleteHello(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>>(PrepareAsyncDeleteHelloRaw(context, request, cq));
    }
    virtual ::grpc::Status PatchHello(::grpc::ClientContext* context, const ::Hello& request, ::HelloResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>> AsyncPatchHello(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>>(AsyncPatchHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>> PrepareAsyncPatchHello(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>>(PrepareAsyncPatchHelloRaw(context, request, cq));
    }
    virtual ::grpc::Status GetHelloSecure(::grpc::ClientContext* context, const ::HelloSecure& request, ::HelloResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>> AsyncGetHelloSecure(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>>(AsyncGetHelloSecureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>> PrepareAsyncGetHelloSecure(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>>(PrepareAsyncGetHelloSecureRaw(context, request, cq));
    }
    virtual ::grpc::Status PostHelloSecure(::grpc::ClientContext* context, const ::HelloSecure& request, ::HelloResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>> AsyncPostHelloSecure(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>>(AsyncPostHelloSecureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>> PrepareAsyncPostHelloSecure(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>>(PrepareAsyncPostHelloSecureRaw(context, request, cq));
    }
    virtual ::grpc::Status PutHelloSecure(::grpc::ClientContext* context, const ::HelloSecure& request, ::HelloResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>> AsyncPutHelloSecure(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>>(AsyncPutHelloSecureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>> PrepareAsyncPutHelloSecure(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>>(PrepareAsyncPutHelloSecureRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteHelloSecure(::grpc::ClientContext* context, const ::HelloSecure& request, ::HelloResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>> AsyncDeleteHelloSecure(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>>(AsyncDeleteHelloSecureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>> PrepareAsyncDeleteHelloSecure(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>>(PrepareAsyncDeleteHelloSecureRaw(context, request, cq));
    }
    virtual ::grpc::Status PatchHelloSecure(::grpc::ClientContext* context, const ::HelloSecure& request, ::HelloResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>> AsyncPatchHelloSecure(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>>(AsyncPatchHelloSecureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>> PrepareAsyncPatchHelloSecure(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>>(PrepareAsyncPatchHelloSecureRaw(context, request, cq));
    }
    virtual ::grpc::Status PutRegister(::grpc::ClientContext* context, const ::Register& request, ::RegisterResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RegisterResponse>> AsyncPutRegister(::grpc::ClientContext* context, const ::Register& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RegisterResponse>>(AsyncPutRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RegisterResponse>> PrepareAsyncPutRegister(::grpc::ClientContext* context, const ::Register& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RegisterResponse>>(PrepareAsyncPutRegisterRaw(context, request, cq));
    }
    virtual ::grpc::Status PostRegister(::grpc::ClientContext* context, const ::Register& request, ::RegisterResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RegisterResponse>> AsyncPostRegister(::grpc::ClientContext* context, const ::Register& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RegisterResponse>>(AsyncPostRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RegisterResponse>> PrepareAsyncPostRegister(::grpc::ClientContext* context, const ::Register& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RegisterResponse>>(PrepareAsyncPostRegisterRaw(context, request, cq));
    }
    virtual ::grpc::Status PostResetTodos(::grpc::ClientContext* context, const ::ResetTodos& request, ::EmptyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EmptyResponse>> AsyncPostResetTodos(::grpc::ClientContext* context, const ::ResetTodos& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EmptyResponse>>(AsyncPostResetTodosRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EmptyResponse>> PrepareAsyncPostResetTodos(::grpc::ClientContext* context, const ::ResetTodos& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EmptyResponse>>(PrepareAsyncPostResetTodosRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::FileContent>> ServerStreamFiles(::grpc::ClientContext* context, const ::StreamFiles& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::FileContent>>(ServerStreamFilesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::FileContent>> AsyncServerStreamFiles(::grpc::ClientContext* context, const ::StreamFiles& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::FileContent>>(AsyncServerStreamFilesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::FileContent>> PrepareAsyncServerStreamFiles(::grpc::ClientContext* context, const ::StreamFiles& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::FileContent>>(PrepareAsyncServerStreamFilesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::StreamServerEventsResponse>> ServerStreamServerEvents(::grpc::ClientContext* context, const ::StreamServerEvents& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::StreamServerEventsResponse>>(ServerStreamServerEventsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::StreamServerEventsResponse>> AsyncServerStreamServerEvents(::grpc::ClientContext* context, const ::StreamServerEvents& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::StreamServerEventsResponse>>(AsyncServerStreamServerEventsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::StreamServerEventsResponse>> PrepareAsyncServerStreamServerEvents(::grpc::ClientContext* context, const ::StreamServerEvents& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::StreamServerEventsResponse>>(PrepareAsyncServerStreamServerEventsRaw(context, request, cq));
    }
    virtual ::grpc::Status PostUnAssignRoles(::grpc::ClientContext* context, const ::UnAssignRoles& request, ::UnAssignRolesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::UnAssignRolesResponse>> AsyncPostUnAssignRoles(::grpc::ClientContext* context, const ::UnAssignRoles& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::UnAssignRolesResponse>>(AsyncPostUnAssignRolesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::UnAssignRolesResponse>> PrepareAsyncPostUnAssignRoles(::grpc::ClientContext* context, const ::UnAssignRoles& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::UnAssignRolesResponse>>(PrepareAsyncPostUnAssignRolesRaw(context, request, cq));
    }
    virtual ::grpc::Status PutUpdateTodo(::grpc::ClientContext* context, const ::UpdateTodo& request, ::EmptyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EmptyResponse>> AsyncPutUpdateTodo(::grpc::ClientContext* context, const ::UpdateTodo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EmptyResponse>>(AsyncPutUpdateTodoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EmptyResponse>> PrepareAsyncPutUpdateTodo(::grpc::ClientContext* context, const ::UpdateTodo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EmptyResponse>>(PrepareAsyncPutUpdateTodoRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void PostAssignRoles(::grpc::ClientContext* context, const ::AssignRoles* request, ::AssignRolesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostAssignRoles(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AssignRolesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OptionsAuthenticate(::grpc::ClientContext* context, const ::Authenticate* request, ::AuthenticateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OptionsAuthenticate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AuthenticateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAuthenticate(::grpc::ClientContext* context, const ::Authenticate* request, ::AuthenticateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAuthenticate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AuthenticateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostAuthenticate(::grpc::ClientContext* context, const ::Authenticate* request, ::AuthenticateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostAuthenticate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AuthenticateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteAuthenticate(::grpc::ClientContext* context, const ::Authenticate* request, ::AuthenticateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteAuthenticate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AuthenticateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostConvertSessionToToken(::grpc::ClientContext* context, const ::ConvertSessionToToken* request, ::ConvertSessionToTokenResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostConvertSessionToToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ConvertSessionToTokenResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostCreateTodo(::grpc::ClientContext* context, const ::CreateTodo* request, ::CreateTodoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostCreateTodo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::CreateTodoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CallDeleteTodo(::grpc::ClientContext* context, const ::DeleteTodo* request, ::EmptyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CallDeleteTodo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::EmptyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CallDeleteTodos(::grpc::ClientContext* context, const ::DeleteTodos* request, ::EmptyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CallDeleteTodos(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::EmptyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostGetAccessToken(::grpc::ClientContext* context, const ::GetAccessToken* request, ::GetAccessTokenResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostGetAccessToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetAccessTokenResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CallGetTodo(::grpc::ClientContext* context, const ::GetTodo* request, ::GetTodoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CallGetTodo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetTodoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CallGetTodos(::grpc::ClientContext* context, const ::GetTodos* request, ::GetTodosResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CallGetTodos(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetTodosResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetHello(::grpc::ClientContext* context, const ::Hello* request, ::HelloResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetHello(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HelloResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostHello(::grpc::ClientContext* context, const ::Hello* request, ::HelloResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostHello(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HelloResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PutHello(::grpc::ClientContext* context, const ::Hello* request, ::HelloResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PutHello(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HelloResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteHello(::grpc::ClientContext* context, const ::Hello* request, ::HelloResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteHello(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HelloResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PatchHello(::grpc::ClientContext* context, const ::Hello* request, ::HelloResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PatchHello(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HelloResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetHelloSecure(::grpc::ClientContext* context, const ::HelloSecure* request, ::HelloResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetHelloSecure(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HelloResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostHelloSecure(::grpc::ClientContext* context, const ::HelloSecure* request, ::HelloResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostHelloSecure(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HelloResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PutHelloSecure(::grpc::ClientContext* context, const ::HelloSecure* request, ::HelloResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PutHelloSecure(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HelloResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteHelloSecure(::grpc::ClientContext* context, const ::HelloSecure* request, ::HelloResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteHelloSecure(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HelloResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PatchHelloSecure(::grpc::ClientContext* context, const ::HelloSecure* request, ::HelloResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PatchHelloSecure(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HelloResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PutRegister(::grpc::ClientContext* context, const ::Register* request, ::RegisterResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PutRegister(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::RegisterResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostRegister(::grpc::ClientContext* context, const ::Register* request, ::RegisterResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostRegister(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::RegisterResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostResetTodos(::grpc::ClientContext* context, const ::ResetTodos* request, ::EmptyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostResetTodos(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::EmptyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ServerStreamFiles(::grpc::ClientContext* context, ::StreamFiles* request, ::grpc::experimental::ClientReadReactor< ::FileContent>* reactor) = 0;
      virtual void ServerStreamServerEvents(::grpc::ClientContext* context, ::StreamServerEvents* request, ::grpc::experimental::ClientReadReactor< ::StreamServerEventsResponse>* reactor) = 0;
      virtual void PostUnAssignRoles(::grpc::ClientContext* context, const ::UnAssignRoles* request, ::UnAssignRolesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostUnAssignRoles(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::UnAssignRolesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PutUpdateTodo(::grpc::ClientContext* context, const ::UpdateTodo* request, ::EmptyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PutUpdateTodo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::EmptyResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AssignRolesResponse>* AsyncPostAssignRolesRaw(::grpc::ClientContext* context, const ::AssignRoles& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AssignRolesResponse>* PrepareAsyncPostAssignRolesRaw(::grpc::ClientContext* context, const ::AssignRoles& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AuthenticateResponse>* AsyncOptionsAuthenticateRaw(::grpc::ClientContext* context, const ::Authenticate& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AuthenticateResponse>* PrepareAsyncOptionsAuthenticateRaw(::grpc::ClientContext* context, const ::Authenticate& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AuthenticateResponse>* AsyncGetAuthenticateRaw(::grpc::ClientContext* context, const ::Authenticate& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AuthenticateResponse>* PrepareAsyncGetAuthenticateRaw(::grpc::ClientContext* context, const ::Authenticate& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AuthenticateResponse>* AsyncPostAuthenticateRaw(::grpc::ClientContext* context, const ::Authenticate& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AuthenticateResponse>* PrepareAsyncPostAuthenticateRaw(::grpc::ClientContext* context, const ::Authenticate& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AuthenticateResponse>* AsyncDeleteAuthenticateRaw(::grpc::ClientContext* context, const ::Authenticate& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AuthenticateResponse>* PrepareAsyncDeleteAuthenticateRaw(::grpc::ClientContext* context, const ::Authenticate& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ConvertSessionToTokenResponse>* AsyncPostConvertSessionToTokenRaw(::grpc::ClientContext* context, const ::ConvertSessionToToken& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ConvertSessionToTokenResponse>* PrepareAsyncPostConvertSessionToTokenRaw(::grpc::ClientContext* context, const ::ConvertSessionToToken& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CreateTodoResponse>* AsyncPostCreateTodoRaw(::grpc::ClientContext* context, const ::CreateTodo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CreateTodoResponse>* PrepareAsyncPostCreateTodoRaw(::grpc::ClientContext* context, const ::CreateTodo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::EmptyResponse>* AsyncCallDeleteTodoRaw(::grpc::ClientContext* context, const ::DeleteTodo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::EmptyResponse>* PrepareAsyncCallDeleteTodoRaw(::grpc::ClientContext* context, const ::DeleteTodo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::EmptyResponse>* AsyncCallDeleteTodosRaw(::grpc::ClientContext* context, const ::DeleteTodos& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::EmptyResponse>* PrepareAsyncCallDeleteTodosRaw(::grpc::ClientContext* context, const ::DeleteTodos& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetAccessTokenResponse>* AsyncPostGetAccessTokenRaw(::grpc::ClientContext* context, const ::GetAccessToken& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetAccessTokenResponse>* PrepareAsyncPostGetAccessTokenRaw(::grpc::ClientContext* context, const ::GetAccessToken& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetTodoResponse>* AsyncCallGetTodoRaw(::grpc::ClientContext* context, const ::GetTodo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetTodoResponse>* PrepareAsyncCallGetTodoRaw(::grpc::ClientContext* context, const ::GetTodo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetTodosResponse>* AsyncCallGetTodosRaw(::grpc::ClientContext* context, const ::GetTodos& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetTodosResponse>* PrepareAsyncCallGetTodosRaw(::grpc::ClientContext* context, const ::GetTodos& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>* AsyncGetHelloRaw(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>* PrepareAsyncGetHelloRaw(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>* AsyncPostHelloRaw(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>* PrepareAsyncPostHelloRaw(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>* AsyncPutHelloRaw(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>* PrepareAsyncPutHelloRaw(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>* AsyncDeleteHelloRaw(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>* PrepareAsyncDeleteHelloRaw(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>* AsyncPatchHelloRaw(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>* PrepareAsyncPatchHelloRaw(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>* AsyncGetHelloSecureRaw(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>* PrepareAsyncGetHelloSecureRaw(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>* AsyncPostHelloSecureRaw(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>* PrepareAsyncPostHelloSecureRaw(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>* AsyncPutHelloSecureRaw(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>* PrepareAsyncPutHelloSecureRaw(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>* AsyncDeleteHelloSecureRaw(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>* PrepareAsyncDeleteHelloSecureRaw(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>* AsyncPatchHelloSecureRaw(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HelloResponse>* PrepareAsyncPatchHelloSecureRaw(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RegisterResponse>* AsyncPutRegisterRaw(::grpc::ClientContext* context, const ::Register& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RegisterResponse>* PrepareAsyncPutRegisterRaw(::grpc::ClientContext* context, const ::Register& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RegisterResponse>* AsyncPostRegisterRaw(::grpc::ClientContext* context, const ::Register& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RegisterResponse>* PrepareAsyncPostRegisterRaw(::grpc::ClientContext* context, const ::Register& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::EmptyResponse>* AsyncPostResetTodosRaw(::grpc::ClientContext* context, const ::ResetTodos& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::EmptyResponse>* PrepareAsyncPostResetTodosRaw(::grpc::ClientContext* context, const ::ResetTodos& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::FileContent>* ServerStreamFilesRaw(::grpc::ClientContext* context, const ::StreamFiles& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::FileContent>* AsyncServerStreamFilesRaw(::grpc::ClientContext* context, const ::StreamFiles& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::FileContent>* PrepareAsyncServerStreamFilesRaw(::grpc::ClientContext* context, const ::StreamFiles& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::StreamServerEventsResponse>* ServerStreamServerEventsRaw(::grpc::ClientContext* context, const ::StreamServerEvents& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::StreamServerEventsResponse>* AsyncServerStreamServerEventsRaw(::grpc::ClientContext* context, const ::StreamServerEvents& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::StreamServerEventsResponse>* PrepareAsyncServerStreamServerEventsRaw(::grpc::ClientContext* context, const ::StreamServerEvents& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::UnAssignRolesResponse>* AsyncPostUnAssignRolesRaw(::grpc::ClientContext* context, const ::UnAssignRoles& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::UnAssignRolesResponse>* PrepareAsyncPostUnAssignRolesRaw(::grpc::ClientContext* context, const ::UnAssignRoles& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::EmptyResponse>* AsyncPutUpdateTodoRaw(::grpc::ClientContext* context, const ::UpdateTodo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::EmptyResponse>* PrepareAsyncPutUpdateTodoRaw(::grpc::ClientContext* context, const ::UpdateTodo& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status PostAssignRoles(::grpc::ClientContext* context, const ::AssignRoles& request, ::AssignRolesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AssignRolesResponse>> AsyncPostAssignRoles(::grpc::ClientContext* context, const ::AssignRoles& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AssignRolesResponse>>(AsyncPostAssignRolesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AssignRolesResponse>> PrepareAsyncPostAssignRoles(::grpc::ClientContext* context, const ::AssignRoles& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AssignRolesResponse>>(PrepareAsyncPostAssignRolesRaw(context, request, cq));
    }
    ::grpc::Status OptionsAuthenticate(::grpc::ClientContext* context, const ::Authenticate& request, ::AuthenticateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AuthenticateResponse>> AsyncOptionsAuthenticate(::grpc::ClientContext* context, const ::Authenticate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AuthenticateResponse>>(AsyncOptionsAuthenticateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AuthenticateResponse>> PrepareAsyncOptionsAuthenticate(::grpc::ClientContext* context, const ::Authenticate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AuthenticateResponse>>(PrepareAsyncOptionsAuthenticateRaw(context, request, cq));
    }
    ::grpc::Status GetAuthenticate(::grpc::ClientContext* context, const ::Authenticate& request, ::AuthenticateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AuthenticateResponse>> AsyncGetAuthenticate(::grpc::ClientContext* context, const ::Authenticate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AuthenticateResponse>>(AsyncGetAuthenticateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AuthenticateResponse>> PrepareAsyncGetAuthenticate(::grpc::ClientContext* context, const ::Authenticate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AuthenticateResponse>>(PrepareAsyncGetAuthenticateRaw(context, request, cq));
    }
    ::grpc::Status PostAuthenticate(::grpc::ClientContext* context, const ::Authenticate& request, ::AuthenticateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AuthenticateResponse>> AsyncPostAuthenticate(::grpc::ClientContext* context, const ::Authenticate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AuthenticateResponse>>(AsyncPostAuthenticateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AuthenticateResponse>> PrepareAsyncPostAuthenticate(::grpc::ClientContext* context, const ::Authenticate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AuthenticateResponse>>(PrepareAsyncPostAuthenticateRaw(context, request, cq));
    }
    ::grpc::Status DeleteAuthenticate(::grpc::ClientContext* context, const ::Authenticate& request, ::AuthenticateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AuthenticateResponse>> AsyncDeleteAuthenticate(::grpc::ClientContext* context, const ::Authenticate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AuthenticateResponse>>(AsyncDeleteAuthenticateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AuthenticateResponse>> PrepareAsyncDeleteAuthenticate(::grpc::ClientContext* context, const ::Authenticate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AuthenticateResponse>>(PrepareAsyncDeleteAuthenticateRaw(context, request, cq));
    }
    ::grpc::Status PostConvertSessionToToken(::grpc::ClientContext* context, const ::ConvertSessionToToken& request, ::ConvertSessionToTokenResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ConvertSessionToTokenResponse>> AsyncPostConvertSessionToToken(::grpc::ClientContext* context, const ::ConvertSessionToToken& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ConvertSessionToTokenResponse>>(AsyncPostConvertSessionToTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ConvertSessionToTokenResponse>> PrepareAsyncPostConvertSessionToToken(::grpc::ClientContext* context, const ::ConvertSessionToToken& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ConvertSessionToTokenResponse>>(PrepareAsyncPostConvertSessionToTokenRaw(context, request, cq));
    }
    ::grpc::Status PostCreateTodo(::grpc::ClientContext* context, const ::CreateTodo& request, ::CreateTodoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CreateTodoResponse>> AsyncPostCreateTodo(::grpc::ClientContext* context, const ::CreateTodo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CreateTodoResponse>>(AsyncPostCreateTodoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CreateTodoResponse>> PrepareAsyncPostCreateTodo(::grpc::ClientContext* context, const ::CreateTodo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CreateTodoResponse>>(PrepareAsyncPostCreateTodoRaw(context, request, cq));
    }
    ::grpc::Status CallDeleteTodo(::grpc::ClientContext* context, const ::DeleteTodo& request, ::EmptyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EmptyResponse>> AsyncCallDeleteTodo(::grpc::ClientContext* context, const ::DeleteTodo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EmptyResponse>>(AsyncCallDeleteTodoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EmptyResponse>> PrepareAsyncCallDeleteTodo(::grpc::ClientContext* context, const ::DeleteTodo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EmptyResponse>>(PrepareAsyncCallDeleteTodoRaw(context, request, cq));
    }
    ::grpc::Status CallDeleteTodos(::grpc::ClientContext* context, const ::DeleteTodos& request, ::EmptyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EmptyResponse>> AsyncCallDeleteTodos(::grpc::ClientContext* context, const ::DeleteTodos& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EmptyResponse>>(AsyncCallDeleteTodosRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EmptyResponse>> PrepareAsyncCallDeleteTodos(::grpc::ClientContext* context, const ::DeleteTodos& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EmptyResponse>>(PrepareAsyncCallDeleteTodosRaw(context, request, cq));
    }
    ::grpc::Status PostGetAccessToken(::grpc::ClientContext* context, const ::GetAccessToken& request, ::GetAccessTokenResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetAccessTokenResponse>> AsyncPostGetAccessToken(::grpc::ClientContext* context, const ::GetAccessToken& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetAccessTokenResponse>>(AsyncPostGetAccessTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetAccessTokenResponse>> PrepareAsyncPostGetAccessToken(::grpc::ClientContext* context, const ::GetAccessToken& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetAccessTokenResponse>>(PrepareAsyncPostGetAccessTokenRaw(context, request, cq));
    }
    ::grpc::Status CallGetTodo(::grpc::ClientContext* context, const ::GetTodo& request, ::GetTodoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetTodoResponse>> AsyncCallGetTodo(::grpc::ClientContext* context, const ::GetTodo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetTodoResponse>>(AsyncCallGetTodoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetTodoResponse>> PrepareAsyncCallGetTodo(::grpc::ClientContext* context, const ::GetTodo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetTodoResponse>>(PrepareAsyncCallGetTodoRaw(context, request, cq));
    }
    ::grpc::Status CallGetTodos(::grpc::ClientContext* context, const ::GetTodos& request, ::GetTodosResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetTodosResponse>> AsyncCallGetTodos(::grpc::ClientContext* context, const ::GetTodos& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetTodosResponse>>(AsyncCallGetTodosRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetTodosResponse>> PrepareAsyncCallGetTodos(::grpc::ClientContext* context, const ::GetTodos& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetTodosResponse>>(PrepareAsyncCallGetTodosRaw(context, request, cq));
    }
    ::grpc::Status GetHello(::grpc::ClientContext* context, const ::Hello& request, ::HelloResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HelloResponse>> AsyncGetHello(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HelloResponse>>(AsyncGetHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HelloResponse>> PrepareAsyncGetHello(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HelloResponse>>(PrepareAsyncGetHelloRaw(context, request, cq));
    }
    ::grpc::Status PostHello(::grpc::ClientContext* context, const ::Hello& request, ::HelloResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HelloResponse>> AsyncPostHello(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HelloResponse>>(AsyncPostHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HelloResponse>> PrepareAsyncPostHello(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HelloResponse>>(PrepareAsyncPostHelloRaw(context, request, cq));
    }
    ::grpc::Status PutHello(::grpc::ClientContext* context, const ::Hello& request, ::HelloResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HelloResponse>> AsyncPutHello(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HelloResponse>>(AsyncPutHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HelloResponse>> PrepareAsyncPutHello(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HelloResponse>>(PrepareAsyncPutHelloRaw(context, request, cq));
    }
    ::grpc::Status DeleteHello(::grpc::ClientContext* context, const ::Hello& request, ::HelloResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HelloResponse>> AsyncDeleteHello(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HelloResponse>>(AsyncDeleteHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HelloResponse>> PrepareAsyncDeleteHello(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HelloResponse>>(PrepareAsyncDeleteHelloRaw(context, request, cq));
    }
    ::grpc::Status PatchHello(::grpc::ClientContext* context, const ::Hello& request, ::HelloResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HelloResponse>> AsyncPatchHello(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HelloResponse>>(AsyncPatchHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HelloResponse>> PrepareAsyncPatchHello(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HelloResponse>>(PrepareAsyncPatchHelloRaw(context, request, cq));
    }
    ::grpc::Status GetHelloSecure(::grpc::ClientContext* context, const ::HelloSecure& request, ::HelloResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HelloResponse>> AsyncGetHelloSecure(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HelloResponse>>(AsyncGetHelloSecureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HelloResponse>> PrepareAsyncGetHelloSecure(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HelloResponse>>(PrepareAsyncGetHelloSecureRaw(context, request, cq));
    }
    ::grpc::Status PostHelloSecure(::grpc::ClientContext* context, const ::HelloSecure& request, ::HelloResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HelloResponse>> AsyncPostHelloSecure(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HelloResponse>>(AsyncPostHelloSecureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HelloResponse>> PrepareAsyncPostHelloSecure(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HelloResponse>>(PrepareAsyncPostHelloSecureRaw(context, request, cq));
    }
    ::grpc::Status PutHelloSecure(::grpc::ClientContext* context, const ::HelloSecure& request, ::HelloResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HelloResponse>> AsyncPutHelloSecure(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HelloResponse>>(AsyncPutHelloSecureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HelloResponse>> PrepareAsyncPutHelloSecure(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HelloResponse>>(PrepareAsyncPutHelloSecureRaw(context, request, cq));
    }
    ::grpc::Status DeleteHelloSecure(::grpc::ClientContext* context, const ::HelloSecure& request, ::HelloResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HelloResponse>> AsyncDeleteHelloSecure(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HelloResponse>>(AsyncDeleteHelloSecureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HelloResponse>> PrepareAsyncDeleteHelloSecure(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HelloResponse>>(PrepareAsyncDeleteHelloSecureRaw(context, request, cq));
    }
    ::grpc::Status PatchHelloSecure(::grpc::ClientContext* context, const ::HelloSecure& request, ::HelloResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HelloResponse>> AsyncPatchHelloSecure(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HelloResponse>>(AsyncPatchHelloSecureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HelloResponse>> PrepareAsyncPatchHelloSecure(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HelloResponse>>(PrepareAsyncPatchHelloSecureRaw(context, request, cq));
    }
    ::grpc::Status PutRegister(::grpc::ClientContext* context, const ::Register& request, ::RegisterResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RegisterResponse>> AsyncPutRegister(::grpc::ClientContext* context, const ::Register& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RegisterResponse>>(AsyncPutRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RegisterResponse>> PrepareAsyncPutRegister(::grpc::ClientContext* context, const ::Register& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RegisterResponse>>(PrepareAsyncPutRegisterRaw(context, request, cq));
    }
    ::grpc::Status PostRegister(::grpc::ClientContext* context, const ::Register& request, ::RegisterResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RegisterResponse>> AsyncPostRegister(::grpc::ClientContext* context, const ::Register& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RegisterResponse>>(AsyncPostRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RegisterResponse>> PrepareAsyncPostRegister(::grpc::ClientContext* context, const ::Register& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RegisterResponse>>(PrepareAsyncPostRegisterRaw(context, request, cq));
    }
    ::grpc::Status PostResetTodos(::grpc::ClientContext* context, const ::ResetTodos& request, ::EmptyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EmptyResponse>> AsyncPostResetTodos(::grpc::ClientContext* context, const ::ResetTodos& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EmptyResponse>>(AsyncPostResetTodosRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EmptyResponse>> PrepareAsyncPostResetTodos(::grpc::ClientContext* context, const ::ResetTodos& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EmptyResponse>>(PrepareAsyncPostResetTodosRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::FileContent>> ServerStreamFiles(::grpc::ClientContext* context, const ::StreamFiles& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::FileContent>>(ServerStreamFilesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::FileContent>> AsyncServerStreamFiles(::grpc::ClientContext* context, const ::StreamFiles& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::FileContent>>(AsyncServerStreamFilesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::FileContent>> PrepareAsyncServerStreamFiles(::grpc::ClientContext* context, const ::StreamFiles& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::FileContent>>(PrepareAsyncServerStreamFilesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::StreamServerEventsResponse>> ServerStreamServerEvents(::grpc::ClientContext* context, const ::StreamServerEvents& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::StreamServerEventsResponse>>(ServerStreamServerEventsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::StreamServerEventsResponse>> AsyncServerStreamServerEvents(::grpc::ClientContext* context, const ::StreamServerEvents& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::StreamServerEventsResponse>>(AsyncServerStreamServerEventsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::StreamServerEventsResponse>> PrepareAsyncServerStreamServerEvents(::grpc::ClientContext* context, const ::StreamServerEvents& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::StreamServerEventsResponse>>(PrepareAsyncServerStreamServerEventsRaw(context, request, cq));
    }
    ::grpc::Status PostUnAssignRoles(::grpc::ClientContext* context, const ::UnAssignRoles& request, ::UnAssignRolesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::UnAssignRolesResponse>> AsyncPostUnAssignRoles(::grpc::ClientContext* context, const ::UnAssignRoles& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::UnAssignRolesResponse>>(AsyncPostUnAssignRolesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::UnAssignRolesResponse>> PrepareAsyncPostUnAssignRoles(::grpc::ClientContext* context, const ::UnAssignRoles& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::UnAssignRolesResponse>>(PrepareAsyncPostUnAssignRolesRaw(context, request, cq));
    }
    ::grpc::Status PutUpdateTodo(::grpc::ClientContext* context, const ::UpdateTodo& request, ::EmptyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EmptyResponse>> AsyncPutUpdateTodo(::grpc::ClientContext* context, const ::UpdateTodo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EmptyResponse>>(AsyncPutUpdateTodoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EmptyResponse>> PrepareAsyncPutUpdateTodo(::grpc::ClientContext* context, const ::UpdateTodo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EmptyResponse>>(PrepareAsyncPutUpdateTodoRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void PostAssignRoles(::grpc::ClientContext* context, const ::AssignRoles* request, ::AssignRolesResponse* response, std::function<void(::grpc::Status)>) override;
      void PostAssignRoles(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AssignRolesResponse* response, std::function<void(::grpc::Status)>) override;
      void OptionsAuthenticate(::grpc::ClientContext* context, const ::Authenticate* request, ::AuthenticateResponse* response, std::function<void(::grpc::Status)>) override;
      void OptionsAuthenticate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AuthenticateResponse* response, std::function<void(::grpc::Status)>) override;
      void GetAuthenticate(::grpc::ClientContext* context, const ::Authenticate* request, ::AuthenticateResponse* response, std::function<void(::grpc::Status)>) override;
      void GetAuthenticate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AuthenticateResponse* response, std::function<void(::grpc::Status)>) override;
      void PostAuthenticate(::grpc::ClientContext* context, const ::Authenticate* request, ::AuthenticateResponse* response, std::function<void(::grpc::Status)>) override;
      void PostAuthenticate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AuthenticateResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteAuthenticate(::grpc::ClientContext* context, const ::Authenticate* request, ::AuthenticateResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteAuthenticate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AuthenticateResponse* response, std::function<void(::grpc::Status)>) override;
      void PostConvertSessionToToken(::grpc::ClientContext* context, const ::ConvertSessionToToken* request, ::ConvertSessionToTokenResponse* response, std::function<void(::grpc::Status)>) override;
      void PostConvertSessionToToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ConvertSessionToTokenResponse* response, std::function<void(::grpc::Status)>) override;
      void PostCreateTodo(::grpc::ClientContext* context, const ::CreateTodo* request, ::CreateTodoResponse* response, std::function<void(::grpc::Status)>) override;
      void PostCreateTodo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::CreateTodoResponse* response, std::function<void(::grpc::Status)>) override;
      void CallDeleteTodo(::grpc::ClientContext* context, const ::DeleteTodo* request, ::EmptyResponse* response, std::function<void(::grpc::Status)>) override;
      void CallDeleteTodo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::EmptyResponse* response, std::function<void(::grpc::Status)>) override;
      void CallDeleteTodos(::grpc::ClientContext* context, const ::DeleteTodos* request, ::EmptyResponse* response, std::function<void(::grpc::Status)>) override;
      void CallDeleteTodos(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::EmptyResponse* response, std::function<void(::grpc::Status)>) override;
      void PostGetAccessToken(::grpc::ClientContext* context, const ::GetAccessToken* request, ::GetAccessTokenResponse* response, std::function<void(::grpc::Status)>) override;
      void PostGetAccessToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetAccessTokenResponse* response, std::function<void(::grpc::Status)>) override;
      void CallGetTodo(::grpc::ClientContext* context, const ::GetTodo* request, ::GetTodoResponse* response, std::function<void(::grpc::Status)>) override;
      void CallGetTodo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetTodoResponse* response, std::function<void(::grpc::Status)>) override;
      void CallGetTodos(::grpc::ClientContext* context, const ::GetTodos* request, ::GetTodosResponse* response, std::function<void(::grpc::Status)>) override;
      void CallGetTodos(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetTodosResponse* response, std::function<void(::grpc::Status)>) override;
      void GetHello(::grpc::ClientContext* context, const ::Hello* request, ::HelloResponse* response, std::function<void(::grpc::Status)>) override;
      void GetHello(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HelloResponse* response, std::function<void(::grpc::Status)>) override;
      void PostHello(::grpc::ClientContext* context, const ::Hello* request, ::HelloResponse* response, std::function<void(::grpc::Status)>) override;
      void PostHello(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HelloResponse* response, std::function<void(::grpc::Status)>) override;
      void PutHello(::grpc::ClientContext* context, const ::Hello* request, ::HelloResponse* response, std::function<void(::grpc::Status)>) override;
      void PutHello(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HelloResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteHello(::grpc::ClientContext* context, const ::Hello* request, ::HelloResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteHello(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HelloResponse* response, std::function<void(::grpc::Status)>) override;
      void PatchHello(::grpc::ClientContext* context, const ::Hello* request, ::HelloResponse* response, std::function<void(::grpc::Status)>) override;
      void PatchHello(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HelloResponse* response, std::function<void(::grpc::Status)>) override;
      void GetHelloSecure(::grpc::ClientContext* context, const ::HelloSecure* request, ::HelloResponse* response, std::function<void(::grpc::Status)>) override;
      void GetHelloSecure(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HelloResponse* response, std::function<void(::grpc::Status)>) override;
      void PostHelloSecure(::grpc::ClientContext* context, const ::HelloSecure* request, ::HelloResponse* response, std::function<void(::grpc::Status)>) override;
      void PostHelloSecure(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HelloResponse* response, std::function<void(::grpc::Status)>) override;
      void PutHelloSecure(::grpc::ClientContext* context, const ::HelloSecure* request, ::HelloResponse* response, std::function<void(::grpc::Status)>) override;
      void PutHelloSecure(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HelloResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteHelloSecure(::grpc::ClientContext* context, const ::HelloSecure* request, ::HelloResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteHelloSecure(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HelloResponse* response, std::function<void(::grpc::Status)>) override;
      void PatchHelloSecure(::grpc::ClientContext* context, const ::HelloSecure* request, ::HelloResponse* response, std::function<void(::grpc::Status)>) override;
      void PatchHelloSecure(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HelloResponse* response, std::function<void(::grpc::Status)>) override;
      void PutRegister(::grpc::ClientContext* context, const ::Register* request, ::RegisterResponse* response, std::function<void(::grpc::Status)>) override;
      void PutRegister(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::RegisterResponse* response, std::function<void(::grpc::Status)>) override;
      void PostRegister(::grpc::ClientContext* context, const ::Register* request, ::RegisterResponse* response, std::function<void(::grpc::Status)>) override;
      void PostRegister(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::RegisterResponse* response, std::function<void(::grpc::Status)>) override;
      void PostResetTodos(::grpc::ClientContext* context, const ::ResetTodos* request, ::EmptyResponse* response, std::function<void(::grpc::Status)>) override;
      void PostResetTodos(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::EmptyResponse* response, std::function<void(::grpc::Status)>) override;
      void ServerStreamFiles(::grpc::ClientContext* context, ::StreamFiles* request, ::grpc::experimental::ClientReadReactor< ::FileContent>* reactor) override;
      void ServerStreamServerEvents(::grpc::ClientContext* context, ::StreamServerEvents* request, ::grpc::experimental::ClientReadReactor< ::StreamServerEventsResponse>* reactor) override;
      void PostUnAssignRoles(::grpc::ClientContext* context, const ::UnAssignRoles* request, ::UnAssignRolesResponse* response, std::function<void(::grpc::Status)>) override;
      void PostUnAssignRoles(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::UnAssignRolesResponse* response, std::function<void(::grpc::Status)>) override;
      void PutUpdateTodo(::grpc::ClientContext* context, const ::UpdateTodo* request, ::EmptyResponse* response, std::function<void(::grpc::Status)>) override;
      void PutUpdateTodo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::EmptyResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::AssignRolesResponse>* AsyncPostAssignRolesRaw(::grpc::ClientContext* context, const ::AssignRoles& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AssignRolesResponse>* PrepareAsyncPostAssignRolesRaw(::grpc::ClientContext* context, const ::AssignRoles& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AuthenticateResponse>* AsyncOptionsAuthenticateRaw(::grpc::ClientContext* context, const ::Authenticate& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AuthenticateResponse>* PrepareAsyncOptionsAuthenticateRaw(::grpc::ClientContext* context, const ::Authenticate& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AuthenticateResponse>* AsyncGetAuthenticateRaw(::grpc::ClientContext* context, const ::Authenticate& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AuthenticateResponse>* PrepareAsyncGetAuthenticateRaw(::grpc::ClientContext* context, const ::Authenticate& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AuthenticateResponse>* AsyncPostAuthenticateRaw(::grpc::ClientContext* context, const ::Authenticate& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AuthenticateResponse>* PrepareAsyncPostAuthenticateRaw(::grpc::ClientContext* context, const ::Authenticate& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AuthenticateResponse>* AsyncDeleteAuthenticateRaw(::grpc::ClientContext* context, const ::Authenticate& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AuthenticateResponse>* PrepareAsyncDeleteAuthenticateRaw(::grpc::ClientContext* context, const ::Authenticate& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ConvertSessionToTokenResponse>* AsyncPostConvertSessionToTokenRaw(::grpc::ClientContext* context, const ::ConvertSessionToToken& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ConvertSessionToTokenResponse>* PrepareAsyncPostConvertSessionToTokenRaw(::grpc::ClientContext* context, const ::ConvertSessionToToken& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CreateTodoResponse>* AsyncPostCreateTodoRaw(::grpc::ClientContext* context, const ::CreateTodo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CreateTodoResponse>* PrepareAsyncPostCreateTodoRaw(::grpc::ClientContext* context, const ::CreateTodo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::EmptyResponse>* AsyncCallDeleteTodoRaw(::grpc::ClientContext* context, const ::DeleteTodo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::EmptyResponse>* PrepareAsyncCallDeleteTodoRaw(::grpc::ClientContext* context, const ::DeleteTodo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::EmptyResponse>* AsyncCallDeleteTodosRaw(::grpc::ClientContext* context, const ::DeleteTodos& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::EmptyResponse>* PrepareAsyncCallDeleteTodosRaw(::grpc::ClientContext* context, const ::DeleteTodos& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetAccessTokenResponse>* AsyncPostGetAccessTokenRaw(::grpc::ClientContext* context, const ::GetAccessToken& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetAccessTokenResponse>* PrepareAsyncPostGetAccessTokenRaw(::grpc::ClientContext* context, const ::GetAccessToken& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetTodoResponse>* AsyncCallGetTodoRaw(::grpc::ClientContext* context, const ::GetTodo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetTodoResponse>* PrepareAsyncCallGetTodoRaw(::grpc::ClientContext* context, const ::GetTodo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetTodosResponse>* AsyncCallGetTodosRaw(::grpc::ClientContext* context, const ::GetTodos& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetTodosResponse>* PrepareAsyncCallGetTodosRaw(::grpc::ClientContext* context, const ::GetTodos& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HelloResponse>* AsyncGetHelloRaw(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HelloResponse>* PrepareAsyncGetHelloRaw(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HelloResponse>* AsyncPostHelloRaw(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HelloResponse>* PrepareAsyncPostHelloRaw(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HelloResponse>* AsyncPutHelloRaw(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HelloResponse>* PrepareAsyncPutHelloRaw(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HelloResponse>* AsyncDeleteHelloRaw(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HelloResponse>* PrepareAsyncDeleteHelloRaw(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HelloResponse>* AsyncPatchHelloRaw(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HelloResponse>* PrepareAsyncPatchHelloRaw(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HelloResponse>* AsyncGetHelloSecureRaw(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HelloResponse>* PrepareAsyncGetHelloSecureRaw(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HelloResponse>* AsyncPostHelloSecureRaw(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HelloResponse>* PrepareAsyncPostHelloSecureRaw(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HelloResponse>* AsyncPutHelloSecureRaw(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HelloResponse>* PrepareAsyncPutHelloSecureRaw(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HelloResponse>* AsyncDeleteHelloSecureRaw(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HelloResponse>* PrepareAsyncDeleteHelloSecureRaw(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HelloResponse>* AsyncPatchHelloSecureRaw(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HelloResponse>* PrepareAsyncPatchHelloSecureRaw(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RegisterResponse>* AsyncPutRegisterRaw(::grpc::ClientContext* context, const ::Register& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RegisterResponse>* PrepareAsyncPutRegisterRaw(::grpc::ClientContext* context, const ::Register& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RegisterResponse>* AsyncPostRegisterRaw(::grpc::ClientContext* context, const ::Register& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RegisterResponse>* PrepareAsyncPostRegisterRaw(::grpc::ClientContext* context, const ::Register& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::EmptyResponse>* AsyncPostResetTodosRaw(::grpc::ClientContext* context, const ::ResetTodos& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::EmptyResponse>* PrepareAsyncPostResetTodosRaw(::grpc::ClientContext* context, const ::ResetTodos& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::FileContent>* ServerStreamFilesRaw(::grpc::ClientContext* context, const ::StreamFiles& request) override;
    ::grpc::ClientAsyncReader< ::FileContent>* AsyncServerStreamFilesRaw(::grpc::ClientContext* context, const ::StreamFiles& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::FileContent>* PrepareAsyncServerStreamFilesRaw(::grpc::ClientContext* context, const ::StreamFiles& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::StreamServerEventsResponse>* ServerStreamServerEventsRaw(::grpc::ClientContext* context, const ::StreamServerEvents& request) override;
    ::grpc::ClientAsyncReader< ::StreamServerEventsResponse>* AsyncServerStreamServerEventsRaw(::grpc::ClientContext* context, const ::StreamServerEvents& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::StreamServerEventsResponse>* PrepareAsyncServerStreamServerEventsRaw(::grpc::ClientContext* context, const ::StreamServerEvents& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::UnAssignRolesResponse>* AsyncPostUnAssignRolesRaw(::grpc::ClientContext* context, const ::UnAssignRoles& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::UnAssignRolesResponse>* PrepareAsyncPostUnAssignRolesRaw(::grpc::ClientContext* context, const ::UnAssignRoles& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::EmptyResponse>* AsyncPutUpdateTodoRaw(::grpc::ClientContext* context, const ::UpdateTodo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::EmptyResponse>* PrepareAsyncPutUpdateTodoRaw(::grpc::ClientContext* context, const ::UpdateTodo& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_PostAssignRoles_;
    const ::grpc::internal::RpcMethod rpcmethod_OptionsAuthenticate_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAuthenticate_;
    const ::grpc::internal::RpcMethod rpcmethod_PostAuthenticate_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteAuthenticate_;
    const ::grpc::internal::RpcMethod rpcmethod_PostConvertSessionToToken_;
    const ::grpc::internal::RpcMethod rpcmethod_PostCreateTodo_;
    const ::grpc::internal::RpcMethod rpcmethod_CallDeleteTodo_;
    const ::grpc::internal::RpcMethod rpcmethod_CallDeleteTodos_;
    const ::grpc::internal::RpcMethod rpcmethod_PostGetAccessToken_;
    const ::grpc::internal::RpcMethod rpcmethod_CallGetTodo_;
    const ::grpc::internal::RpcMethod rpcmethod_CallGetTodos_;
    const ::grpc::internal::RpcMethod rpcmethod_GetHello_;
    const ::grpc::internal::RpcMethod rpcmethod_PostHello_;
    const ::grpc::internal::RpcMethod rpcmethod_PutHello_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteHello_;
    const ::grpc::internal::RpcMethod rpcmethod_PatchHello_;
    const ::grpc::internal::RpcMethod rpcmethod_GetHelloSecure_;
    const ::grpc::internal::RpcMethod rpcmethod_PostHelloSecure_;
    const ::grpc::internal::RpcMethod rpcmethod_PutHelloSecure_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteHelloSecure_;
    const ::grpc::internal::RpcMethod rpcmethod_PatchHelloSecure_;
    const ::grpc::internal::RpcMethod rpcmethod_PutRegister_;
    const ::grpc::internal::RpcMethod rpcmethod_PostRegister_;
    const ::grpc::internal::RpcMethod rpcmethod_PostResetTodos_;
    const ::grpc::internal::RpcMethod rpcmethod_ServerStreamFiles_;
    const ::grpc::internal::RpcMethod rpcmethod_ServerStreamServerEvents_;
    const ::grpc::internal::RpcMethod rpcmethod_PostUnAssignRoles_;
    const ::grpc::internal::RpcMethod rpcmethod_PutUpdateTodo_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status PostAssignRoles(::grpc::ServerContext* context, const ::AssignRoles* request, ::AssignRolesResponse* response);
    virtual ::grpc::Status OptionsAuthenticate(::grpc::ServerContext* context, const ::Authenticate* request, ::AuthenticateResponse* response);
    virtual ::grpc::Status GetAuthenticate(::grpc::ServerContext* context, const ::Authenticate* request, ::AuthenticateResponse* response);
    virtual ::grpc::Status PostAuthenticate(::grpc::ServerContext* context, const ::Authenticate* request, ::AuthenticateResponse* response);
    virtual ::grpc::Status DeleteAuthenticate(::grpc::ServerContext* context, const ::Authenticate* request, ::AuthenticateResponse* response);
    virtual ::grpc::Status PostConvertSessionToToken(::grpc::ServerContext* context, const ::ConvertSessionToToken* request, ::ConvertSessionToTokenResponse* response);
    virtual ::grpc::Status PostCreateTodo(::grpc::ServerContext* context, const ::CreateTodo* request, ::CreateTodoResponse* response);
    virtual ::grpc::Status CallDeleteTodo(::grpc::ServerContext* context, const ::DeleteTodo* request, ::EmptyResponse* response);
    virtual ::grpc::Status CallDeleteTodos(::grpc::ServerContext* context, const ::DeleteTodos* request, ::EmptyResponse* response);
    virtual ::grpc::Status PostGetAccessToken(::grpc::ServerContext* context, const ::GetAccessToken* request, ::GetAccessTokenResponse* response);
    virtual ::grpc::Status CallGetTodo(::grpc::ServerContext* context, const ::GetTodo* request, ::GetTodoResponse* response);
    virtual ::grpc::Status CallGetTodos(::grpc::ServerContext* context, const ::GetTodos* request, ::GetTodosResponse* response);
    virtual ::grpc::Status GetHello(::grpc::ServerContext* context, const ::Hello* request, ::HelloResponse* response);
    virtual ::grpc::Status PostHello(::grpc::ServerContext* context, const ::Hello* request, ::HelloResponse* response);
    virtual ::grpc::Status PutHello(::grpc::ServerContext* context, const ::Hello* request, ::HelloResponse* response);
    virtual ::grpc::Status DeleteHello(::grpc::ServerContext* context, const ::Hello* request, ::HelloResponse* response);
    virtual ::grpc::Status PatchHello(::grpc::ServerContext* context, const ::Hello* request, ::HelloResponse* response);
    virtual ::grpc::Status GetHelloSecure(::grpc::ServerContext* context, const ::HelloSecure* request, ::HelloResponse* response);
    virtual ::grpc::Status PostHelloSecure(::grpc::ServerContext* context, const ::HelloSecure* request, ::HelloResponse* response);
    virtual ::grpc::Status PutHelloSecure(::grpc::ServerContext* context, const ::HelloSecure* request, ::HelloResponse* response);
    virtual ::grpc::Status DeleteHelloSecure(::grpc::ServerContext* context, const ::HelloSecure* request, ::HelloResponse* response);
    virtual ::grpc::Status PatchHelloSecure(::grpc::ServerContext* context, const ::HelloSecure* request, ::HelloResponse* response);
    virtual ::grpc::Status PutRegister(::grpc::ServerContext* context, const ::Register* request, ::RegisterResponse* response);
    virtual ::grpc::Status PostRegister(::grpc::ServerContext* context, const ::Register* request, ::RegisterResponse* response);
    virtual ::grpc::Status PostResetTodos(::grpc::ServerContext* context, const ::ResetTodos* request, ::EmptyResponse* response);
    virtual ::grpc::Status ServerStreamFiles(::grpc::ServerContext* context, const ::StreamFiles* request, ::grpc::ServerWriter< ::FileContent>* writer);
    virtual ::grpc::Status ServerStreamServerEvents(::grpc::ServerContext* context, const ::StreamServerEvents* request, ::grpc::ServerWriter< ::StreamServerEventsResponse>* writer);
    virtual ::grpc::Status PostUnAssignRoles(::grpc::ServerContext* context, const ::UnAssignRoles* request, ::UnAssignRolesResponse* response);
    virtual ::grpc::Status PutUpdateTodo(::grpc::ServerContext* context, const ::UpdateTodo* request, ::EmptyResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_PostAssignRoles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PostAssignRoles() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_PostAssignRoles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostAssignRoles(::grpc::ServerContext* context, const ::AssignRoles* request, ::AssignRolesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostAssignRoles(::grpc::ServerContext* context, ::AssignRoles* request, ::grpc::ServerAsyncResponseWriter< ::AssignRolesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OptionsAuthenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_OptionsAuthenticate() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_OptionsAuthenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OptionsAuthenticate(::grpc::ServerContext* context, const ::Authenticate* request, ::AuthenticateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOptionsAuthenticate(::grpc::ServerContext* context, ::Authenticate* request, ::grpc::ServerAsyncResponseWriter< ::AuthenticateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAuthenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetAuthenticate() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetAuthenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAuthenticate(::grpc::ServerContext* context, const ::Authenticate* request, ::AuthenticateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAuthenticate(::grpc::ServerContext* context, ::Authenticate* request, ::grpc::ServerAsyncResponseWriter< ::AuthenticateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostAuthenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PostAuthenticate() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_PostAuthenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostAuthenticate(::grpc::ServerContext* context, const ::Authenticate* request, ::AuthenticateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostAuthenticate(::grpc::ServerContext* context, ::Authenticate* request, ::grpc::ServerAsyncResponseWriter< ::AuthenticateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteAuthenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteAuthenticate() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeleteAuthenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAuthenticate(::grpc::ServerContext* context, const ::Authenticate* request, ::AuthenticateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteAuthenticate(::grpc::ServerContext* context, ::Authenticate* request, ::grpc::ServerAsyncResponseWriter< ::AuthenticateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostConvertSessionToToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PostConvertSessionToToken() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_PostConvertSessionToToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostConvertSessionToToken(::grpc::ServerContext* context, const ::ConvertSessionToToken* request, ::ConvertSessionToTokenResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostConvertSessionToToken(::grpc::ServerContext* context, ::ConvertSessionToToken* request, ::grpc::ServerAsyncResponseWriter< ::ConvertSessionToTokenResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostCreateTodo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PostCreateTodo() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_PostCreateTodo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostCreateTodo(::grpc::ServerContext* context, const ::CreateTodo* request, ::CreateTodoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostCreateTodo(::grpc::ServerContext* context, ::CreateTodo* request, ::grpc::ServerAsyncResponseWriter< ::CreateTodoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CallDeleteTodo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CallDeleteTodo() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_CallDeleteTodo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallDeleteTodo(::grpc::ServerContext* context, const ::DeleteTodo* request, ::EmptyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCallDeleteTodo(::grpc::ServerContext* context, ::DeleteTodo* request, ::grpc::ServerAsyncResponseWriter< ::EmptyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CallDeleteTodos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CallDeleteTodos() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_CallDeleteTodos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallDeleteTodos(::grpc::ServerContext* context, const ::DeleteTodos* request, ::EmptyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCallDeleteTodos(::grpc::ServerContext* context, ::DeleteTodos* request, ::grpc::ServerAsyncResponseWriter< ::EmptyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostGetAccessToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PostGetAccessToken() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_PostGetAccessToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostGetAccessToken(::grpc::ServerContext* context, const ::GetAccessToken* request, ::GetAccessTokenResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostGetAccessToken(::grpc::ServerContext* context, ::GetAccessToken* request, ::grpc::ServerAsyncResponseWriter< ::GetAccessTokenResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CallGetTodo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CallGetTodo() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_CallGetTodo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallGetTodo(::grpc::ServerContext* context, const ::GetTodo* request, ::GetTodoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCallGetTodo(::grpc::ServerContext* context, ::GetTodo* request, ::grpc::ServerAsyncResponseWriter< ::GetTodoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CallGetTodos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CallGetTodos() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_CallGetTodos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallGetTodos(::grpc::ServerContext* context, const ::GetTodos* request, ::GetTodosResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCallGetTodos(::grpc::ServerContext* context, ::GetTodos* request, ::grpc::ServerAsyncResponseWriter< ::GetTodosResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetHello() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_GetHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHello(::grpc::ServerContext* context, const ::Hello* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetHello(::grpc::ServerContext* context, ::Hello* request, ::grpc::ServerAsyncResponseWriter< ::HelloResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PostHello() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_PostHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostHello(::grpc::ServerContext* context, const ::Hello* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostHello(::grpc::ServerContext* context, ::Hello* request, ::grpc::ServerAsyncResponseWriter< ::HelloResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PutHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PutHello() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_PutHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutHello(::grpc::ServerContext* context, const ::Hello* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutHello(::grpc::ServerContext* context, ::Hello* request, ::grpc::ServerAsyncResponseWriter< ::HelloResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteHello() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_DeleteHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteHello(::grpc::ServerContext* context, const ::Hello* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteHello(::grpc::ServerContext* context, ::Hello* request, ::grpc::ServerAsyncResponseWriter< ::HelloResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PatchHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PatchHello() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_PatchHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchHello(::grpc::ServerContext* context, const ::Hello* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchHello(::grpc::ServerContext* context, ::Hello* request, ::grpc::ServerAsyncResponseWriter< ::HelloResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetHelloSecure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetHelloSecure() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_GetHelloSecure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHelloSecure(::grpc::ServerContext* context, const ::HelloSecure* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetHelloSecure(::grpc::ServerContext* context, ::HelloSecure* request, ::grpc::ServerAsyncResponseWriter< ::HelloResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostHelloSecure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PostHelloSecure() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_PostHelloSecure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostHelloSecure(::grpc::ServerContext* context, const ::HelloSecure* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostHelloSecure(::grpc::ServerContext* context, ::HelloSecure* request, ::grpc::ServerAsyncResponseWriter< ::HelloResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PutHelloSecure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PutHelloSecure() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_PutHelloSecure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutHelloSecure(::grpc::ServerContext* context, const ::HelloSecure* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutHelloSecure(::grpc::ServerContext* context, ::HelloSecure* request, ::grpc::ServerAsyncResponseWriter< ::HelloResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteHelloSecure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteHelloSecure() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_DeleteHelloSecure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteHelloSecure(::grpc::ServerContext* context, const ::HelloSecure* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteHelloSecure(::grpc::ServerContext* context, ::HelloSecure* request, ::grpc::ServerAsyncResponseWriter< ::HelloResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PatchHelloSecure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PatchHelloSecure() {
      ::grpc::Service::MarkMethodAsync(21);
    }
    ~WithAsyncMethod_PatchHelloSecure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchHelloSecure(::grpc::ServerContext* context, const ::HelloSecure* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchHelloSecure(::grpc::ServerContext* context, ::HelloSecure* request, ::grpc::ServerAsyncResponseWriter< ::HelloResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PutRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PutRegister() {
      ::grpc::Service::MarkMethodAsync(22);
    }
    ~WithAsyncMethod_PutRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutRegister(::grpc::ServerContext* context, const ::Register* request, ::RegisterResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutRegister(::grpc::ServerContext* context, ::Register* request, ::grpc::ServerAsyncResponseWriter< ::RegisterResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PostRegister() {
      ::grpc::Service::MarkMethodAsync(23);
    }
    ~WithAsyncMethod_PostRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostRegister(::grpc::ServerContext* context, const ::Register* request, ::RegisterResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostRegister(::grpc::ServerContext* context, ::Register* request, ::grpc::ServerAsyncResponseWriter< ::RegisterResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostResetTodos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PostResetTodos() {
      ::grpc::Service::MarkMethodAsync(24);
    }
    ~WithAsyncMethod_PostResetTodos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostResetTodos(::grpc::ServerContext* context, const ::ResetTodos* request, ::EmptyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostResetTodos(::grpc::ServerContext* context, ::ResetTodos* request, ::grpc::ServerAsyncResponseWriter< ::EmptyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ServerStreamFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ServerStreamFiles() {
      ::grpc::Service::MarkMethodAsync(25);
    }
    ~WithAsyncMethod_ServerStreamFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStreamFiles(::grpc::ServerContext* context, const ::StreamFiles* request, ::grpc::ServerWriter< ::FileContent>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerStreamFiles(::grpc::ServerContext* context, ::StreamFiles* request, ::grpc::ServerAsyncWriter< ::FileContent>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(25, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ServerStreamServerEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ServerStreamServerEvents() {
      ::grpc::Service::MarkMethodAsync(26);
    }
    ~WithAsyncMethod_ServerStreamServerEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStreamServerEvents(::grpc::ServerContext* context, const ::StreamServerEvents* request, ::grpc::ServerWriter< ::StreamServerEventsResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerStreamServerEvents(::grpc::ServerContext* context, ::StreamServerEvents* request, ::grpc::ServerAsyncWriter< ::StreamServerEventsResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(26, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostUnAssignRoles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PostUnAssignRoles() {
      ::grpc::Service::MarkMethodAsync(27);
    }
    ~WithAsyncMethod_PostUnAssignRoles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostUnAssignRoles(::grpc::ServerContext* context, const ::UnAssignRoles* request, ::UnAssignRolesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostUnAssignRoles(::grpc::ServerContext* context, ::UnAssignRoles* request, ::grpc::ServerAsyncResponseWriter< ::UnAssignRolesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PutUpdateTodo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PutUpdateTodo() {
      ::grpc::Service::MarkMethodAsync(28);
    }
    ~WithAsyncMethod_PutUpdateTodo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutUpdateTodo(::grpc::ServerContext* context, const ::UpdateTodo* request, ::EmptyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutUpdateTodo(::grpc::ServerContext* context, ::UpdateTodo* request, ::grpc::ServerAsyncResponseWriter< ::EmptyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(28, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_PostAssignRoles<WithAsyncMethod_OptionsAuthenticate<WithAsyncMethod_GetAuthenticate<WithAsyncMethod_PostAuthenticate<WithAsyncMethod_DeleteAuthenticate<WithAsyncMethod_PostConvertSessionToToken<WithAsyncMethod_PostCreateTodo<WithAsyncMethod_CallDeleteTodo<WithAsyncMethod_CallDeleteTodos<WithAsyncMethod_PostGetAccessToken<WithAsyncMethod_CallGetTodo<WithAsyncMethod_CallGetTodos<WithAsyncMethod_GetHello<WithAsyncMethod_PostHello<WithAsyncMethod_PutHello<WithAsyncMethod_DeleteHello<WithAsyncMethod_PatchHello<WithAsyncMethod_GetHelloSecure<WithAsyncMethod_PostHelloSecure<WithAsyncMethod_PutHelloSecure<WithAsyncMethod_DeleteHelloSecure<WithAsyncMethod_PatchHelloSecure<WithAsyncMethod_PutRegister<WithAsyncMethod_PostRegister<WithAsyncMethod_PostResetTodos<WithAsyncMethod_ServerStreamFiles<WithAsyncMethod_ServerStreamServerEvents<WithAsyncMethod_PostUnAssignRoles<WithAsyncMethod_PutUpdateTodo<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PostAssignRoles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_PostAssignRoles() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::AssignRoles, ::AssignRolesResponse>(
          [this](::grpc::ServerContext* context,
                 const ::AssignRoles* request,
                 ::AssignRolesResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->PostAssignRoles(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_PostAssignRoles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostAssignRoles(::grpc::ServerContext* context, const ::AssignRoles* request, ::AssignRolesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PostAssignRoles(::grpc::ServerContext* context, const ::AssignRoles* request, ::AssignRolesResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_OptionsAuthenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_OptionsAuthenticate() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::Authenticate, ::AuthenticateResponse>(
          [this](::grpc::ServerContext* context,
                 const ::Authenticate* request,
                 ::AuthenticateResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->OptionsAuthenticate(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_OptionsAuthenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OptionsAuthenticate(::grpc::ServerContext* context, const ::Authenticate* request, ::AuthenticateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void OptionsAuthenticate(::grpc::ServerContext* context, const ::Authenticate* request, ::AuthenticateResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetAuthenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetAuthenticate() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::Authenticate, ::AuthenticateResponse>(
          [this](::grpc::ServerContext* context,
                 const ::Authenticate* request,
                 ::AuthenticateResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetAuthenticate(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetAuthenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAuthenticate(::grpc::ServerContext* context, const ::Authenticate* request, ::AuthenticateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetAuthenticate(::grpc::ServerContext* context, const ::Authenticate* request, ::AuthenticateResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PostAuthenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_PostAuthenticate() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::Authenticate, ::AuthenticateResponse>(
          [this](::grpc::ServerContext* context,
                 const ::Authenticate* request,
                 ::AuthenticateResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->PostAuthenticate(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_PostAuthenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostAuthenticate(::grpc::ServerContext* context, const ::Authenticate* request, ::AuthenticateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PostAuthenticate(::grpc::ServerContext* context, const ::Authenticate* request, ::AuthenticateResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteAuthenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_DeleteAuthenticate() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::Authenticate, ::AuthenticateResponse>(
          [this](::grpc::ServerContext* context,
                 const ::Authenticate* request,
                 ::AuthenticateResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->DeleteAuthenticate(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_DeleteAuthenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAuthenticate(::grpc::ServerContext* context, const ::Authenticate* request, ::AuthenticateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DeleteAuthenticate(::grpc::ServerContext* context, const ::Authenticate* request, ::AuthenticateResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PostConvertSessionToToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_PostConvertSessionToToken() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::ConvertSessionToToken, ::ConvertSessionToTokenResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ConvertSessionToToken* request,
                 ::ConvertSessionToTokenResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->PostConvertSessionToToken(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_PostConvertSessionToToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostConvertSessionToToken(::grpc::ServerContext* context, const ::ConvertSessionToToken* request, ::ConvertSessionToTokenResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PostConvertSessionToToken(::grpc::ServerContext* context, const ::ConvertSessionToToken* request, ::ConvertSessionToTokenResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PostCreateTodo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_PostCreateTodo() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::CreateTodo, ::CreateTodoResponse>(
          [this](::grpc::ServerContext* context,
                 const ::CreateTodo* request,
                 ::CreateTodoResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->PostCreateTodo(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_PostCreateTodo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostCreateTodo(::grpc::ServerContext* context, const ::CreateTodo* request, ::CreateTodoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PostCreateTodo(::grpc::ServerContext* context, const ::CreateTodo* request, ::CreateTodoResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CallDeleteTodo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CallDeleteTodo() {
      ::grpc::Service::experimental().MarkMethodCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::DeleteTodo, ::EmptyResponse>(
          [this](::grpc::ServerContext* context,
                 const ::DeleteTodo* request,
                 ::EmptyResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CallDeleteTodo(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_CallDeleteTodo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallDeleteTodo(::grpc::ServerContext* context, const ::DeleteTodo* request, ::EmptyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CallDeleteTodo(::grpc::ServerContext* context, const ::DeleteTodo* request, ::EmptyResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CallDeleteTodos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CallDeleteTodos() {
      ::grpc::Service::experimental().MarkMethodCallback(8,
        new ::grpc::internal::CallbackUnaryHandler< ::DeleteTodos, ::EmptyResponse>(
          [this](::grpc::ServerContext* context,
                 const ::DeleteTodos* request,
                 ::EmptyResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CallDeleteTodos(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_CallDeleteTodos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallDeleteTodos(::grpc::ServerContext* context, const ::DeleteTodos* request, ::EmptyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CallDeleteTodos(::grpc::ServerContext* context, const ::DeleteTodos* request, ::EmptyResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PostGetAccessToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_PostGetAccessToken() {
      ::grpc::Service::experimental().MarkMethodCallback(9,
        new ::grpc::internal::CallbackUnaryHandler< ::GetAccessToken, ::GetAccessTokenResponse>(
          [this](::grpc::ServerContext* context,
                 const ::GetAccessToken* request,
                 ::GetAccessTokenResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->PostGetAccessToken(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_PostGetAccessToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostGetAccessToken(::grpc::ServerContext* context, const ::GetAccessToken* request, ::GetAccessTokenResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PostGetAccessToken(::grpc::ServerContext* context, const ::GetAccessToken* request, ::GetAccessTokenResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CallGetTodo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CallGetTodo() {
      ::grpc::Service::experimental().MarkMethodCallback(10,
        new ::grpc::internal::CallbackUnaryHandler< ::GetTodo, ::GetTodoResponse>(
          [this](::grpc::ServerContext* context,
                 const ::GetTodo* request,
                 ::GetTodoResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CallGetTodo(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_CallGetTodo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallGetTodo(::grpc::ServerContext* context, const ::GetTodo* request, ::GetTodoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CallGetTodo(::grpc::ServerContext* context, const ::GetTodo* request, ::GetTodoResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CallGetTodos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CallGetTodos() {
      ::grpc::Service::experimental().MarkMethodCallback(11,
        new ::grpc::internal::CallbackUnaryHandler< ::GetTodos, ::GetTodosResponse>(
          [this](::grpc::ServerContext* context,
                 const ::GetTodos* request,
                 ::GetTodosResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CallGetTodos(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_CallGetTodos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallGetTodos(::grpc::ServerContext* context, const ::GetTodos* request, ::GetTodosResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CallGetTodos(::grpc::ServerContext* context, const ::GetTodos* request, ::GetTodosResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetHello() {
      ::grpc::Service::experimental().MarkMethodCallback(12,
        new ::grpc::internal::CallbackUnaryHandler< ::Hello, ::HelloResponse>(
          [this](::grpc::ServerContext* context,
                 const ::Hello* request,
                 ::HelloResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetHello(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHello(::grpc::ServerContext* context, const ::Hello* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetHello(::grpc::ServerContext* context, const ::Hello* request, ::HelloResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PostHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_PostHello() {
      ::grpc::Service::experimental().MarkMethodCallback(13,
        new ::grpc::internal::CallbackUnaryHandler< ::Hello, ::HelloResponse>(
          [this](::grpc::ServerContext* context,
                 const ::Hello* request,
                 ::HelloResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->PostHello(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_PostHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostHello(::grpc::ServerContext* context, const ::Hello* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PostHello(::grpc::ServerContext* context, const ::Hello* request, ::HelloResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PutHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_PutHello() {
      ::grpc::Service::experimental().MarkMethodCallback(14,
        new ::grpc::internal::CallbackUnaryHandler< ::Hello, ::HelloResponse>(
          [this](::grpc::ServerContext* context,
                 const ::Hello* request,
                 ::HelloResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->PutHello(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_PutHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutHello(::grpc::ServerContext* context, const ::Hello* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PutHello(::grpc::ServerContext* context, const ::Hello* request, ::HelloResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_DeleteHello() {
      ::grpc::Service::experimental().MarkMethodCallback(15,
        new ::grpc::internal::CallbackUnaryHandler< ::Hello, ::HelloResponse>(
          [this](::grpc::ServerContext* context,
                 const ::Hello* request,
                 ::HelloResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->DeleteHello(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_DeleteHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteHello(::grpc::ServerContext* context, const ::Hello* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DeleteHello(::grpc::ServerContext* context, const ::Hello* request, ::HelloResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PatchHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_PatchHello() {
      ::grpc::Service::experimental().MarkMethodCallback(16,
        new ::grpc::internal::CallbackUnaryHandler< ::Hello, ::HelloResponse>(
          [this](::grpc::ServerContext* context,
                 const ::Hello* request,
                 ::HelloResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->PatchHello(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_PatchHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchHello(::grpc::ServerContext* context, const ::Hello* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PatchHello(::grpc::ServerContext* context, const ::Hello* request, ::HelloResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetHelloSecure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetHelloSecure() {
      ::grpc::Service::experimental().MarkMethodCallback(17,
        new ::grpc::internal::CallbackUnaryHandler< ::HelloSecure, ::HelloResponse>(
          [this](::grpc::ServerContext* context,
                 const ::HelloSecure* request,
                 ::HelloResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetHelloSecure(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetHelloSecure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHelloSecure(::grpc::ServerContext* context, const ::HelloSecure* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetHelloSecure(::grpc::ServerContext* context, const ::HelloSecure* request, ::HelloResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PostHelloSecure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_PostHelloSecure() {
      ::grpc::Service::experimental().MarkMethodCallback(18,
        new ::grpc::internal::CallbackUnaryHandler< ::HelloSecure, ::HelloResponse>(
          [this](::grpc::ServerContext* context,
                 const ::HelloSecure* request,
                 ::HelloResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->PostHelloSecure(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_PostHelloSecure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostHelloSecure(::grpc::ServerContext* context, const ::HelloSecure* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PostHelloSecure(::grpc::ServerContext* context, const ::HelloSecure* request, ::HelloResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PutHelloSecure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_PutHelloSecure() {
      ::grpc::Service::experimental().MarkMethodCallback(19,
        new ::grpc::internal::CallbackUnaryHandler< ::HelloSecure, ::HelloResponse>(
          [this](::grpc::ServerContext* context,
                 const ::HelloSecure* request,
                 ::HelloResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->PutHelloSecure(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_PutHelloSecure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutHelloSecure(::grpc::ServerContext* context, const ::HelloSecure* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PutHelloSecure(::grpc::ServerContext* context, const ::HelloSecure* request, ::HelloResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteHelloSecure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_DeleteHelloSecure() {
      ::grpc::Service::experimental().MarkMethodCallback(20,
        new ::grpc::internal::CallbackUnaryHandler< ::HelloSecure, ::HelloResponse>(
          [this](::grpc::ServerContext* context,
                 const ::HelloSecure* request,
                 ::HelloResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->DeleteHelloSecure(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_DeleteHelloSecure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteHelloSecure(::grpc::ServerContext* context, const ::HelloSecure* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DeleteHelloSecure(::grpc::ServerContext* context, const ::HelloSecure* request, ::HelloResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PatchHelloSecure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_PatchHelloSecure() {
      ::grpc::Service::experimental().MarkMethodCallback(21,
        new ::grpc::internal::CallbackUnaryHandler< ::HelloSecure, ::HelloResponse>(
          [this](::grpc::ServerContext* context,
                 const ::HelloSecure* request,
                 ::HelloResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->PatchHelloSecure(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_PatchHelloSecure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchHelloSecure(::grpc::ServerContext* context, const ::HelloSecure* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PatchHelloSecure(::grpc::ServerContext* context, const ::HelloSecure* request, ::HelloResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PutRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_PutRegister() {
      ::grpc::Service::experimental().MarkMethodCallback(22,
        new ::grpc::internal::CallbackUnaryHandler< ::Register, ::RegisterResponse>(
          [this](::grpc::ServerContext* context,
                 const ::Register* request,
                 ::RegisterResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->PutRegister(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_PutRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutRegister(::grpc::ServerContext* context, const ::Register* request, ::RegisterResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PutRegister(::grpc::ServerContext* context, const ::Register* request, ::RegisterResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PostRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_PostRegister() {
      ::grpc::Service::experimental().MarkMethodCallback(23,
        new ::grpc::internal::CallbackUnaryHandler< ::Register, ::RegisterResponse>(
          [this](::grpc::ServerContext* context,
                 const ::Register* request,
                 ::RegisterResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->PostRegister(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_PostRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostRegister(::grpc::ServerContext* context, const ::Register* request, ::RegisterResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PostRegister(::grpc::ServerContext* context, const ::Register* request, ::RegisterResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PostResetTodos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_PostResetTodos() {
      ::grpc::Service::experimental().MarkMethodCallback(24,
        new ::grpc::internal::CallbackUnaryHandler< ::ResetTodos, ::EmptyResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ResetTodos* request,
                 ::EmptyResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->PostResetTodos(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_PostResetTodos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostResetTodos(::grpc::ServerContext* context, const ::ResetTodos* request, ::EmptyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PostResetTodos(::grpc::ServerContext* context, const ::ResetTodos* request, ::EmptyResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ServerStreamFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ServerStreamFiles() {
      ::grpc::Service::experimental().MarkMethodCallback(25,
        new ::grpc::internal::CallbackServerStreamingHandler< ::StreamFiles, ::FileContent>(
          [this] { return this->ServerStreamFiles(); }));
    }
    ~ExperimentalWithCallbackMethod_ServerStreamFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStreamFiles(::grpc::ServerContext* context, const ::StreamFiles* request, ::grpc::ServerWriter< ::FileContent>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::StreamFiles, ::FileContent>* ServerStreamFiles() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::StreamFiles, ::FileContent>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ServerStreamServerEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ServerStreamServerEvents() {
      ::grpc::Service::experimental().MarkMethodCallback(26,
        new ::grpc::internal::CallbackServerStreamingHandler< ::StreamServerEvents, ::StreamServerEventsResponse>(
          [this] { return this->ServerStreamServerEvents(); }));
    }
    ~ExperimentalWithCallbackMethod_ServerStreamServerEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStreamServerEvents(::grpc::ServerContext* context, const ::StreamServerEvents* request, ::grpc::ServerWriter< ::StreamServerEventsResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::StreamServerEvents, ::StreamServerEventsResponse>* ServerStreamServerEvents() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::StreamServerEvents, ::StreamServerEventsResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PostUnAssignRoles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_PostUnAssignRoles() {
      ::grpc::Service::experimental().MarkMethodCallback(27,
        new ::grpc::internal::CallbackUnaryHandler< ::UnAssignRoles, ::UnAssignRolesResponse>(
          [this](::grpc::ServerContext* context,
                 const ::UnAssignRoles* request,
                 ::UnAssignRolesResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->PostUnAssignRoles(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_PostUnAssignRoles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostUnAssignRoles(::grpc::ServerContext* context, const ::UnAssignRoles* request, ::UnAssignRolesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PostUnAssignRoles(::grpc::ServerContext* context, const ::UnAssignRoles* request, ::UnAssignRolesResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PutUpdateTodo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_PutUpdateTodo() {
      ::grpc::Service::experimental().MarkMethodCallback(28,
        new ::grpc::internal::CallbackUnaryHandler< ::UpdateTodo, ::EmptyResponse>(
          [this](::grpc::ServerContext* context,
                 const ::UpdateTodo* request,
                 ::EmptyResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->PutUpdateTodo(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_PutUpdateTodo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutUpdateTodo(::grpc::ServerContext* context, const ::UpdateTodo* request, ::EmptyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PutUpdateTodo(::grpc::ServerContext* context, const ::UpdateTodo* request, ::EmptyResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_PostAssignRoles<ExperimentalWithCallbackMethod_OptionsAuthenticate<ExperimentalWithCallbackMethod_GetAuthenticate<ExperimentalWithCallbackMethod_PostAuthenticate<ExperimentalWithCallbackMethod_DeleteAuthenticate<ExperimentalWithCallbackMethod_PostConvertSessionToToken<ExperimentalWithCallbackMethod_PostCreateTodo<ExperimentalWithCallbackMethod_CallDeleteTodo<ExperimentalWithCallbackMethod_CallDeleteTodos<ExperimentalWithCallbackMethod_PostGetAccessToken<ExperimentalWithCallbackMethod_CallGetTodo<ExperimentalWithCallbackMethod_CallGetTodos<ExperimentalWithCallbackMethod_GetHello<ExperimentalWithCallbackMethod_PostHello<ExperimentalWithCallbackMethod_PutHello<ExperimentalWithCallbackMethod_DeleteHello<ExperimentalWithCallbackMethod_PatchHello<ExperimentalWithCallbackMethod_GetHelloSecure<ExperimentalWithCallbackMethod_PostHelloSecure<ExperimentalWithCallbackMethod_PutHelloSecure<ExperimentalWithCallbackMethod_DeleteHelloSecure<ExperimentalWithCallbackMethod_PatchHelloSecure<ExperimentalWithCallbackMethod_PutRegister<ExperimentalWithCallbackMethod_PostRegister<ExperimentalWithCallbackMethod_PostResetTodos<ExperimentalWithCallbackMethod_ServerStreamFiles<ExperimentalWithCallbackMethod_ServerStreamServerEvents<ExperimentalWithCallbackMethod_PostUnAssignRoles<ExperimentalWithCallbackMethod_PutUpdateTodo<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_PostAssignRoles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PostAssignRoles() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_PostAssignRoles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostAssignRoles(::grpc::ServerContext* context, const ::AssignRoles* request, ::AssignRolesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OptionsAuthenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_OptionsAuthenticate() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_OptionsAuthenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OptionsAuthenticate(::grpc::ServerContext* context, const ::Authenticate* request, ::AuthenticateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAuthenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetAuthenticate() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetAuthenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAuthenticate(::grpc::ServerContext* context, const ::Authenticate* request, ::AuthenticateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostAuthenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PostAuthenticate() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_PostAuthenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostAuthenticate(::grpc::ServerContext* context, const ::Authenticate* request, ::AuthenticateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteAuthenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteAuthenticate() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeleteAuthenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAuthenticate(::grpc::ServerContext* context, const ::Authenticate* request, ::AuthenticateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostConvertSessionToToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PostConvertSessionToToken() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_PostConvertSessionToToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostConvertSessionToToken(::grpc::ServerContext* context, const ::ConvertSessionToToken* request, ::ConvertSessionToTokenResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostCreateTodo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PostCreateTodo() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_PostCreateTodo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostCreateTodo(::grpc::ServerContext* context, const ::CreateTodo* request, ::CreateTodoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CallDeleteTodo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CallDeleteTodo() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_CallDeleteTodo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallDeleteTodo(::grpc::ServerContext* context, const ::DeleteTodo* request, ::EmptyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CallDeleteTodos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CallDeleteTodos() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_CallDeleteTodos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallDeleteTodos(::grpc::ServerContext* context, const ::DeleteTodos* request, ::EmptyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostGetAccessToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PostGetAccessToken() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_PostGetAccessToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostGetAccessToken(::grpc::ServerContext* context, const ::GetAccessToken* request, ::GetAccessTokenResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CallGetTodo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CallGetTodo() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_CallGetTodo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallGetTodo(::grpc::ServerContext* context, const ::GetTodo* request, ::GetTodoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CallGetTodos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CallGetTodos() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_CallGetTodos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallGetTodos(::grpc::ServerContext* context, const ::GetTodos* request, ::GetTodosResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetHello() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_GetHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHello(::grpc::ServerContext* context, const ::Hello* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PostHello() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_PostHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostHello(::grpc::ServerContext* context, const ::Hello* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PutHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PutHello() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_PutHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutHello(::grpc::ServerContext* context, const ::Hello* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteHello() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_DeleteHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteHello(::grpc::ServerContext* context, const ::Hello* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PatchHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PatchHello() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_PatchHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchHello(::grpc::ServerContext* context, const ::Hello* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetHelloSecure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetHelloSecure() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_GetHelloSecure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHelloSecure(::grpc::ServerContext* context, const ::HelloSecure* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostHelloSecure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PostHelloSecure() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_PostHelloSecure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostHelloSecure(::grpc::ServerContext* context, const ::HelloSecure* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PutHelloSecure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PutHelloSecure() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_PutHelloSecure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutHelloSecure(::grpc::ServerContext* context, const ::HelloSecure* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteHelloSecure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteHelloSecure() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_DeleteHelloSecure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteHelloSecure(::grpc::ServerContext* context, const ::HelloSecure* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PatchHelloSecure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PatchHelloSecure() {
      ::grpc::Service::MarkMethodGeneric(21);
    }
    ~WithGenericMethod_PatchHelloSecure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchHelloSecure(::grpc::ServerContext* context, const ::HelloSecure* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PutRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PutRegister() {
      ::grpc::Service::MarkMethodGeneric(22);
    }
    ~WithGenericMethod_PutRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutRegister(::grpc::ServerContext* context, const ::Register* request, ::RegisterResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PostRegister() {
      ::grpc::Service::MarkMethodGeneric(23);
    }
    ~WithGenericMethod_PostRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostRegister(::grpc::ServerContext* context, const ::Register* request, ::RegisterResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostResetTodos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PostResetTodos() {
      ::grpc::Service::MarkMethodGeneric(24);
    }
    ~WithGenericMethod_PostResetTodos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostResetTodos(::grpc::ServerContext* context, const ::ResetTodos* request, ::EmptyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ServerStreamFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ServerStreamFiles() {
      ::grpc::Service::MarkMethodGeneric(25);
    }
    ~WithGenericMethod_ServerStreamFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStreamFiles(::grpc::ServerContext* context, const ::StreamFiles* request, ::grpc::ServerWriter< ::FileContent>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ServerStreamServerEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ServerStreamServerEvents() {
      ::grpc::Service::MarkMethodGeneric(26);
    }
    ~WithGenericMethod_ServerStreamServerEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStreamServerEvents(::grpc::ServerContext* context, const ::StreamServerEvents* request, ::grpc::ServerWriter< ::StreamServerEventsResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostUnAssignRoles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PostUnAssignRoles() {
      ::grpc::Service::MarkMethodGeneric(27);
    }
    ~WithGenericMethod_PostUnAssignRoles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostUnAssignRoles(::grpc::ServerContext* context, const ::UnAssignRoles* request, ::UnAssignRolesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PutUpdateTodo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PutUpdateTodo() {
      ::grpc::Service::MarkMethodGeneric(28);
    }
    ~WithGenericMethod_PutUpdateTodo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutUpdateTodo(::grpc::ServerContext* context, const ::UpdateTodo* request, ::EmptyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostAssignRoles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_PostAssignRoles() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_PostAssignRoles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostAssignRoles(::grpc::ServerContext* context, const ::AssignRoles* request, ::AssignRolesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostAssignRoles(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OptionsAuthenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_OptionsAuthenticate() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_OptionsAuthenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OptionsAuthenticate(::grpc::ServerContext* context, const ::Authenticate* request, ::AuthenticateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOptionsAuthenticate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAuthenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetAuthenticate() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetAuthenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAuthenticate(::grpc::ServerContext* context, const ::Authenticate* request, ::AuthenticateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAuthenticate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostAuthenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_PostAuthenticate() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_PostAuthenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostAuthenticate(::grpc::ServerContext* context, const ::Authenticate* request, ::AuthenticateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostAuthenticate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteAuthenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DeleteAuthenticate() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DeleteAuthenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAuthenticate(::grpc::ServerContext* context, const ::Authenticate* request, ::AuthenticateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteAuthenticate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostConvertSessionToToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_PostConvertSessionToToken() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_PostConvertSessionToToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostConvertSessionToToken(::grpc::ServerContext* context, const ::ConvertSessionToToken* request, ::ConvertSessionToTokenResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostConvertSessionToToken(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostCreateTodo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_PostCreateTodo() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_PostCreateTodo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostCreateTodo(::grpc::ServerContext* context, const ::CreateTodo* request, ::CreateTodoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostCreateTodo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CallDeleteTodo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CallDeleteTodo() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_CallDeleteTodo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallDeleteTodo(::grpc::ServerContext* context, const ::DeleteTodo* request, ::EmptyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCallDeleteTodo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CallDeleteTodos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CallDeleteTodos() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_CallDeleteTodos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallDeleteTodos(::grpc::ServerContext* context, const ::DeleteTodos* request, ::EmptyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCallDeleteTodos(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostGetAccessToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_PostGetAccessToken() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_PostGetAccessToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostGetAccessToken(::grpc::ServerContext* context, const ::GetAccessToken* request, ::GetAccessTokenResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostGetAccessToken(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CallGetTodo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CallGetTodo() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_CallGetTodo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallGetTodo(::grpc::ServerContext* context, const ::GetTodo* request, ::GetTodoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCallGetTodo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CallGetTodos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CallGetTodos() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_CallGetTodos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallGetTodos(::grpc::ServerContext* context, const ::GetTodos* request, ::GetTodosResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCallGetTodos(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetHello() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_GetHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHello(::grpc::ServerContext* context, const ::Hello* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetHello(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_PostHello() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_PostHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostHello(::grpc::ServerContext* context, const ::Hello* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostHello(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PutHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_PutHello() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_PutHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutHello(::grpc::ServerContext* context, const ::Hello* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutHello(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DeleteHello() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_DeleteHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteHello(::grpc::ServerContext* context, const ::Hello* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteHello(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PatchHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_PatchHello() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_PatchHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchHello(::grpc::ServerContext* context, const ::Hello* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchHello(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetHelloSecure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetHelloSecure() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_GetHelloSecure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHelloSecure(::grpc::ServerContext* context, const ::HelloSecure* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetHelloSecure(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostHelloSecure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_PostHelloSecure() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_PostHelloSecure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostHelloSecure(::grpc::ServerContext* context, const ::HelloSecure* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostHelloSecure(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PutHelloSecure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_PutHelloSecure() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_PutHelloSecure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutHelloSecure(::grpc::ServerContext* context, const ::HelloSecure* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutHelloSecure(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteHelloSecure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DeleteHelloSecure() {
      ::grpc::Service::MarkMethodRaw(20);
    }
    ~WithRawMethod_DeleteHelloSecure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteHelloSecure(::grpc::ServerContext* context, const ::HelloSecure* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteHelloSecure(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PatchHelloSecure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_PatchHelloSecure() {
      ::grpc::Service::MarkMethodRaw(21);
    }
    ~WithRawMethod_PatchHelloSecure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchHelloSecure(::grpc::ServerContext* context, const ::HelloSecure* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchHelloSecure(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PutRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_PutRegister() {
      ::grpc::Service::MarkMethodRaw(22);
    }
    ~WithRawMethod_PutRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutRegister(::grpc::ServerContext* context, const ::Register* request, ::RegisterResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutRegister(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_PostRegister() {
      ::grpc::Service::MarkMethodRaw(23);
    }
    ~WithRawMethod_PostRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostRegister(::grpc::ServerContext* context, const ::Register* request, ::RegisterResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostRegister(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostResetTodos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_PostResetTodos() {
      ::grpc::Service::MarkMethodRaw(24);
    }
    ~WithRawMethod_PostResetTodos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostResetTodos(::grpc::ServerContext* context, const ::ResetTodos* request, ::EmptyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostResetTodos(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ServerStreamFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ServerStreamFiles() {
      ::grpc::Service::MarkMethodRaw(25);
    }
    ~WithRawMethod_ServerStreamFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStreamFiles(::grpc::ServerContext* context, const ::StreamFiles* request, ::grpc::ServerWriter< ::FileContent>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerStreamFiles(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(25, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ServerStreamServerEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ServerStreamServerEvents() {
      ::grpc::Service::MarkMethodRaw(26);
    }
    ~WithRawMethod_ServerStreamServerEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStreamServerEvents(::grpc::ServerContext* context, const ::StreamServerEvents* request, ::grpc::ServerWriter< ::StreamServerEventsResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerStreamServerEvents(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(26, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostUnAssignRoles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_PostUnAssignRoles() {
      ::grpc::Service::MarkMethodRaw(27);
    }
    ~WithRawMethod_PostUnAssignRoles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostUnAssignRoles(::grpc::ServerContext* context, const ::UnAssignRoles* request, ::UnAssignRolesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostUnAssignRoles(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PutUpdateTodo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_PutUpdateTodo() {
      ::grpc::Service::MarkMethodRaw(28);
    }
    ~WithRawMethod_PutUpdateTodo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutUpdateTodo(::grpc::ServerContext* context, const ::UpdateTodo* request, ::EmptyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutUpdateTodo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(28, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PostAssignRoles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_PostAssignRoles() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->PostAssignRoles(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_PostAssignRoles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostAssignRoles(::grpc::ServerContext* context, const ::AssignRoles* request, ::AssignRolesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PostAssignRoles(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_OptionsAuthenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_OptionsAuthenticate() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->OptionsAuthenticate(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_OptionsAuthenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OptionsAuthenticate(::grpc::ServerContext* context, const ::Authenticate* request, ::AuthenticateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void OptionsAuthenticate(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetAuthenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetAuthenticate() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetAuthenticate(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetAuthenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAuthenticate(::grpc::ServerContext* context, const ::Authenticate* request, ::AuthenticateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetAuthenticate(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PostAuthenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_PostAuthenticate() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->PostAuthenticate(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_PostAuthenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostAuthenticate(::grpc::ServerContext* context, const ::Authenticate* request, ::AuthenticateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PostAuthenticate(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteAuthenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteAuthenticate() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DeleteAuthenticate(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteAuthenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAuthenticate(::grpc::ServerContext* context, const ::Authenticate* request, ::AuthenticateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DeleteAuthenticate(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PostConvertSessionToToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_PostConvertSessionToToken() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->PostConvertSessionToToken(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_PostConvertSessionToToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostConvertSessionToToken(::grpc::ServerContext* context, const ::ConvertSessionToToken* request, ::ConvertSessionToTokenResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PostConvertSessionToToken(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PostCreateTodo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_PostCreateTodo() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->PostCreateTodo(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_PostCreateTodo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostCreateTodo(::grpc::ServerContext* context, const ::CreateTodo* request, ::CreateTodoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PostCreateTodo(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CallDeleteTodo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CallDeleteTodo() {
      ::grpc::Service::experimental().MarkMethodRawCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CallDeleteTodo(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CallDeleteTodo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallDeleteTodo(::grpc::ServerContext* context, const ::DeleteTodo* request, ::EmptyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CallDeleteTodo(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CallDeleteTodos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CallDeleteTodos() {
      ::grpc::Service::experimental().MarkMethodRawCallback(8,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CallDeleteTodos(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CallDeleteTodos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallDeleteTodos(::grpc::ServerContext* context, const ::DeleteTodos* request, ::EmptyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CallDeleteTodos(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PostGetAccessToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_PostGetAccessToken() {
      ::grpc::Service::experimental().MarkMethodRawCallback(9,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->PostGetAccessToken(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_PostGetAccessToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostGetAccessToken(::grpc::ServerContext* context, const ::GetAccessToken* request, ::GetAccessTokenResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PostGetAccessToken(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CallGetTodo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CallGetTodo() {
      ::grpc::Service::experimental().MarkMethodRawCallback(10,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CallGetTodo(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CallGetTodo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallGetTodo(::grpc::ServerContext* context, const ::GetTodo* request, ::GetTodoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CallGetTodo(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CallGetTodos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CallGetTodos() {
      ::grpc::Service::experimental().MarkMethodRawCallback(11,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CallGetTodos(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CallGetTodos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallGetTodos(::grpc::ServerContext* context, const ::GetTodos* request, ::GetTodosResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CallGetTodos(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetHello() {
      ::grpc::Service::experimental().MarkMethodRawCallback(12,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetHello(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHello(::grpc::ServerContext* context, const ::Hello* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetHello(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PostHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_PostHello() {
      ::grpc::Service::experimental().MarkMethodRawCallback(13,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->PostHello(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_PostHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostHello(::grpc::ServerContext* context, const ::Hello* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PostHello(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PutHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_PutHello() {
      ::grpc::Service::experimental().MarkMethodRawCallback(14,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->PutHello(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_PutHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutHello(::grpc::ServerContext* context, const ::Hello* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PutHello(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteHello() {
      ::grpc::Service::experimental().MarkMethodRawCallback(15,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DeleteHello(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteHello(::grpc::ServerContext* context, const ::Hello* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DeleteHello(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PatchHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_PatchHello() {
      ::grpc::Service::experimental().MarkMethodRawCallback(16,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->PatchHello(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_PatchHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchHello(::grpc::ServerContext* context, const ::Hello* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PatchHello(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetHelloSecure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetHelloSecure() {
      ::grpc::Service::experimental().MarkMethodRawCallback(17,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetHelloSecure(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetHelloSecure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHelloSecure(::grpc::ServerContext* context, const ::HelloSecure* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetHelloSecure(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PostHelloSecure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_PostHelloSecure() {
      ::grpc::Service::experimental().MarkMethodRawCallback(18,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->PostHelloSecure(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_PostHelloSecure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostHelloSecure(::grpc::ServerContext* context, const ::HelloSecure* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PostHelloSecure(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PutHelloSecure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_PutHelloSecure() {
      ::grpc::Service::experimental().MarkMethodRawCallback(19,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->PutHelloSecure(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_PutHelloSecure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutHelloSecure(::grpc::ServerContext* context, const ::HelloSecure* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PutHelloSecure(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteHelloSecure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteHelloSecure() {
      ::grpc::Service::experimental().MarkMethodRawCallback(20,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DeleteHelloSecure(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteHelloSecure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteHelloSecure(::grpc::ServerContext* context, const ::HelloSecure* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DeleteHelloSecure(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PatchHelloSecure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_PatchHelloSecure() {
      ::grpc::Service::experimental().MarkMethodRawCallback(21,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->PatchHelloSecure(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_PatchHelloSecure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchHelloSecure(::grpc::ServerContext* context, const ::HelloSecure* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PatchHelloSecure(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PutRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_PutRegister() {
      ::grpc::Service::experimental().MarkMethodRawCallback(22,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->PutRegister(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_PutRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutRegister(::grpc::ServerContext* context, const ::Register* request, ::RegisterResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PutRegister(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PostRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_PostRegister() {
      ::grpc::Service::experimental().MarkMethodRawCallback(23,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->PostRegister(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_PostRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostRegister(::grpc::ServerContext* context, const ::Register* request, ::RegisterResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PostRegister(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PostResetTodos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_PostResetTodos() {
      ::grpc::Service::experimental().MarkMethodRawCallback(24,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->PostResetTodos(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_PostResetTodos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostResetTodos(::grpc::ServerContext* context, const ::ResetTodos* request, ::EmptyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PostResetTodos(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ServerStreamFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ServerStreamFiles() {
      ::grpc::Service::experimental().MarkMethodRawCallback(25,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->ServerStreamFiles(); }));
    }
    ~ExperimentalWithRawCallbackMethod_ServerStreamFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStreamFiles(::grpc::ServerContext* context, const ::StreamFiles* request, ::grpc::ServerWriter< ::FileContent>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* ServerStreamFiles() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ServerStreamServerEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ServerStreamServerEvents() {
      ::grpc::Service::experimental().MarkMethodRawCallback(26,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->ServerStreamServerEvents(); }));
    }
    ~ExperimentalWithRawCallbackMethod_ServerStreamServerEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStreamServerEvents(::grpc::ServerContext* context, const ::StreamServerEvents* request, ::grpc::ServerWriter< ::StreamServerEventsResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* ServerStreamServerEvents() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PostUnAssignRoles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_PostUnAssignRoles() {
      ::grpc::Service::experimental().MarkMethodRawCallback(27,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->PostUnAssignRoles(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_PostUnAssignRoles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostUnAssignRoles(::grpc::ServerContext* context, const ::UnAssignRoles* request, ::UnAssignRolesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PostUnAssignRoles(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PutUpdateTodo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_PutUpdateTodo() {
      ::grpc::Service::experimental().MarkMethodRawCallback(28,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->PutUpdateTodo(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_PutUpdateTodo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutUpdateTodo(::grpc::ServerContext* context, const ::UpdateTodo* request, ::EmptyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PutUpdateTodo(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostAssignRoles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PostAssignRoles() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::AssignRoles, ::AssignRolesResponse>(std::bind(&WithStreamedUnaryMethod_PostAssignRoles<BaseClass>::StreamedPostAssignRoles, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PostAssignRoles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostAssignRoles(::grpc::ServerContext* context, const ::AssignRoles* request, ::AssignRolesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostAssignRoles(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::AssignRoles,::AssignRolesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OptionsAuthenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_OptionsAuthenticate() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::Authenticate, ::AuthenticateResponse>(std::bind(&WithStreamedUnaryMethod_OptionsAuthenticate<BaseClass>::StreamedOptionsAuthenticate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_OptionsAuthenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OptionsAuthenticate(::grpc::ServerContext* context, const ::Authenticate* request, ::AuthenticateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOptionsAuthenticate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Authenticate,::AuthenticateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAuthenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetAuthenticate() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::Authenticate, ::AuthenticateResponse>(std::bind(&WithStreamedUnaryMethod_GetAuthenticate<BaseClass>::StreamedGetAuthenticate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetAuthenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAuthenticate(::grpc::ServerContext* context, const ::Authenticate* request, ::AuthenticateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAuthenticate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Authenticate,::AuthenticateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostAuthenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PostAuthenticate() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::Authenticate, ::AuthenticateResponse>(std::bind(&WithStreamedUnaryMethod_PostAuthenticate<BaseClass>::StreamedPostAuthenticate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PostAuthenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostAuthenticate(::grpc::ServerContext* context, const ::Authenticate* request, ::AuthenticateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostAuthenticate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Authenticate,::AuthenticateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteAuthenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteAuthenticate() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::Authenticate, ::AuthenticateResponse>(std::bind(&WithStreamedUnaryMethod_DeleteAuthenticate<BaseClass>::StreamedDeleteAuthenticate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteAuthenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteAuthenticate(::grpc::ServerContext* context, const ::Authenticate* request, ::AuthenticateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteAuthenticate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Authenticate,::AuthenticateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostConvertSessionToToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PostConvertSessionToToken() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::ConvertSessionToToken, ::ConvertSessionToTokenResponse>(std::bind(&WithStreamedUnaryMethod_PostConvertSessionToToken<BaseClass>::StreamedPostConvertSessionToToken, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PostConvertSessionToToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostConvertSessionToToken(::grpc::ServerContext* context, const ::ConvertSessionToToken* request, ::ConvertSessionToTokenResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostConvertSessionToToken(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ConvertSessionToToken,::ConvertSessionToTokenResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostCreateTodo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PostCreateTodo() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::CreateTodo, ::CreateTodoResponse>(std::bind(&WithStreamedUnaryMethod_PostCreateTodo<BaseClass>::StreamedPostCreateTodo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PostCreateTodo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostCreateTodo(::grpc::ServerContext* context, const ::CreateTodo* request, ::CreateTodoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostCreateTodo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CreateTodo,::CreateTodoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CallDeleteTodo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CallDeleteTodo() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::DeleteTodo, ::EmptyResponse>(std::bind(&WithStreamedUnaryMethod_CallDeleteTodo<BaseClass>::StreamedCallDeleteTodo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CallDeleteTodo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CallDeleteTodo(::grpc::ServerContext* context, const ::DeleteTodo* request, ::EmptyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCallDeleteTodo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DeleteTodo,::EmptyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CallDeleteTodos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CallDeleteTodos() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::DeleteTodos, ::EmptyResponse>(std::bind(&WithStreamedUnaryMethod_CallDeleteTodos<BaseClass>::StreamedCallDeleteTodos, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CallDeleteTodos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CallDeleteTodos(::grpc::ServerContext* context, const ::DeleteTodos* request, ::EmptyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCallDeleteTodos(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DeleteTodos,::EmptyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostGetAccessToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PostGetAccessToken() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::GetAccessToken, ::GetAccessTokenResponse>(std::bind(&WithStreamedUnaryMethod_PostGetAccessToken<BaseClass>::StreamedPostGetAccessToken, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PostGetAccessToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostGetAccessToken(::grpc::ServerContext* context, const ::GetAccessToken* request, ::GetAccessTokenResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostGetAccessToken(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GetAccessToken,::GetAccessTokenResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CallGetTodo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CallGetTodo() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::GetTodo, ::GetTodoResponse>(std::bind(&WithStreamedUnaryMethod_CallGetTodo<BaseClass>::StreamedCallGetTodo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CallGetTodo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CallGetTodo(::grpc::ServerContext* context, const ::GetTodo* request, ::GetTodoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCallGetTodo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GetTodo,::GetTodoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CallGetTodos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CallGetTodos() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::GetTodos, ::GetTodosResponse>(std::bind(&WithStreamedUnaryMethod_CallGetTodos<BaseClass>::StreamedCallGetTodos, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CallGetTodos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CallGetTodos(::grpc::ServerContext* context, const ::GetTodos* request, ::GetTodosResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCallGetTodos(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GetTodos,::GetTodosResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetHello() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler< ::Hello, ::HelloResponse>(std::bind(&WithStreamedUnaryMethod_GetHello<BaseClass>::StreamedGetHello, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetHello(::grpc::ServerContext* context, const ::Hello* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetHello(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Hello,::HelloResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PostHello() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler< ::Hello, ::HelloResponse>(std::bind(&WithStreamedUnaryMethod_PostHello<BaseClass>::StreamedPostHello, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PostHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostHello(::grpc::ServerContext* context, const ::Hello* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostHello(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Hello,::HelloResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PutHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PutHello() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler< ::Hello, ::HelloResponse>(std::bind(&WithStreamedUnaryMethod_PutHello<BaseClass>::StreamedPutHello, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PutHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PutHello(::grpc::ServerContext* context, const ::Hello* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPutHello(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Hello,::HelloResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteHello() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler< ::Hello, ::HelloResponse>(std::bind(&WithStreamedUnaryMethod_DeleteHello<BaseClass>::StreamedDeleteHello, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteHello(::grpc::ServerContext* context, const ::Hello* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteHello(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Hello,::HelloResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PatchHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PatchHello() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler< ::Hello, ::HelloResponse>(std::bind(&WithStreamedUnaryMethod_PatchHello<BaseClass>::StreamedPatchHello, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PatchHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PatchHello(::grpc::ServerContext* context, const ::Hello* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPatchHello(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Hello,::HelloResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetHelloSecure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetHelloSecure() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler< ::HelloSecure, ::HelloResponse>(std::bind(&WithStreamedUnaryMethod_GetHelloSecure<BaseClass>::StreamedGetHelloSecure, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetHelloSecure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetHelloSecure(::grpc::ServerContext* context, const ::HelloSecure* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetHelloSecure(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::HelloSecure,::HelloResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostHelloSecure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PostHelloSecure() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler< ::HelloSecure, ::HelloResponse>(std::bind(&WithStreamedUnaryMethod_PostHelloSecure<BaseClass>::StreamedPostHelloSecure, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PostHelloSecure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostHelloSecure(::grpc::ServerContext* context, const ::HelloSecure* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostHelloSecure(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::HelloSecure,::HelloResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PutHelloSecure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PutHelloSecure() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler< ::HelloSecure, ::HelloResponse>(std::bind(&WithStreamedUnaryMethod_PutHelloSecure<BaseClass>::StreamedPutHelloSecure, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PutHelloSecure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PutHelloSecure(::grpc::ServerContext* context, const ::HelloSecure* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPutHelloSecure(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::HelloSecure,::HelloResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteHelloSecure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteHelloSecure() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::StreamedUnaryHandler< ::HelloSecure, ::HelloResponse>(std::bind(&WithStreamedUnaryMethod_DeleteHelloSecure<BaseClass>::StreamedDeleteHelloSecure, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteHelloSecure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteHelloSecure(::grpc::ServerContext* context, const ::HelloSecure* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteHelloSecure(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::HelloSecure,::HelloResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PatchHelloSecure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PatchHelloSecure() {
      ::grpc::Service::MarkMethodStreamed(21,
        new ::grpc::internal::StreamedUnaryHandler< ::HelloSecure, ::HelloResponse>(std::bind(&WithStreamedUnaryMethod_PatchHelloSecure<BaseClass>::StreamedPatchHelloSecure, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PatchHelloSecure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PatchHelloSecure(::grpc::ServerContext* context, const ::HelloSecure* request, ::HelloResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPatchHelloSecure(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::HelloSecure,::HelloResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PutRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PutRegister() {
      ::grpc::Service::MarkMethodStreamed(22,
        new ::grpc::internal::StreamedUnaryHandler< ::Register, ::RegisterResponse>(std::bind(&WithStreamedUnaryMethod_PutRegister<BaseClass>::StreamedPutRegister, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PutRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PutRegister(::grpc::ServerContext* context, const ::Register* request, ::RegisterResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPutRegister(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Register,::RegisterResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PostRegister() {
      ::grpc::Service::MarkMethodStreamed(23,
        new ::grpc::internal::StreamedUnaryHandler< ::Register, ::RegisterResponse>(std::bind(&WithStreamedUnaryMethod_PostRegister<BaseClass>::StreamedPostRegister, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PostRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostRegister(::grpc::ServerContext* context, const ::Register* request, ::RegisterResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostRegister(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Register,::RegisterResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostResetTodos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PostResetTodos() {
      ::grpc::Service::MarkMethodStreamed(24,
        new ::grpc::internal::StreamedUnaryHandler< ::ResetTodos, ::EmptyResponse>(std::bind(&WithStreamedUnaryMethod_PostResetTodos<BaseClass>::StreamedPostResetTodos, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PostResetTodos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostResetTodos(::grpc::ServerContext* context, const ::ResetTodos* request, ::EmptyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostResetTodos(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ResetTodos,::EmptyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostUnAssignRoles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PostUnAssignRoles() {
      ::grpc::Service::MarkMethodStreamed(27,
        new ::grpc::internal::StreamedUnaryHandler< ::UnAssignRoles, ::UnAssignRolesResponse>(std::bind(&WithStreamedUnaryMethod_PostUnAssignRoles<BaseClass>::StreamedPostUnAssignRoles, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PostUnAssignRoles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostUnAssignRoles(::grpc::ServerContext* context, const ::UnAssignRoles* request, ::UnAssignRolesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostUnAssignRoles(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::UnAssignRoles,::UnAssignRolesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PutUpdateTodo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PutUpdateTodo() {
      ::grpc::Service::MarkMethodStreamed(28,
        new ::grpc::internal::StreamedUnaryHandler< ::UpdateTodo, ::EmptyResponse>(std::bind(&WithStreamedUnaryMethod_PutUpdateTodo<BaseClass>::StreamedPutUpdateTodo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PutUpdateTodo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PutUpdateTodo(::grpc::ServerContext* context, const ::UpdateTodo* request, ::EmptyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPutUpdateTodo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::UpdateTodo,::EmptyResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_PostAssignRoles<WithStreamedUnaryMethod_OptionsAuthenticate<WithStreamedUnaryMethod_GetAuthenticate<WithStreamedUnaryMethod_PostAuthenticate<WithStreamedUnaryMethod_DeleteAuthenticate<WithStreamedUnaryMethod_PostConvertSessionToToken<WithStreamedUnaryMethod_PostCreateTodo<WithStreamedUnaryMethod_CallDeleteTodo<WithStreamedUnaryMethod_CallDeleteTodos<WithStreamedUnaryMethod_PostGetAccessToken<WithStreamedUnaryMethod_CallGetTodo<WithStreamedUnaryMethod_CallGetTodos<WithStreamedUnaryMethod_GetHello<WithStreamedUnaryMethod_PostHello<WithStreamedUnaryMethod_PutHello<WithStreamedUnaryMethod_DeleteHello<WithStreamedUnaryMethod_PatchHello<WithStreamedUnaryMethod_GetHelloSecure<WithStreamedUnaryMethod_PostHelloSecure<WithStreamedUnaryMethod_PutHelloSecure<WithStreamedUnaryMethod_DeleteHelloSecure<WithStreamedUnaryMethod_PatchHelloSecure<WithStreamedUnaryMethod_PutRegister<WithStreamedUnaryMethod_PostRegister<WithStreamedUnaryMethod_PostResetTodos<WithStreamedUnaryMethod_PostUnAssignRoles<WithStreamedUnaryMethod_PutUpdateTodo<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ServerStreamFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_ServerStreamFiles() {
      ::grpc::Service::MarkMethodStreamed(25,
        new ::grpc::internal::SplitServerStreamingHandler< ::StreamFiles, ::FileContent>(std::bind(&WithSplitStreamingMethod_ServerStreamFiles<BaseClass>::StreamedServerStreamFiles, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_ServerStreamFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ServerStreamFiles(::grpc::ServerContext* context, const ::StreamFiles* request, ::grpc::ServerWriter< ::FileContent>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedServerStreamFiles(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::StreamFiles,::FileContent>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_ServerStreamServerEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_ServerStreamServerEvents() {
      ::grpc::Service::MarkMethodStreamed(26,
        new ::grpc::internal::SplitServerStreamingHandler< ::StreamServerEvents, ::StreamServerEventsResponse>(std::bind(&WithSplitStreamingMethod_ServerStreamServerEvents<BaseClass>::StreamedServerStreamServerEvents, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_ServerStreamServerEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ServerStreamServerEvents(::grpc::ServerContext* context, const ::StreamServerEvents* request, ::grpc::ServerWriter< ::StreamServerEventsResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedServerStreamServerEvents(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::StreamServerEvents,::StreamServerEventsResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ServerStreamFiles<WithSplitStreamingMethod_ServerStreamServerEvents<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_PostAssignRoles<WithStreamedUnaryMethod_OptionsAuthenticate<WithStreamedUnaryMethod_GetAuthenticate<WithStreamedUnaryMethod_PostAuthenticate<WithStreamedUnaryMethod_DeleteAuthenticate<WithStreamedUnaryMethod_PostConvertSessionToToken<WithStreamedUnaryMethod_PostCreateTodo<WithStreamedUnaryMethod_CallDeleteTodo<WithStreamedUnaryMethod_CallDeleteTodos<WithStreamedUnaryMethod_PostGetAccessToken<WithStreamedUnaryMethod_CallGetTodo<WithStreamedUnaryMethod_CallGetTodos<WithStreamedUnaryMethod_GetHello<WithStreamedUnaryMethod_PostHello<WithStreamedUnaryMethod_PutHello<WithStreamedUnaryMethod_DeleteHello<WithStreamedUnaryMethod_PatchHello<WithStreamedUnaryMethod_GetHelloSecure<WithStreamedUnaryMethod_PostHelloSecure<WithStreamedUnaryMethod_PutHelloSecure<WithStreamedUnaryMethod_DeleteHelloSecure<WithStreamedUnaryMethod_PatchHelloSecure<WithStreamedUnaryMethod_PutRegister<WithStreamedUnaryMethod_PostRegister<WithStreamedUnaryMethod_PostResetTodos<WithSplitStreamingMethod_ServerStreamFiles<WithSplitStreamingMethod_ServerStreamServerEvents<WithStreamedUnaryMethod_PostUnAssignRoles<WithStreamedUnaryMethod_PutUpdateTodo<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedService;
};


#endif  // GRPC_services_2eproto__INCLUDED
