// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services.proto

#ifndef PROTOBUF_INCLUDED_services_2eproto
#define PROTOBUF_INCLUDED_services_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_services_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_services_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[48]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_services_2eproto();
class AssignRoles;
class AssignRolesDefaultTypeInternal;
extern AssignRolesDefaultTypeInternal _AssignRoles_default_instance_;
class AssignRolesResponse;
class AssignRolesResponseDefaultTypeInternal;
extern AssignRolesResponseDefaultTypeInternal _AssignRolesResponse_default_instance_;
class AssignRolesResponse_MetaEntry_DoNotUse;
class AssignRolesResponse_MetaEntry_DoNotUseDefaultTypeInternal;
extern AssignRolesResponse_MetaEntry_DoNotUseDefaultTypeInternal _AssignRolesResponse_MetaEntry_DoNotUse_default_instance_;
class AssignRoles_MetaEntry_DoNotUse;
class AssignRoles_MetaEntry_DoNotUseDefaultTypeInternal;
extern AssignRoles_MetaEntry_DoNotUseDefaultTypeInternal _AssignRoles_MetaEntry_DoNotUse_default_instance_;
class Authenticate;
class AuthenticateDefaultTypeInternal;
extern AuthenticateDefaultTypeInternal _Authenticate_default_instance_;
class AuthenticateResponse;
class AuthenticateResponseDefaultTypeInternal;
extern AuthenticateResponseDefaultTypeInternal _AuthenticateResponse_default_instance_;
class AuthenticateResponse_MetaEntry_DoNotUse;
class AuthenticateResponse_MetaEntry_DoNotUseDefaultTypeInternal;
extern AuthenticateResponse_MetaEntry_DoNotUseDefaultTypeInternal _AuthenticateResponse_MetaEntry_DoNotUse_default_instance_;
class Authenticate_MetaEntry_DoNotUse;
class Authenticate_MetaEntry_DoNotUseDefaultTypeInternal;
extern Authenticate_MetaEntry_DoNotUseDefaultTypeInternal _Authenticate_MetaEntry_DoNotUse_default_instance_;
class ConvertSessionToToken;
class ConvertSessionToTokenDefaultTypeInternal;
extern ConvertSessionToTokenDefaultTypeInternal _ConvertSessionToToken_default_instance_;
class ConvertSessionToTokenResponse;
class ConvertSessionToTokenResponseDefaultTypeInternal;
extern ConvertSessionToTokenResponseDefaultTypeInternal _ConvertSessionToTokenResponse_default_instance_;
class ConvertSessionToTokenResponse_MetaEntry_DoNotUse;
class ConvertSessionToTokenResponse_MetaEntry_DoNotUseDefaultTypeInternal;
extern ConvertSessionToTokenResponse_MetaEntry_DoNotUseDefaultTypeInternal _ConvertSessionToTokenResponse_MetaEntry_DoNotUse_default_instance_;
class ConvertSessionToToken_MetaEntry_DoNotUse;
class ConvertSessionToToken_MetaEntry_DoNotUseDefaultTypeInternal;
extern ConvertSessionToToken_MetaEntry_DoNotUseDefaultTypeInternal _ConvertSessionToToken_MetaEntry_DoNotUse_default_instance_;
class CreateTodo;
class CreateTodoDefaultTypeInternal;
extern CreateTodoDefaultTypeInternal _CreateTodo_default_instance_;
class CreateTodoResponse;
class CreateTodoResponseDefaultTypeInternal;
extern CreateTodoResponseDefaultTypeInternal _CreateTodoResponse_default_instance_;
class DeleteTodo;
class DeleteTodoDefaultTypeInternal;
extern DeleteTodoDefaultTypeInternal _DeleteTodo_default_instance_;
class DeleteTodos;
class DeleteTodosDefaultTypeInternal;
extern DeleteTodosDefaultTypeInternal _DeleteTodos_default_instance_;
class EmptyResponse;
class EmptyResponseDefaultTypeInternal;
extern EmptyResponseDefaultTypeInternal _EmptyResponse_default_instance_;
class FileContent;
class FileContentDefaultTypeInternal;
extern FileContentDefaultTypeInternal _FileContent_default_instance_;
class GetAccessToken;
class GetAccessTokenDefaultTypeInternal;
extern GetAccessTokenDefaultTypeInternal _GetAccessToken_default_instance_;
class GetAccessTokenResponse;
class GetAccessTokenResponseDefaultTypeInternal;
extern GetAccessTokenResponseDefaultTypeInternal _GetAccessTokenResponse_default_instance_;
class GetAccessTokenResponse_MetaEntry_DoNotUse;
class GetAccessTokenResponse_MetaEntry_DoNotUseDefaultTypeInternal;
extern GetAccessTokenResponse_MetaEntry_DoNotUseDefaultTypeInternal _GetAccessTokenResponse_MetaEntry_DoNotUse_default_instance_;
class GetAccessToken_MetaEntry_DoNotUse;
class GetAccessToken_MetaEntry_DoNotUseDefaultTypeInternal;
extern GetAccessToken_MetaEntry_DoNotUseDefaultTypeInternal _GetAccessToken_MetaEntry_DoNotUse_default_instance_;
class GetTodo;
class GetTodoDefaultTypeInternal;
extern GetTodoDefaultTypeInternal _GetTodo_default_instance_;
class GetTodoResponse;
class GetTodoResponseDefaultTypeInternal;
extern GetTodoResponseDefaultTypeInternal _GetTodoResponse_default_instance_;
class GetTodos;
class GetTodosDefaultTypeInternal;
extern GetTodosDefaultTypeInternal _GetTodos_default_instance_;
class GetTodosResponse;
class GetTodosResponseDefaultTypeInternal;
extern GetTodosResponseDefaultTypeInternal _GetTodosResponse_default_instance_;
class Hello;
class HelloDefaultTypeInternal;
extern HelloDefaultTypeInternal _Hello_default_instance_;
class HelloResponse;
class HelloResponseDefaultTypeInternal;
extern HelloResponseDefaultTypeInternal _HelloResponse_default_instance_;
class HelloSecure;
class HelloSecureDefaultTypeInternal;
extern HelloSecureDefaultTypeInternal _HelloSecure_default_instance_;
class Register;
class RegisterDefaultTypeInternal;
extern RegisterDefaultTypeInternal _Register_default_instance_;
class RegisterResponse;
class RegisterResponseDefaultTypeInternal;
extern RegisterResponseDefaultTypeInternal _RegisterResponse_default_instance_;
class RegisterResponse_MetaEntry_DoNotUse;
class RegisterResponse_MetaEntry_DoNotUseDefaultTypeInternal;
extern RegisterResponse_MetaEntry_DoNotUseDefaultTypeInternal _RegisterResponse_MetaEntry_DoNotUse_default_instance_;
class Register_MetaEntry_DoNotUse;
class Register_MetaEntry_DoNotUseDefaultTypeInternal;
extern Register_MetaEntry_DoNotUseDefaultTypeInternal _Register_MetaEntry_DoNotUse_default_instance_;
class ResetTodos;
class ResetTodosDefaultTypeInternal;
extern ResetTodosDefaultTypeInternal _ResetTodos_default_instance_;
class ResponseError;
class ResponseErrorDefaultTypeInternal;
extern ResponseErrorDefaultTypeInternal _ResponseError_default_instance_;
class ResponseError_MetaEntry_DoNotUse;
class ResponseError_MetaEntry_DoNotUseDefaultTypeInternal;
extern ResponseError_MetaEntry_DoNotUseDefaultTypeInternal _ResponseError_MetaEntry_DoNotUse_default_instance_;
class ResponseStatus;
class ResponseStatusDefaultTypeInternal;
extern ResponseStatusDefaultTypeInternal _ResponseStatus_default_instance_;
class ResponseStatus_MetaEntry_DoNotUse;
class ResponseStatus_MetaEntry_DoNotUseDefaultTypeInternal;
extern ResponseStatus_MetaEntry_DoNotUseDefaultTypeInternal _ResponseStatus_MetaEntry_DoNotUse_default_instance_;
class StreamFiles;
class StreamFilesDefaultTypeInternal;
extern StreamFilesDefaultTypeInternal _StreamFiles_default_instance_;
class StreamServerEvents;
class StreamServerEventsDefaultTypeInternal;
extern StreamServerEventsDefaultTypeInternal _StreamServerEvents_default_instance_;
class StreamServerEventsResponse;
class StreamServerEventsResponseDefaultTypeInternal;
extern StreamServerEventsResponseDefaultTypeInternal _StreamServerEventsResponse_default_instance_;
class StreamServerEventsResponse_MetaEntry_DoNotUse;
class StreamServerEventsResponse_MetaEntry_DoNotUseDefaultTypeInternal;
extern StreamServerEventsResponse_MetaEntry_DoNotUseDefaultTypeInternal _StreamServerEventsResponse_MetaEntry_DoNotUse_default_instance_;
class Todo;
class TodoDefaultTypeInternal;
extern TodoDefaultTypeInternal _Todo_default_instance_;
class UnAssignRoles;
class UnAssignRolesDefaultTypeInternal;
extern UnAssignRolesDefaultTypeInternal _UnAssignRoles_default_instance_;
class UnAssignRolesResponse;
class UnAssignRolesResponseDefaultTypeInternal;
extern UnAssignRolesResponseDefaultTypeInternal _UnAssignRolesResponse_default_instance_;
class UnAssignRolesResponse_MetaEntry_DoNotUse;
class UnAssignRolesResponse_MetaEntry_DoNotUseDefaultTypeInternal;
extern UnAssignRolesResponse_MetaEntry_DoNotUseDefaultTypeInternal _UnAssignRolesResponse_MetaEntry_DoNotUse_default_instance_;
class UnAssignRoles_MetaEntry_DoNotUse;
class UnAssignRoles_MetaEntry_DoNotUseDefaultTypeInternal;
extern UnAssignRoles_MetaEntry_DoNotUseDefaultTypeInternal _UnAssignRoles_MetaEntry_DoNotUse_default_instance_;
class UpdateTodo;
class UpdateTodoDefaultTypeInternal;
extern UpdateTodoDefaultTypeInternal _UpdateTodo_default_instance_;
namespace google {
namespace protobuf {
template<> ::AssignRoles* Arena::CreateMaybeMessage<::AssignRoles>(Arena*);
template<> ::AssignRolesResponse* Arena::CreateMaybeMessage<::AssignRolesResponse>(Arena*);
template<> ::AssignRolesResponse_MetaEntry_DoNotUse* Arena::CreateMaybeMessage<::AssignRolesResponse_MetaEntry_DoNotUse>(Arena*);
template<> ::AssignRoles_MetaEntry_DoNotUse* Arena::CreateMaybeMessage<::AssignRoles_MetaEntry_DoNotUse>(Arena*);
template<> ::Authenticate* Arena::CreateMaybeMessage<::Authenticate>(Arena*);
template<> ::AuthenticateResponse* Arena::CreateMaybeMessage<::AuthenticateResponse>(Arena*);
template<> ::AuthenticateResponse_MetaEntry_DoNotUse* Arena::CreateMaybeMessage<::AuthenticateResponse_MetaEntry_DoNotUse>(Arena*);
template<> ::Authenticate_MetaEntry_DoNotUse* Arena::CreateMaybeMessage<::Authenticate_MetaEntry_DoNotUse>(Arena*);
template<> ::ConvertSessionToToken* Arena::CreateMaybeMessage<::ConvertSessionToToken>(Arena*);
template<> ::ConvertSessionToTokenResponse* Arena::CreateMaybeMessage<::ConvertSessionToTokenResponse>(Arena*);
template<> ::ConvertSessionToTokenResponse_MetaEntry_DoNotUse* Arena::CreateMaybeMessage<::ConvertSessionToTokenResponse_MetaEntry_DoNotUse>(Arena*);
template<> ::ConvertSessionToToken_MetaEntry_DoNotUse* Arena::CreateMaybeMessage<::ConvertSessionToToken_MetaEntry_DoNotUse>(Arena*);
template<> ::CreateTodo* Arena::CreateMaybeMessage<::CreateTodo>(Arena*);
template<> ::CreateTodoResponse* Arena::CreateMaybeMessage<::CreateTodoResponse>(Arena*);
template<> ::DeleteTodo* Arena::CreateMaybeMessage<::DeleteTodo>(Arena*);
template<> ::DeleteTodos* Arena::CreateMaybeMessage<::DeleteTodos>(Arena*);
template<> ::EmptyResponse* Arena::CreateMaybeMessage<::EmptyResponse>(Arena*);
template<> ::FileContent* Arena::CreateMaybeMessage<::FileContent>(Arena*);
template<> ::GetAccessToken* Arena::CreateMaybeMessage<::GetAccessToken>(Arena*);
template<> ::GetAccessTokenResponse* Arena::CreateMaybeMessage<::GetAccessTokenResponse>(Arena*);
template<> ::GetAccessTokenResponse_MetaEntry_DoNotUse* Arena::CreateMaybeMessage<::GetAccessTokenResponse_MetaEntry_DoNotUse>(Arena*);
template<> ::GetAccessToken_MetaEntry_DoNotUse* Arena::CreateMaybeMessage<::GetAccessToken_MetaEntry_DoNotUse>(Arena*);
template<> ::GetTodo* Arena::CreateMaybeMessage<::GetTodo>(Arena*);
template<> ::GetTodoResponse* Arena::CreateMaybeMessage<::GetTodoResponse>(Arena*);
template<> ::GetTodos* Arena::CreateMaybeMessage<::GetTodos>(Arena*);
template<> ::GetTodosResponse* Arena::CreateMaybeMessage<::GetTodosResponse>(Arena*);
template<> ::Hello* Arena::CreateMaybeMessage<::Hello>(Arena*);
template<> ::HelloResponse* Arena::CreateMaybeMessage<::HelloResponse>(Arena*);
template<> ::HelloSecure* Arena::CreateMaybeMessage<::HelloSecure>(Arena*);
template<> ::Register* Arena::CreateMaybeMessage<::Register>(Arena*);
template<> ::RegisterResponse* Arena::CreateMaybeMessage<::RegisterResponse>(Arena*);
template<> ::RegisterResponse_MetaEntry_DoNotUse* Arena::CreateMaybeMessage<::RegisterResponse_MetaEntry_DoNotUse>(Arena*);
template<> ::Register_MetaEntry_DoNotUse* Arena::CreateMaybeMessage<::Register_MetaEntry_DoNotUse>(Arena*);
template<> ::ResetTodos* Arena::CreateMaybeMessage<::ResetTodos>(Arena*);
template<> ::ResponseError* Arena::CreateMaybeMessage<::ResponseError>(Arena*);
template<> ::ResponseError_MetaEntry_DoNotUse* Arena::CreateMaybeMessage<::ResponseError_MetaEntry_DoNotUse>(Arena*);
template<> ::ResponseStatus* Arena::CreateMaybeMessage<::ResponseStatus>(Arena*);
template<> ::ResponseStatus_MetaEntry_DoNotUse* Arena::CreateMaybeMessage<::ResponseStatus_MetaEntry_DoNotUse>(Arena*);
template<> ::StreamFiles* Arena::CreateMaybeMessage<::StreamFiles>(Arena*);
template<> ::StreamServerEvents* Arena::CreateMaybeMessage<::StreamServerEvents>(Arena*);
template<> ::StreamServerEventsResponse* Arena::CreateMaybeMessage<::StreamServerEventsResponse>(Arena*);
template<> ::StreamServerEventsResponse_MetaEntry_DoNotUse* Arena::CreateMaybeMessage<::StreamServerEventsResponse_MetaEntry_DoNotUse>(Arena*);
template<> ::Todo* Arena::CreateMaybeMessage<::Todo>(Arena*);
template<> ::UnAssignRoles* Arena::CreateMaybeMessage<::UnAssignRoles>(Arena*);
template<> ::UnAssignRolesResponse* Arena::CreateMaybeMessage<::UnAssignRolesResponse>(Arena*);
template<> ::UnAssignRolesResponse_MetaEntry_DoNotUse* Arena::CreateMaybeMessage<::UnAssignRolesResponse_MetaEntry_DoNotUse>(Arena*);
template<> ::UnAssignRoles_MetaEntry_DoNotUse* Arena::CreateMaybeMessage<::UnAssignRoles_MetaEntry_DoNotUse>(Arena*);
template<> ::UpdateTodo* Arena::CreateMaybeMessage<::UpdateTodo>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class AssignRoles_MetaEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<AssignRoles_MetaEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<AssignRoles_MetaEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  AssignRoles_MetaEntry_DoNotUse();
  AssignRoles_MetaEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const AssignRoles_MetaEntry_DoNotUse& other);
  static const AssignRoles_MetaEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AssignRoles_MetaEntry_DoNotUse*>(&_AssignRoles_MetaEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class AssignRoles final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AssignRoles) */ {
 public:
  AssignRoles();
  virtual ~AssignRoles();

  AssignRoles(const AssignRoles& from);

  inline AssignRoles& operator=(const AssignRoles& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AssignRoles(AssignRoles&& from) noexcept
    : AssignRoles() {
    *this = ::std::move(from);
  }

  inline AssignRoles& operator=(AssignRoles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AssignRoles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AssignRoles* internal_default_instance() {
    return reinterpret_cast<const AssignRoles*>(
               &_AssignRoles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AssignRoles* other);
  friend void swap(AssignRoles& a, AssignRoles& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AssignRoles* New() const final {
    return CreateMaybeMessage<AssignRoles>(nullptr);
  }

  AssignRoles* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AssignRoles>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AssignRoles& from);
  void MergeFrom(const AssignRoles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssignRoles* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated string Permissions = 2;
  int permissions_size() const;
  void clear_permissions();
  static const int kPermissionsFieldNumber = 2;
  const ::std::string& permissions(int index) const;
  ::std::string* mutable_permissions(int index);
  void set_permissions(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_permissions(int index, ::std::string&& value);
  #endif
  void set_permissions(int index, const char* value);
  void set_permissions(int index, const char* value, size_t size);
  ::std::string* add_permissions();
  void add_permissions(const ::std::string& value);
  #if LANG_CXX11
  void add_permissions(::std::string&& value);
  #endif
  void add_permissions(const char* value);
  void add_permissions(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& permissions() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_permissions();

  // repeated string Roles = 3;
  int roles_size() const;
  void clear_roles();
  static const int kRolesFieldNumber = 3;
  const ::std::string& roles(int index) const;
  ::std::string* mutable_roles(int index);
  void set_roles(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_roles(int index, ::std::string&& value);
  #endif
  void set_roles(int index, const char* value);
  void set_roles(int index, const char* value, size_t size);
  ::std::string* add_roles();
  void add_roles(const ::std::string& value);
  #if LANG_CXX11
  void add_roles(::std::string&& value);
  #endif
  void add_roles(const char* value);
  void add_roles(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& roles() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_roles();

  // map<string, string> Meta = 4;
  int meta_size() const;
  void clear_meta();
  static const int kMetaFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      meta() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_meta();

  // string UserName = 1;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // @@protoc_insertion_point(class_scope:AssignRoles)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> permissions_;
  ::google::protobuf::RepeatedPtrField<::std::string> roles_;
  ::google::protobuf::internal::MapField<
      AssignRoles_MetaEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > meta_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_services_2eproto;
};
// -------------------------------------------------------------------

class AssignRolesResponse_MetaEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<AssignRolesResponse_MetaEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<AssignRolesResponse_MetaEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  AssignRolesResponse_MetaEntry_DoNotUse();
  AssignRolesResponse_MetaEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const AssignRolesResponse_MetaEntry_DoNotUse& other);
  static const AssignRolesResponse_MetaEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AssignRolesResponse_MetaEntry_DoNotUse*>(&_AssignRolesResponse_MetaEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class AssignRolesResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AssignRolesResponse) */ {
 public:
  AssignRolesResponse();
  virtual ~AssignRolesResponse();

  AssignRolesResponse(const AssignRolesResponse& from);

  inline AssignRolesResponse& operator=(const AssignRolesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AssignRolesResponse(AssignRolesResponse&& from) noexcept
    : AssignRolesResponse() {
    *this = ::std::move(from);
  }

  inline AssignRolesResponse& operator=(AssignRolesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AssignRolesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AssignRolesResponse* internal_default_instance() {
    return reinterpret_cast<const AssignRolesResponse*>(
               &_AssignRolesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(AssignRolesResponse* other);
  friend void swap(AssignRolesResponse& a, AssignRolesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AssignRolesResponse* New() const final {
    return CreateMaybeMessage<AssignRolesResponse>(nullptr);
  }

  AssignRolesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AssignRolesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AssignRolesResponse& from);
  void MergeFrom(const AssignRolesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssignRolesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated string AllRoles = 1;
  int allroles_size() const;
  void clear_allroles();
  static const int kAllRolesFieldNumber = 1;
  const ::std::string& allroles(int index) const;
  ::std::string* mutable_allroles(int index);
  void set_allroles(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_allroles(int index, ::std::string&& value);
  #endif
  void set_allroles(int index, const char* value);
  void set_allroles(int index, const char* value, size_t size);
  ::std::string* add_allroles();
  void add_allroles(const ::std::string& value);
  #if LANG_CXX11
  void add_allroles(::std::string&& value);
  #endif
  void add_allroles(const char* value);
  void add_allroles(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& allroles() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_allroles();

  // repeated string AllPermissions = 2;
  int allpermissions_size() const;
  void clear_allpermissions();
  static const int kAllPermissionsFieldNumber = 2;
  const ::std::string& allpermissions(int index) const;
  ::std::string* mutable_allpermissions(int index);
  void set_allpermissions(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_allpermissions(int index, ::std::string&& value);
  #endif
  void set_allpermissions(int index, const char* value);
  void set_allpermissions(int index, const char* value, size_t size);
  ::std::string* add_allpermissions();
  void add_allpermissions(const ::std::string& value);
  #if LANG_CXX11
  void add_allpermissions(::std::string&& value);
  #endif
  void add_allpermissions(const char* value);
  void add_allpermissions(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& allpermissions() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_allpermissions();

  // map<string, string> Meta = 3;
  int meta_size() const;
  void clear_meta();
  static const int kMetaFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      meta() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_meta();

  // .ResponseStatus ResponseStatus = 4;
  bool has_responsestatus() const;
  void clear_responsestatus();
  static const int kResponseStatusFieldNumber = 4;
  const ::ResponseStatus& responsestatus() const;
  ::ResponseStatus* release_responsestatus();
  ::ResponseStatus* mutable_responsestatus();
  void set_allocated_responsestatus(::ResponseStatus* responsestatus);

  // @@protoc_insertion_point(class_scope:AssignRolesResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> allroles_;
  ::google::protobuf::RepeatedPtrField<::std::string> allpermissions_;
  ::google::protobuf::internal::MapField<
      AssignRolesResponse_MetaEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > meta_;
  ::ResponseStatus* responsestatus_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_services_2eproto;
};
// -------------------------------------------------------------------

class Authenticate_MetaEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Authenticate_MetaEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<Authenticate_MetaEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Authenticate_MetaEntry_DoNotUse();
  Authenticate_MetaEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Authenticate_MetaEntry_DoNotUse& other);
  static const Authenticate_MetaEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Authenticate_MetaEntry_DoNotUse*>(&_Authenticate_MetaEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Authenticate final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Authenticate) */ {
 public:
  Authenticate();
  virtual ~Authenticate();

  Authenticate(const Authenticate& from);

  inline Authenticate& operator=(const Authenticate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Authenticate(Authenticate&& from) noexcept
    : Authenticate() {
    *this = ::std::move(from);
  }

  inline Authenticate& operator=(Authenticate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Authenticate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Authenticate* internal_default_instance() {
    return reinterpret_cast<const Authenticate*>(
               &_Authenticate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Authenticate* other);
  friend void swap(Authenticate& a, Authenticate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Authenticate* New() const final {
    return CreateMaybeMessage<Authenticate>(nullptr);
  }

  Authenticate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Authenticate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Authenticate& from);
  void MergeFrom(const Authenticate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Authenticate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> Meta = 20;
  int meta_size() const;
  void clear_meta();
  static const int kMetaFieldNumber = 20;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      meta() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_meta();

  // string provider = 1;
  void clear_provider();
  static const int kProviderFieldNumber = 1;
  const ::std::string& provider() const;
  void set_provider(const ::std::string& value);
  #if LANG_CXX11
  void set_provider(::std::string&& value);
  #endif
  void set_provider(const char* value);
  void set_provider(const char* value, size_t size);
  ::std::string* mutable_provider();
  ::std::string* release_provider();
  void set_allocated_provider(::std::string* provider);

  // string State = 2;
  void clear_state();
  static const int kStateFieldNumber = 2;
  const ::std::string& state() const;
  void set_state(const ::std::string& value);
  #if LANG_CXX11
  void set_state(::std::string&& value);
  #endif
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  ::std::string* mutable_state();
  ::std::string* release_state();
  void set_allocated_state(::std::string* state);

  // string oauth_token = 3;
  void clear_oauth_token();
  static const int kOauthTokenFieldNumber = 3;
  const ::std::string& oauth_token() const;
  void set_oauth_token(const ::std::string& value);
  #if LANG_CXX11
  void set_oauth_token(::std::string&& value);
  #endif
  void set_oauth_token(const char* value);
  void set_oauth_token(const char* value, size_t size);
  ::std::string* mutable_oauth_token();
  ::std::string* release_oauth_token();
  void set_allocated_oauth_token(::std::string* oauth_token);

  // string oauth_verifier = 4;
  void clear_oauth_verifier();
  static const int kOauthVerifierFieldNumber = 4;
  const ::std::string& oauth_verifier() const;
  void set_oauth_verifier(const ::std::string& value);
  #if LANG_CXX11
  void set_oauth_verifier(::std::string&& value);
  #endif
  void set_oauth_verifier(const char* value);
  void set_oauth_verifier(const char* value, size_t size);
  ::std::string* mutable_oauth_verifier();
  ::std::string* release_oauth_verifier();
  void set_allocated_oauth_verifier(::std::string* oauth_verifier);

  // string UserName = 5;
  void clear_username();
  static const int kUserNameFieldNumber = 5;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string Password = 6;
  void clear_password();
  static const int kPasswordFieldNumber = 6;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // string Continue = 8;
  void clear_continue_();
  static const int kContinueFieldNumber = 8;
  const ::std::string& continue_() const;
  void set_continue_(const ::std::string& value);
  #if LANG_CXX11
  void set_continue_(::std::string&& value);
  #endif
  void set_continue_(const char* value);
  void set_continue_(const char* value, size_t size);
  ::std::string* mutable_continue_();
  ::std::string* release_continue_();
  void set_allocated_continue_(::std::string* continue_);

  // string ErrorView = 9;
  void clear_errorview();
  static const int kErrorViewFieldNumber = 9;
  const ::std::string& errorview() const;
  void set_errorview(const ::std::string& value);
  #if LANG_CXX11
  void set_errorview(::std::string&& value);
  #endif
  void set_errorview(const char* value);
  void set_errorview(const char* value, size_t size);
  ::std::string* mutable_errorview();
  ::std::string* release_errorview();
  void set_allocated_errorview(::std::string* errorview);

  // string nonce = 10;
  void clear_nonce();
  static const int kNonceFieldNumber = 10;
  const ::std::string& nonce() const;
  void set_nonce(const ::std::string& value);
  #if LANG_CXX11
  void set_nonce(::std::string&& value);
  #endif
  void set_nonce(const char* value);
  void set_nonce(const char* value, size_t size);
  ::std::string* mutable_nonce();
  ::std::string* release_nonce();
  void set_allocated_nonce(::std::string* nonce);

  // string uri = 11;
  void clear_uri();
  static const int kUriFieldNumber = 11;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_uri(::std::string&& value);
  #endif
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // string response = 12;
  void clear_response();
  static const int kResponseFieldNumber = 12;
  const ::std::string& response() const;
  void set_response(const ::std::string& value);
  #if LANG_CXX11
  void set_response(::std::string&& value);
  #endif
  void set_response(const char* value);
  void set_response(const char* value, size_t size);
  ::std::string* mutable_response();
  ::std::string* release_response();
  void set_allocated_response(::std::string* response);

  // string qop = 13;
  void clear_qop();
  static const int kQopFieldNumber = 13;
  const ::std::string& qop() const;
  void set_qop(const ::std::string& value);
  #if LANG_CXX11
  void set_qop(::std::string&& value);
  #endif
  void set_qop(const char* value);
  void set_qop(const char* value, size_t size);
  ::std::string* mutable_qop();
  ::std::string* release_qop();
  void set_allocated_qop(::std::string* qop);

  // string nc = 14;
  void clear_nc();
  static const int kNcFieldNumber = 14;
  const ::std::string& nc() const;
  void set_nc(const ::std::string& value);
  #if LANG_CXX11
  void set_nc(::std::string&& value);
  #endif
  void set_nc(const char* value);
  void set_nc(const char* value, size_t size);
  ::std::string* mutable_nc();
  ::std::string* release_nc();
  void set_allocated_nc(::std::string* nc);

  // string cnonce = 15;
  void clear_cnonce();
  static const int kCnonceFieldNumber = 15;
  const ::std::string& cnonce() const;
  void set_cnonce(const ::std::string& value);
  #if LANG_CXX11
  void set_cnonce(::std::string&& value);
  #endif
  void set_cnonce(const char* value);
  void set_cnonce(const char* value, size_t size);
  ::std::string* mutable_cnonce();
  ::std::string* release_cnonce();
  void set_allocated_cnonce(::std::string* cnonce);

  // string AccessToken = 17;
  void clear_accesstoken();
  static const int kAccessTokenFieldNumber = 17;
  const ::std::string& accesstoken() const;
  void set_accesstoken(const ::std::string& value);
  #if LANG_CXX11
  void set_accesstoken(::std::string&& value);
  #endif
  void set_accesstoken(const char* value);
  void set_accesstoken(const char* value, size_t size);
  ::std::string* mutable_accesstoken();
  ::std::string* release_accesstoken();
  void set_allocated_accesstoken(::std::string* accesstoken);

  // string AccessTokenSecret = 18;
  void clear_accesstokensecret();
  static const int kAccessTokenSecretFieldNumber = 18;
  const ::std::string& accesstokensecret() const;
  void set_accesstokensecret(const ::std::string& value);
  #if LANG_CXX11
  void set_accesstokensecret(::std::string&& value);
  #endif
  void set_accesstokensecret(const char* value);
  void set_accesstokensecret(const char* value, size_t size);
  ::std::string* mutable_accesstokensecret();
  ::std::string* release_accesstokensecret();
  void set_allocated_accesstokensecret(::std::string* accesstokensecret);

  // string scope = 19;
  void clear_scope();
  static const int kScopeFieldNumber = 19;
  const ::std::string& scope() const;
  void set_scope(const ::std::string& value);
  #if LANG_CXX11
  void set_scope(::std::string&& value);
  #endif
  void set_scope(const char* value);
  void set_scope(const char* value, size_t size);
  ::std::string* mutable_scope();
  ::std::string* release_scope();
  void set_allocated_scope(::std::string* scope);

  // bool RememberMe = 7;
  void clear_rememberme();
  static const int kRememberMeFieldNumber = 7;
  bool rememberme() const;
  void set_rememberme(bool value);

  // bool UseTokenCookie = 16;
  void clear_usetokencookie();
  static const int kUseTokenCookieFieldNumber = 16;
  bool usetokencookie() const;
  void set_usetokencookie(bool value);

  // @@protoc_insertion_point(class_scope:Authenticate)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      Authenticate_MetaEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > meta_;
  ::google::protobuf::internal::ArenaStringPtr provider_;
  ::google::protobuf::internal::ArenaStringPtr state_;
  ::google::protobuf::internal::ArenaStringPtr oauth_token_;
  ::google::protobuf::internal::ArenaStringPtr oauth_verifier_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr continue__;
  ::google::protobuf::internal::ArenaStringPtr errorview_;
  ::google::protobuf::internal::ArenaStringPtr nonce_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::google::protobuf::internal::ArenaStringPtr response_;
  ::google::protobuf::internal::ArenaStringPtr qop_;
  ::google::protobuf::internal::ArenaStringPtr nc_;
  ::google::protobuf::internal::ArenaStringPtr cnonce_;
  ::google::protobuf::internal::ArenaStringPtr accesstoken_;
  ::google::protobuf::internal::ArenaStringPtr accesstokensecret_;
  ::google::protobuf::internal::ArenaStringPtr scope_;
  bool rememberme_;
  bool usetokencookie_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_services_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateResponse_MetaEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<AuthenticateResponse_MetaEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<AuthenticateResponse_MetaEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  AuthenticateResponse_MetaEntry_DoNotUse();
  AuthenticateResponse_MetaEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const AuthenticateResponse_MetaEntry_DoNotUse& other);
  static const AuthenticateResponse_MetaEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AuthenticateResponse_MetaEntry_DoNotUse*>(&_AuthenticateResponse_MetaEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class AuthenticateResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AuthenticateResponse) */ {
 public:
  AuthenticateResponse();
  virtual ~AuthenticateResponse();

  AuthenticateResponse(const AuthenticateResponse& from);

  inline AuthenticateResponse& operator=(const AuthenticateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthenticateResponse(AuthenticateResponse&& from) noexcept
    : AuthenticateResponse() {
    *this = ::std::move(from);
  }

  inline AuthenticateResponse& operator=(AuthenticateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AuthenticateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthenticateResponse* internal_default_instance() {
    return reinterpret_cast<const AuthenticateResponse*>(
               &_AuthenticateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(AuthenticateResponse* other);
  friend void swap(AuthenticateResponse& a, AuthenticateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateResponse* New() const final {
    return CreateMaybeMessage<AuthenticateResponse>(nullptr);
  }

  AuthenticateResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AuthenticateResponse& from);
  void MergeFrom(const AuthenticateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated string Roles = 9;
  int roles_size() const;
  void clear_roles();
  static const int kRolesFieldNumber = 9;
  const ::std::string& roles(int index) const;
  ::std::string* mutable_roles(int index);
  void set_roles(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_roles(int index, ::std::string&& value);
  #endif
  void set_roles(int index, const char* value);
  void set_roles(int index, const char* value, size_t size);
  ::std::string* add_roles();
  void add_roles(const ::std::string& value);
  #if LANG_CXX11
  void add_roles(::std::string&& value);
  #endif
  void add_roles(const char* value);
  void add_roles(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& roles() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_roles();

  // repeated string Permissions = 10;
  int permissions_size() const;
  void clear_permissions();
  static const int kPermissionsFieldNumber = 10;
  const ::std::string& permissions(int index) const;
  ::std::string* mutable_permissions(int index);
  void set_permissions(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_permissions(int index, ::std::string&& value);
  #endif
  void set_permissions(int index, const char* value);
  void set_permissions(int index, const char* value, size_t size);
  ::std::string* add_permissions();
  void add_permissions(const ::std::string& value);
  #if LANG_CXX11
  void add_permissions(::std::string&& value);
  #endif
  void add_permissions(const char* value);
  void add_permissions(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& permissions() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_permissions();

  // map<string, string> Meta = 12;
  int meta_size() const;
  void clear_meta();
  static const int kMetaFieldNumber = 12;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      meta() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_meta();

  // string UserId = 1;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // string SessionId = 2;
  void clear_sessionid();
  static const int kSessionIdFieldNumber = 2;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // string UserName = 3;
  void clear_username();
  static const int kUserNameFieldNumber = 3;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string DisplayName = 4;
  void clear_displayname();
  static const int kDisplayNameFieldNumber = 4;
  const ::std::string& displayname() const;
  void set_displayname(const ::std::string& value);
  #if LANG_CXX11
  void set_displayname(::std::string&& value);
  #endif
  void set_displayname(const char* value);
  void set_displayname(const char* value, size_t size);
  ::std::string* mutable_displayname();
  ::std::string* release_displayname();
  void set_allocated_displayname(::std::string* displayname);

  // string ReferrerUrl = 5;
  void clear_referrerurl();
  static const int kReferrerUrlFieldNumber = 5;
  const ::std::string& referrerurl() const;
  void set_referrerurl(const ::std::string& value);
  #if LANG_CXX11
  void set_referrerurl(::std::string&& value);
  #endif
  void set_referrerurl(const char* value);
  void set_referrerurl(const char* value, size_t size);
  ::std::string* mutable_referrerurl();
  ::std::string* release_referrerurl();
  void set_allocated_referrerurl(::std::string* referrerurl);

  // string BearerToken = 6;
  void clear_bearertoken();
  static const int kBearerTokenFieldNumber = 6;
  const ::std::string& bearertoken() const;
  void set_bearertoken(const ::std::string& value);
  #if LANG_CXX11
  void set_bearertoken(::std::string&& value);
  #endif
  void set_bearertoken(const char* value);
  void set_bearertoken(const char* value, size_t size);
  ::std::string* mutable_bearertoken();
  ::std::string* release_bearertoken();
  void set_allocated_bearertoken(::std::string* bearertoken);

  // string RefreshToken = 7;
  void clear_refreshtoken();
  static const int kRefreshTokenFieldNumber = 7;
  const ::std::string& refreshtoken() const;
  void set_refreshtoken(const ::std::string& value);
  #if LANG_CXX11
  void set_refreshtoken(::std::string&& value);
  #endif
  void set_refreshtoken(const char* value);
  void set_refreshtoken(const char* value, size_t size);
  ::std::string* mutable_refreshtoken();
  ::std::string* release_refreshtoken();
  void set_allocated_refreshtoken(::std::string* refreshtoken);

  // string ProfileUrl = 8;
  void clear_profileurl();
  static const int kProfileUrlFieldNumber = 8;
  const ::std::string& profileurl() const;
  void set_profileurl(const ::std::string& value);
  #if LANG_CXX11
  void set_profileurl(::std::string&& value);
  #endif
  void set_profileurl(const char* value);
  void set_profileurl(const char* value, size_t size);
  ::std::string* mutable_profileurl();
  ::std::string* release_profileurl();
  void set_allocated_profileurl(::std::string* profileurl);

  // .ResponseStatus ResponseStatus = 11;
  bool has_responsestatus() const;
  void clear_responsestatus();
  static const int kResponseStatusFieldNumber = 11;
  const ::ResponseStatus& responsestatus() const;
  ::ResponseStatus* release_responsestatus();
  ::ResponseStatus* mutable_responsestatus();
  void set_allocated_responsestatus(::ResponseStatus* responsestatus);

  // @@protoc_insertion_point(class_scope:AuthenticateResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> roles_;
  ::google::protobuf::RepeatedPtrField<::std::string> permissions_;
  ::google::protobuf::internal::MapField<
      AuthenticateResponse_MetaEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > meta_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr displayname_;
  ::google::protobuf::internal::ArenaStringPtr referrerurl_;
  ::google::protobuf::internal::ArenaStringPtr bearertoken_;
  ::google::protobuf::internal::ArenaStringPtr refreshtoken_;
  ::google::protobuf::internal::ArenaStringPtr profileurl_;
  ::ResponseStatus* responsestatus_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_services_2eproto;
};
// -------------------------------------------------------------------

class ConvertSessionToToken_MetaEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ConvertSessionToToken_MetaEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<ConvertSessionToToken_MetaEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ConvertSessionToToken_MetaEntry_DoNotUse();
  ConvertSessionToToken_MetaEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ConvertSessionToToken_MetaEntry_DoNotUse& other);
  static const ConvertSessionToToken_MetaEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ConvertSessionToToken_MetaEntry_DoNotUse*>(&_ConvertSessionToToken_MetaEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ConvertSessionToToken final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ConvertSessionToToken) */ {
 public:
  ConvertSessionToToken();
  virtual ~ConvertSessionToToken();

  ConvertSessionToToken(const ConvertSessionToToken& from);

  inline ConvertSessionToToken& operator=(const ConvertSessionToToken& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConvertSessionToToken(ConvertSessionToToken&& from) noexcept
    : ConvertSessionToToken() {
    *this = ::std::move(from);
  }

  inline ConvertSessionToToken& operator=(ConvertSessionToToken&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ConvertSessionToToken& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConvertSessionToToken* internal_default_instance() {
    return reinterpret_cast<const ConvertSessionToToken*>(
               &_ConvertSessionToToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(ConvertSessionToToken* other);
  friend void swap(ConvertSessionToToken& a, ConvertSessionToToken& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConvertSessionToToken* New() const final {
    return CreateMaybeMessage<ConvertSessionToToken>(nullptr);
  }

  ConvertSessionToToken* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConvertSessionToToken>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConvertSessionToToken& from);
  void MergeFrom(const ConvertSessionToToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConvertSessionToToken* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> Meta = 2;
  int meta_size() const;
  void clear_meta();
  static const int kMetaFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      meta() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_meta();

  // bool PreserveSession = 1;
  void clear_preservesession();
  static const int kPreserveSessionFieldNumber = 1;
  bool preservesession() const;
  void set_preservesession(bool value);

  // @@protoc_insertion_point(class_scope:ConvertSessionToToken)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      ConvertSessionToToken_MetaEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > meta_;
  bool preservesession_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_services_2eproto;
};
// -------------------------------------------------------------------

class ConvertSessionToTokenResponse_MetaEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ConvertSessionToTokenResponse_MetaEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<ConvertSessionToTokenResponse_MetaEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ConvertSessionToTokenResponse_MetaEntry_DoNotUse();
  ConvertSessionToTokenResponse_MetaEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ConvertSessionToTokenResponse_MetaEntry_DoNotUse& other);
  static const ConvertSessionToTokenResponse_MetaEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ConvertSessionToTokenResponse_MetaEntry_DoNotUse*>(&_ConvertSessionToTokenResponse_MetaEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ConvertSessionToTokenResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ConvertSessionToTokenResponse) */ {
 public:
  ConvertSessionToTokenResponse();
  virtual ~ConvertSessionToTokenResponse();

  ConvertSessionToTokenResponse(const ConvertSessionToTokenResponse& from);

  inline ConvertSessionToTokenResponse& operator=(const ConvertSessionToTokenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConvertSessionToTokenResponse(ConvertSessionToTokenResponse&& from) noexcept
    : ConvertSessionToTokenResponse() {
    *this = ::std::move(from);
  }

  inline ConvertSessionToTokenResponse& operator=(ConvertSessionToTokenResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ConvertSessionToTokenResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConvertSessionToTokenResponse* internal_default_instance() {
    return reinterpret_cast<const ConvertSessionToTokenResponse*>(
               &_ConvertSessionToTokenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(ConvertSessionToTokenResponse* other);
  friend void swap(ConvertSessionToTokenResponse& a, ConvertSessionToTokenResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConvertSessionToTokenResponse* New() const final {
    return CreateMaybeMessage<ConvertSessionToTokenResponse>(nullptr);
  }

  ConvertSessionToTokenResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConvertSessionToTokenResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConvertSessionToTokenResponse& from);
  void MergeFrom(const ConvertSessionToTokenResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConvertSessionToTokenResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> Meta = 1;
  int meta_size() const;
  void clear_meta();
  static const int kMetaFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      meta() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_meta();

  // string AccessToken = 2;
  void clear_accesstoken();
  static const int kAccessTokenFieldNumber = 2;
  const ::std::string& accesstoken() const;
  void set_accesstoken(const ::std::string& value);
  #if LANG_CXX11
  void set_accesstoken(::std::string&& value);
  #endif
  void set_accesstoken(const char* value);
  void set_accesstoken(const char* value, size_t size);
  ::std::string* mutable_accesstoken();
  ::std::string* release_accesstoken();
  void set_allocated_accesstoken(::std::string* accesstoken);

  // string RefreshToken = 3;
  void clear_refreshtoken();
  static const int kRefreshTokenFieldNumber = 3;
  const ::std::string& refreshtoken() const;
  void set_refreshtoken(const ::std::string& value);
  #if LANG_CXX11
  void set_refreshtoken(::std::string&& value);
  #endif
  void set_refreshtoken(const char* value);
  void set_refreshtoken(const char* value, size_t size);
  ::std::string* mutable_refreshtoken();
  ::std::string* release_refreshtoken();
  void set_allocated_refreshtoken(::std::string* refreshtoken);

  // .ResponseStatus ResponseStatus = 4;
  bool has_responsestatus() const;
  void clear_responsestatus();
  static const int kResponseStatusFieldNumber = 4;
  const ::ResponseStatus& responsestatus() const;
  ::ResponseStatus* release_responsestatus();
  ::ResponseStatus* mutable_responsestatus();
  void set_allocated_responsestatus(::ResponseStatus* responsestatus);

  // @@protoc_insertion_point(class_scope:ConvertSessionToTokenResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      ConvertSessionToTokenResponse_MetaEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > meta_;
  ::google::protobuf::internal::ArenaStringPtr accesstoken_;
  ::google::protobuf::internal::ArenaStringPtr refreshtoken_;
  ::ResponseStatus* responsestatus_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_services_2eproto;
};
// -------------------------------------------------------------------

class CreateTodo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CreateTodo) */ {
 public:
  CreateTodo();
  virtual ~CreateTodo();

  CreateTodo(const CreateTodo& from);

  inline CreateTodo& operator=(const CreateTodo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateTodo(CreateTodo&& from) noexcept
    : CreateTodo() {
    *this = ::std::move(from);
  }

  inline CreateTodo& operator=(CreateTodo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CreateTodo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateTodo* internal_default_instance() {
    return reinterpret_cast<const CreateTodo*>(
               &_CreateTodo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(CreateTodo* other);
  friend void swap(CreateTodo& a, CreateTodo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateTodo* New() const final {
    return CreateMaybeMessage<CreateTodo>(nullptr);
  }

  CreateTodo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateTodo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateTodo& from);
  void MergeFrom(const CreateTodo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTodo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Title = 1;
  void clear_title();
  static const int kTitleFieldNumber = 1;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // int32 Order = 2;
  void clear_order();
  static const int kOrderFieldNumber = 2;
  ::google::protobuf::int32 order() const;
  void set_order(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CreateTodo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::int32 order_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_services_2eproto;
};
// -------------------------------------------------------------------

class CreateTodoResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CreateTodoResponse) */ {
 public:
  CreateTodoResponse();
  virtual ~CreateTodoResponse();

  CreateTodoResponse(const CreateTodoResponse& from);

  inline CreateTodoResponse& operator=(const CreateTodoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateTodoResponse(CreateTodoResponse&& from) noexcept
    : CreateTodoResponse() {
    *this = ::std::move(from);
  }

  inline CreateTodoResponse& operator=(CreateTodoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CreateTodoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateTodoResponse* internal_default_instance() {
    return reinterpret_cast<const CreateTodoResponse*>(
               &_CreateTodoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(CreateTodoResponse* other);
  friend void swap(CreateTodoResponse& a, CreateTodoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateTodoResponse* New() const final {
    return CreateMaybeMessage<CreateTodoResponse>(nullptr);
  }

  CreateTodoResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateTodoResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateTodoResponse& from);
  void MergeFrom(const CreateTodoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTodoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Todo Result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  const ::Todo& result() const;
  ::Todo* release_result();
  ::Todo* mutable_result();
  void set_allocated_result(::Todo* result);

  // .ResponseStatus ResponseStatus = 2;
  bool has_responsestatus() const;
  void clear_responsestatus();
  static const int kResponseStatusFieldNumber = 2;
  const ::ResponseStatus& responsestatus() const;
  ::ResponseStatus* release_responsestatus();
  ::ResponseStatus* mutable_responsestatus();
  void set_allocated_responsestatus(::ResponseStatus* responsestatus);

  // @@protoc_insertion_point(class_scope:CreateTodoResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Todo* result_;
  ::ResponseStatus* responsestatus_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_services_2eproto;
};
// -------------------------------------------------------------------

class DeleteTodo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DeleteTodo) */ {
 public:
  DeleteTodo();
  virtual ~DeleteTodo();

  DeleteTodo(const DeleteTodo& from);

  inline DeleteTodo& operator=(const DeleteTodo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteTodo(DeleteTodo&& from) noexcept
    : DeleteTodo() {
    *this = ::std::move(from);
  }

  inline DeleteTodo& operator=(DeleteTodo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DeleteTodo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteTodo* internal_default_instance() {
    return reinterpret_cast<const DeleteTodo*>(
               &_DeleteTodo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(DeleteTodo* other);
  friend void swap(DeleteTodo& a, DeleteTodo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteTodo* New() const final {
    return CreateMaybeMessage<DeleteTodo>(nullptr);
  }

  DeleteTodo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteTodo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteTodo& from);
  void MergeFrom(const DeleteTodo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteTodo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:DeleteTodo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_services_2eproto;
};
// -------------------------------------------------------------------

class DeleteTodos final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DeleteTodos) */ {
 public:
  DeleteTodos();
  virtual ~DeleteTodos();

  DeleteTodos(const DeleteTodos& from);

  inline DeleteTodos& operator=(const DeleteTodos& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteTodos(DeleteTodos&& from) noexcept
    : DeleteTodos() {
    *this = ::std::move(from);
  }

  inline DeleteTodos& operator=(DeleteTodos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DeleteTodos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteTodos* internal_default_instance() {
    return reinterpret_cast<const DeleteTodos*>(
               &_DeleteTodos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(DeleteTodos* other);
  friend void swap(DeleteTodos& a, DeleteTodos& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteTodos* New() const final {
    return CreateMaybeMessage<DeleteTodos>(nullptr);
  }

  DeleteTodos* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteTodos>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteTodos& from);
  void MergeFrom(const DeleteTodos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteTodos* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 Ids = 1 [packed = false];
  int ids_size() const;
  void clear_ids();
  static const int kIdsFieldNumber = 1;
  ::google::protobuf::int64 ids(int index) const;
  void set_ids(int index, ::google::protobuf::int64 value);
  void add_ids(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_ids();

  // @@protoc_insertion_point(class_scope:DeleteTodos)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > ids_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_services_2eproto;
};
// -------------------------------------------------------------------

class EmptyResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:EmptyResponse) */ {
 public:
  EmptyResponse();
  virtual ~EmptyResponse();

  EmptyResponse(const EmptyResponse& from);

  inline EmptyResponse& operator=(const EmptyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EmptyResponse(EmptyResponse&& from) noexcept
    : EmptyResponse() {
    *this = ::std::move(from);
  }

  inline EmptyResponse& operator=(EmptyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const EmptyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmptyResponse* internal_default_instance() {
    return reinterpret_cast<const EmptyResponse*>(
               &_EmptyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(EmptyResponse* other);
  friend void swap(EmptyResponse& a, EmptyResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EmptyResponse* New() const final {
    return CreateMaybeMessage<EmptyResponse>(nullptr);
  }

  EmptyResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EmptyResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EmptyResponse& from);
  void MergeFrom(const EmptyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmptyResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ResponseStatus ResponseStatus = 1;
  bool has_responsestatus() const;
  void clear_responsestatus();
  static const int kResponseStatusFieldNumber = 1;
  const ::ResponseStatus& responsestatus() const;
  ::ResponseStatus* release_responsestatus();
  ::ResponseStatus* mutable_responsestatus();
  void set_allocated_responsestatus(::ResponseStatus* responsestatus);

  // @@protoc_insertion_point(class_scope:EmptyResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ResponseStatus* responsestatus_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_services_2eproto;
};
// -------------------------------------------------------------------

class FileContent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FileContent) */ {
 public:
  FileContent();
  virtual ~FileContent();

  FileContent(const FileContent& from);

  inline FileContent& operator=(const FileContent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileContent(FileContent&& from) noexcept
    : FileContent() {
    *this = ::std::move(from);
  }

  inline FileContent& operator=(FileContent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FileContent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileContent* internal_default_instance() {
    return reinterpret_cast<const FileContent*>(
               &_FileContent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(FileContent* other);
  friend void swap(FileContent& a, FileContent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileContent* New() const final {
    return CreateMaybeMessage<FileContent>(nullptr);
  }

  FileContent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileContent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FileContent& from);
  void MergeFrom(const FileContent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileContent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string Type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // bytes Body = 4;
  void clear_body();
  static const int kBodyFieldNumber = 4;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  #if LANG_CXX11
  void set_body(::std::string&& value);
  #endif
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // .ResponseStatus ResponseStatus = 5;
  bool has_responsestatus() const;
  void clear_responsestatus();
  static const int kResponseStatusFieldNumber = 5;
  const ::ResponseStatus& responsestatus() const;
  ::ResponseStatus* release_responsestatus();
  ::ResponseStatus* mutable_responsestatus();
  void set_allocated_responsestatus(::ResponseStatus* responsestatus);

  // int32 Length = 3;
  void clear_length();
  static const int kLengthFieldNumber = 3;
  ::google::protobuf::int32 length() const;
  void set_length(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FileContent)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  ::ResponseStatus* responsestatus_;
  ::google::protobuf::int32 length_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_services_2eproto;
};
// -------------------------------------------------------------------

class GetAccessToken_MetaEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<GetAccessToken_MetaEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<GetAccessToken_MetaEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  GetAccessToken_MetaEntry_DoNotUse();
  GetAccessToken_MetaEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const GetAccessToken_MetaEntry_DoNotUse& other);
  static const GetAccessToken_MetaEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetAccessToken_MetaEntry_DoNotUse*>(&_GetAccessToken_MetaEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class GetAccessToken final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GetAccessToken) */ {
 public:
  GetAccessToken();
  virtual ~GetAccessToken();

  GetAccessToken(const GetAccessToken& from);

  inline GetAccessToken& operator=(const GetAccessToken& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetAccessToken(GetAccessToken&& from) noexcept
    : GetAccessToken() {
    *this = ::std::move(from);
  }

  inline GetAccessToken& operator=(GetAccessToken&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetAccessToken& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAccessToken* internal_default_instance() {
    return reinterpret_cast<const GetAccessToken*>(
               &_GetAccessToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(GetAccessToken* other);
  friend void swap(GetAccessToken& a, GetAccessToken& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetAccessToken* New() const final {
    return CreateMaybeMessage<GetAccessToken>(nullptr);
  }

  GetAccessToken* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetAccessToken>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetAccessToken& from);
  void MergeFrom(const GetAccessToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAccessToken* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> Meta = 3;
  int meta_size() const;
  void clear_meta();
  static const int kMetaFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      meta() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_meta();

  // string RefreshToken = 1;
  void clear_refreshtoken();
  static const int kRefreshTokenFieldNumber = 1;
  const ::std::string& refreshtoken() const;
  void set_refreshtoken(const ::std::string& value);
  #if LANG_CXX11
  void set_refreshtoken(::std::string&& value);
  #endif
  void set_refreshtoken(const char* value);
  void set_refreshtoken(const char* value, size_t size);
  ::std::string* mutable_refreshtoken();
  ::std::string* release_refreshtoken();
  void set_allocated_refreshtoken(::std::string* refreshtoken);

  // bool UseTokenCookie = 2;
  void clear_usetokencookie();
  static const int kUseTokenCookieFieldNumber = 2;
  bool usetokencookie() const;
  void set_usetokencookie(bool value);

  // @@protoc_insertion_point(class_scope:GetAccessToken)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      GetAccessToken_MetaEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > meta_;
  ::google::protobuf::internal::ArenaStringPtr refreshtoken_;
  bool usetokencookie_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_services_2eproto;
};
// -------------------------------------------------------------------

class GetAccessTokenResponse_MetaEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<GetAccessTokenResponse_MetaEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<GetAccessTokenResponse_MetaEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  GetAccessTokenResponse_MetaEntry_DoNotUse();
  GetAccessTokenResponse_MetaEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const GetAccessTokenResponse_MetaEntry_DoNotUse& other);
  static const GetAccessTokenResponse_MetaEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetAccessTokenResponse_MetaEntry_DoNotUse*>(&_GetAccessTokenResponse_MetaEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class GetAccessTokenResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GetAccessTokenResponse) */ {
 public:
  GetAccessTokenResponse();
  virtual ~GetAccessTokenResponse();

  GetAccessTokenResponse(const GetAccessTokenResponse& from);

  inline GetAccessTokenResponse& operator=(const GetAccessTokenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetAccessTokenResponse(GetAccessTokenResponse&& from) noexcept
    : GetAccessTokenResponse() {
    *this = ::std::move(from);
  }

  inline GetAccessTokenResponse& operator=(GetAccessTokenResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetAccessTokenResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAccessTokenResponse* internal_default_instance() {
    return reinterpret_cast<const GetAccessTokenResponse*>(
               &_GetAccessTokenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(GetAccessTokenResponse* other);
  friend void swap(GetAccessTokenResponse& a, GetAccessTokenResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetAccessTokenResponse* New() const final {
    return CreateMaybeMessage<GetAccessTokenResponse>(nullptr);
  }

  GetAccessTokenResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetAccessTokenResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetAccessTokenResponse& from);
  void MergeFrom(const GetAccessTokenResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAccessTokenResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> Meta = 2;
  int meta_size() const;
  void clear_meta();
  static const int kMetaFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      meta() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_meta();

  // string AccessToken = 1;
  void clear_accesstoken();
  static const int kAccessTokenFieldNumber = 1;
  const ::std::string& accesstoken() const;
  void set_accesstoken(const ::std::string& value);
  #if LANG_CXX11
  void set_accesstoken(::std::string&& value);
  #endif
  void set_accesstoken(const char* value);
  void set_accesstoken(const char* value, size_t size);
  ::std::string* mutable_accesstoken();
  ::std::string* release_accesstoken();
  void set_allocated_accesstoken(::std::string* accesstoken);

  // .ResponseStatus ResponseStatus = 3;
  bool has_responsestatus() const;
  void clear_responsestatus();
  static const int kResponseStatusFieldNumber = 3;
  const ::ResponseStatus& responsestatus() const;
  ::ResponseStatus* release_responsestatus();
  ::ResponseStatus* mutable_responsestatus();
  void set_allocated_responsestatus(::ResponseStatus* responsestatus);

  // @@protoc_insertion_point(class_scope:GetAccessTokenResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      GetAccessTokenResponse_MetaEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > meta_;
  ::google::protobuf::internal::ArenaStringPtr accesstoken_;
  ::ResponseStatus* responsestatus_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_services_2eproto;
};
// -------------------------------------------------------------------

class GetTodo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GetTodo) */ {
 public:
  GetTodo();
  virtual ~GetTodo();

  GetTodo(const GetTodo& from);

  inline GetTodo& operator=(const GetTodo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetTodo(GetTodo&& from) noexcept
    : GetTodo() {
    *this = ::std::move(from);
  }

  inline GetTodo& operator=(GetTodo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetTodo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTodo* internal_default_instance() {
    return reinterpret_cast<const GetTodo*>(
               &_GetTodo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(GetTodo* other);
  friend void swap(GetTodo& a, GetTodo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTodo* New() const final {
    return CreateMaybeMessage<GetTodo>(nullptr);
  }

  GetTodo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetTodo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetTodo& from);
  void MergeFrom(const GetTodo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTodo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:GetTodo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_services_2eproto;
};
// -------------------------------------------------------------------

class GetTodoResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GetTodoResponse) */ {
 public:
  GetTodoResponse();
  virtual ~GetTodoResponse();

  GetTodoResponse(const GetTodoResponse& from);

  inline GetTodoResponse& operator=(const GetTodoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetTodoResponse(GetTodoResponse&& from) noexcept
    : GetTodoResponse() {
    *this = ::std::move(from);
  }

  inline GetTodoResponse& operator=(GetTodoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetTodoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTodoResponse* internal_default_instance() {
    return reinterpret_cast<const GetTodoResponse*>(
               &_GetTodoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(GetTodoResponse* other);
  friend void swap(GetTodoResponse& a, GetTodoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTodoResponse* New() const final {
    return CreateMaybeMessage<GetTodoResponse>(nullptr);
  }

  GetTodoResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetTodoResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetTodoResponse& from);
  void MergeFrom(const GetTodoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTodoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Todo Result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  const ::Todo& result() const;
  ::Todo* release_result();
  ::Todo* mutable_result();
  void set_allocated_result(::Todo* result);

  // .ResponseStatus ResponseStatus = 2;
  bool has_responsestatus() const;
  void clear_responsestatus();
  static const int kResponseStatusFieldNumber = 2;
  const ::ResponseStatus& responsestatus() const;
  ::ResponseStatus* release_responsestatus();
  ::ResponseStatus* mutable_responsestatus();
  void set_allocated_responsestatus(::ResponseStatus* responsestatus);

  // @@protoc_insertion_point(class_scope:GetTodoResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Todo* result_;
  ::ResponseStatus* responsestatus_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_services_2eproto;
};
// -------------------------------------------------------------------

class GetTodos final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GetTodos) */ {
 public:
  GetTodos();
  virtual ~GetTodos();

  GetTodos(const GetTodos& from);

  inline GetTodos& operator=(const GetTodos& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetTodos(GetTodos&& from) noexcept
    : GetTodos() {
    *this = ::std::move(from);
  }

  inline GetTodos& operator=(GetTodos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetTodos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTodos* internal_default_instance() {
    return reinterpret_cast<const GetTodos*>(
               &_GetTodos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(GetTodos* other);
  friend void swap(GetTodos& a, GetTodos& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTodos* New() const final {
    return CreateMaybeMessage<GetTodos>(nullptr);
  }

  GetTodos* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetTodos>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetTodos& from);
  void MergeFrom(const GetTodos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTodos* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:GetTodos)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_services_2eproto;
};
// -------------------------------------------------------------------

class GetTodosResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GetTodosResponse) */ {
 public:
  GetTodosResponse();
  virtual ~GetTodosResponse();

  GetTodosResponse(const GetTodosResponse& from);

  inline GetTodosResponse& operator=(const GetTodosResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetTodosResponse(GetTodosResponse&& from) noexcept
    : GetTodosResponse() {
    *this = ::std::move(from);
  }

  inline GetTodosResponse& operator=(GetTodosResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetTodosResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTodosResponse* internal_default_instance() {
    return reinterpret_cast<const GetTodosResponse*>(
               &_GetTodosResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(GetTodosResponse* other);
  friend void swap(GetTodosResponse& a, GetTodosResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTodosResponse* New() const final {
    return CreateMaybeMessage<GetTodosResponse>(nullptr);
  }

  GetTodosResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetTodosResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetTodosResponse& from);
  void MergeFrom(const GetTodosResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTodosResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Todo Results = 1;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 1;
  ::Todo* mutable_results(int index);
  ::google::protobuf::RepeatedPtrField< ::Todo >*
      mutable_results();
  const ::Todo& results(int index) const;
  ::Todo* add_results();
  const ::google::protobuf::RepeatedPtrField< ::Todo >&
      results() const;

  // .ResponseStatus ResponseStatus = 2;
  bool has_responsestatus() const;
  void clear_responsestatus();
  static const int kResponseStatusFieldNumber = 2;
  const ::ResponseStatus& responsestatus() const;
  ::ResponseStatus* release_responsestatus();
  ::ResponseStatus* mutable_responsestatus();
  void set_allocated_responsestatus(::ResponseStatus* responsestatus);

  // @@protoc_insertion_point(class_scope:GetTodosResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Todo > results_;
  ::ResponseStatus* responsestatus_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_services_2eproto;
};
// -------------------------------------------------------------------

class Hello final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Hello) */ {
 public:
  Hello();
  virtual ~Hello();

  Hello(const Hello& from);

  inline Hello& operator=(const Hello& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Hello(Hello&& from) noexcept
    : Hello() {
    *this = ::std::move(from);
  }

  inline Hello& operator=(Hello&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Hello& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Hello* internal_default_instance() {
    return reinterpret_cast<const Hello*>(
               &_Hello_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(Hello* other);
  friend void swap(Hello& a, Hello& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Hello* New() const final {
    return CreateMaybeMessage<Hello>(nullptr);
  }

  Hello* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Hello>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Hello& from);
  void MergeFrom(const Hello& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Hello* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:Hello)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_services_2eproto;
};
// -------------------------------------------------------------------

class HelloResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HelloResponse) */ {
 public:
  HelloResponse();
  virtual ~HelloResponse();

  HelloResponse(const HelloResponse& from);

  inline HelloResponse& operator=(const HelloResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HelloResponse(HelloResponse&& from) noexcept
    : HelloResponse() {
    *this = ::std::move(from);
  }

  inline HelloResponse& operator=(HelloResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const HelloResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HelloResponse* internal_default_instance() {
    return reinterpret_cast<const HelloResponse*>(
               &_HelloResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(HelloResponse* other);
  friend void swap(HelloResponse& a, HelloResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HelloResponse* New() const final {
    return CreateMaybeMessage<HelloResponse>(nullptr);
  }

  HelloResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HelloResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HelloResponse& from);
  void MergeFrom(const HelloResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  const ::std::string& result() const;
  void set_result(const ::std::string& value);
  #if LANG_CXX11
  void set_result(::std::string&& value);
  #endif
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  ::std::string* mutable_result();
  ::std::string* release_result();
  void set_allocated_result(::std::string* result);

  // .ResponseStatus ResponseStatus = 2;
  bool has_responsestatus() const;
  void clear_responsestatus();
  static const int kResponseStatusFieldNumber = 2;
  const ::ResponseStatus& responsestatus() const;
  ::ResponseStatus* release_responsestatus();
  ::ResponseStatus* mutable_responsestatus();
  void set_allocated_responsestatus(::ResponseStatus* responsestatus);

  // @@protoc_insertion_point(class_scope:HelloResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr result_;
  ::ResponseStatus* responsestatus_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_services_2eproto;
};
// -------------------------------------------------------------------

class HelloSecure final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HelloSecure) */ {
 public:
  HelloSecure();
  virtual ~HelloSecure();

  HelloSecure(const HelloSecure& from);

  inline HelloSecure& operator=(const HelloSecure& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HelloSecure(HelloSecure&& from) noexcept
    : HelloSecure() {
    *this = ::std::move(from);
  }

  inline HelloSecure& operator=(HelloSecure&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const HelloSecure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HelloSecure* internal_default_instance() {
    return reinterpret_cast<const HelloSecure*>(
               &_HelloSecure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(HelloSecure* other);
  friend void swap(HelloSecure& a, HelloSecure& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HelloSecure* New() const final {
    return CreateMaybeMessage<HelloSecure>(nullptr);
  }

  HelloSecure* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HelloSecure>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HelloSecure& from);
  void MergeFrom(const HelloSecure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloSecure* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:HelloSecure)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_services_2eproto;
};
// -------------------------------------------------------------------

class Register_MetaEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Register_MetaEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<Register_MetaEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Register_MetaEntry_DoNotUse();
  Register_MetaEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Register_MetaEntry_DoNotUse& other);
  static const Register_MetaEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Register_MetaEntry_DoNotUse*>(&_Register_MetaEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Register final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Register) */ {
 public:
  Register();
  virtual ~Register();

  Register(const Register& from);

  inline Register& operator=(const Register& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Register(Register&& from) noexcept
    : Register() {
    *this = ::std::move(from);
  }

  inline Register& operator=(Register&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Register& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Register* internal_default_instance() {
    return reinterpret_cast<const Register*>(
               &_Register_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(Register* other);
  friend void swap(Register& a, Register& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Register* New() const final {
    return CreateMaybeMessage<Register>(nullptr);
  }

  Register* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Register>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Register& from);
  void MergeFrom(const Register& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Register* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> Meta = 11;
  int meta_size() const;
  void clear_meta();
  static const int kMetaFieldNumber = 11;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      meta() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_meta();

  // string UserName = 1;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string FirstName = 2;
  void clear_firstname();
  static const int kFirstNameFieldNumber = 2;
  const ::std::string& firstname() const;
  void set_firstname(const ::std::string& value);
  #if LANG_CXX11
  void set_firstname(::std::string&& value);
  #endif
  void set_firstname(const char* value);
  void set_firstname(const char* value, size_t size);
  ::std::string* mutable_firstname();
  ::std::string* release_firstname();
  void set_allocated_firstname(::std::string* firstname);

  // string LastName = 3;
  void clear_lastname();
  static const int kLastNameFieldNumber = 3;
  const ::std::string& lastname() const;
  void set_lastname(const ::std::string& value);
  #if LANG_CXX11
  void set_lastname(::std::string&& value);
  #endif
  void set_lastname(const char* value);
  void set_lastname(const char* value, size_t size);
  ::std::string* mutable_lastname();
  ::std::string* release_lastname();
  void set_allocated_lastname(::std::string* lastname);

  // string DisplayName = 4;
  void clear_displayname();
  static const int kDisplayNameFieldNumber = 4;
  const ::std::string& displayname() const;
  void set_displayname(const ::std::string& value);
  #if LANG_CXX11
  void set_displayname(::std::string&& value);
  #endif
  void set_displayname(const char* value);
  void set_displayname(const char* value, size_t size);
  ::std::string* mutable_displayname();
  ::std::string* release_displayname();
  void set_allocated_displayname(::std::string* displayname);

  // string Email = 5;
  void clear_email();
  static const int kEmailFieldNumber = 5;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // string Password = 6;
  void clear_password();
  static const int kPasswordFieldNumber = 6;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // string ConfirmPassword = 7;
  void clear_confirmpassword();
  static const int kConfirmPasswordFieldNumber = 7;
  const ::std::string& confirmpassword() const;
  void set_confirmpassword(const ::std::string& value);
  #if LANG_CXX11
  void set_confirmpassword(::std::string&& value);
  #endif
  void set_confirmpassword(const char* value);
  void set_confirmpassword(const char* value, size_t size);
  ::std::string* mutable_confirmpassword();
  ::std::string* release_confirmpassword();
  void set_allocated_confirmpassword(::std::string* confirmpassword);

  // string Continue = 9;
  void clear_continue_();
  static const int kContinueFieldNumber = 9;
  const ::std::string& continue_() const;
  void set_continue_(const ::std::string& value);
  #if LANG_CXX11
  void set_continue_(::std::string&& value);
  #endif
  void set_continue_(const char* value);
  void set_continue_(const char* value, size_t size);
  ::std::string* mutable_continue_();
  ::std::string* release_continue_();
  void set_allocated_continue_(::std::string* continue_);

  // string ErrorView = 10;
  void clear_errorview();
  static const int kErrorViewFieldNumber = 10;
  const ::std::string& errorview() const;
  void set_errorview(const ::std::string& value);
  #if LANG_CXX11
  void set_errorview(::std::string&& value);
  #endif
  void set_errorview(const char* value);
  void set_errorview(const char* value, size_t size);
  ::std::string* mutable_errorview();
  ::std::string* release_errorview();
  void set_allocated_errorview(::std::string* errorview);

  // bool AutoLogin = 8;
  void clear_autologin();
  static const int kAutoLoginFieldNumber = 8;
  bool autologin() const;
  void set_autologin(bool value);

  // @@protoc_insertion_point(class_scope:Register)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      Register_MetaEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > meta_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr firstname_;
  ::google::protobuf::internal::ArenaStringPtr lastname_;
  ::google::protobuf::internal::ArenaStringPtr displayname_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr confirmpassword_;
  ::google::protobuf::internal::ArenaStringPtr continue__;
  ::google::protobuf::internal::ArenaStringPtr errorview_;
  bool autologin_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_services_2eproto;
};
// -------------------------------------------------------------------

class RegisterResponse_MetaEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<RegisterResponse_MetaEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<RegisterResponse_MetaEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  RegisterResponse_MetaEntry_DoNotUse();
  RegisterResponse_MetaEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const RegisterResponse_MetaEntry_DoNotUse& other);
  static const RegisterResponse_MetaEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RegisterResponse_MetaEntry_DoNotUse*>(&_RegisterResponse_MetaEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class RegisterResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RegisterResponse) */ {
 public:
  RegisterResponse();
  virtual ~RegisterResponse();

  RegisterResponse(const RegisterResponse& from);

  inline RegisterResponse& operator=(const RegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegisterResponse(RegisterResponse&& from) noexcept
    : RegisterResponse() {
    *this = ::std::move(from);
  }

  inline RegisterResponse& operator=(RegisterResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RegisterResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterResponse*>(
               &_RegisterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(RegisterResponse* other);
  friend void swap(RegisterResponse& a, RegisterResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterResponse* New() const final {
    return CreateMaybeMessage<RegisterResponse>(nullptr);
  }

  RegisterResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegisterResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegisterResponse& from);
  void MergeFrom(const RegisterResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> Meta = 8;
  int meta_size() const;
  void clear_meta();
  static const int kMetaFieldNumber = 8;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      meta() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_meta();

  // string UserId = 1;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // string SessionId = 2;
  void clear_sessionid();
  static const int kSessionIdFieldNumber = 2;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // string UserName = 3;
  void clear_username();
  static const int kUserNameFieldNumber = 3;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string ReferrerUrl = 4;
  void clear_referrerurl();
  static const int kReferrerUrlFieldNumber = 4;
  const ::std::string& referrerurl() const;
  void set_referrerurl(const ::std::string& value);
  #if LANG_CXX11
  void set_referrerurl(::std::string&& value);
  #endif
  void set_referrerurl(const char* value);
  void set_referrerurl(const char* value, size_t size);
  ::std::string* mutable_referrerurl();
  ::std::string* release_referrerurl();
  void set_allocated_referrerurl(::std::string* referrerurl);

  // string BearerToken = 5;
  void clear_bearertoken();
  static const int kBearerTokenFieldNumber = 5;
  const ::std::string& bearertoken() const;
  void set_bearertoken(const ::std::string& value);
  #if LANG_CXX11
  void set_bearertoken(::std::string&& value);
  #endif
  void set_bearertoken(const char* value);
  void set_bearertoken(const char* value, size_t size);
  ::std::string* mutable_bearertoken();
  ::std::string* release_bearertoken();
  void set_allocated_bearertoken(::std::string* bearertoken);

  // string RefreshToken = 6;
  void clear_refreshtoken();
  static const int kRefreshTokenFieldNumber = 6;
  const ::std::string& refreshtoken() const;
  void set_refreshtoken(const ::std::string& value);
  #if LANG_CXX11
  void set_refreshtoken(::std::string&& value);
  #endif
  void set_refreshtoken(const char* value);
  void set_refreshtoken(const char* value, size_t size);
  ::std::string* mutable_refreshtoken();
  ::std::string* release_refreshtoken();
  void set_allocated_refreshtoken(::std::string* refreshtoken);

  // .ResponseStatus ResponseStatus = 7;
  bool has_responsestatus() const;
  void clear_responsestatus();
  static const int kResponseStatusFieldNumber = 7;
  const ::ResponseStatus& responsestatus() const;
  ::ResponseStatus* release_responsestatus();
  ::ResponseStatus* mutable_responsestatus();
  void set_allocated_responsestatus(::ResponseStatus* responsestatus);

  // @@protoc_insertion_point(class_scope:RegisterResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      RegisterResponse_MetaEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > meta_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr referrerurl_;
  ::google::protobuf::internal::ArenaStringPtr bearertoken_;
  ::google::protobuf::internal::ArenaStringPtr refreshtoken_;
  ::ResponseStatus* responsestatus_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_services_2eproto;
};
// -------------------------------------------------------------------

class ResetTodos final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ResetTodos) */ {
 public:
  ResetTodos();
  virtual ~ResetTodos();

  ResetTodos(const ResetTodos& from);

  inline ResetTodos& operator=(const ResetTodos& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResetTodos(ResetTodos&& from) noexcept
    : ResetTodos() {
    *this = ::std::move(from);
  }

  inline ResetTodos& operator=(ResetTodos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ResetTodos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResetTodos* internal_default_instance() {
    return reinterpret_cast<const ResetTodos*>(
               &_ResetTodos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(ResetTodos* other);
  friend void swap(ResetTodos& a, ResetTodos& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResetTodos* New() const final {
    return CreateMaybeMessage<ResetTodos>(nullptr);
  }

  ResetTodos* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResetTodos>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResetTodos& from);
  void MergeFrom(const ResetTodos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetTodos* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ResetTodos)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_services_2eproto;
};
// -------------------------------------------------------------------

class ResponseError_MetaEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ResponseError_MetaEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<ResponseError_MetaEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ResponseError_MetaEntry_DoNotUse();
  ResponseError_MetaEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ResponseError_MetaEntry_DoNotUse& other);
  static const ResponseError_MetaEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ResponseError_MetaEntry_DoNotUse*>(&_ResponseError_MetaEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ResponseError final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ResponseError) */ {
 public:
  ResponseError();
  virtual ~ResponseError();

  ResponseError(const ResponseError& from);

  inline ResponseError& operator=(const ResponseError& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResponseError(ResponseError&& from) noexcept
    : ResponseError() {
    *this = ::std::move(from);
  }

  inline ResponseError& operator=(ResponseError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ResponseError& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseError* internal_default_instance() {
    return reinterpret_cast<const ResponseError*>(
               &_ResponseError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(ResponseError* other);
  friend void swap(ResponseError& a, ResponseError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResponseError* New() const final {
    return CreateMaybeMessage<ResponseError>(nullptr);
  }

  ResponseError* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResponseError>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResponseError& from);
  void MergeFrom(const ResponseError& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> Meta = 4;
  int meta_size() const;
  void clear_meta();
  static const int kMetaFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      meta() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_meta();

  // string ErrorCode = 1;
  void clear_errorcode();
  static const int kErrorCodeFieldNumber = 1;
  const ::std::string& errorcode() const;
  void set_errorcode(const ::std::string& value);
  #if LANG_CXX11
  void set_errorcode(::std::string&& value);
  #endif
  void set_errorcode(const char* value);
  void set_errorcode(const char* value, size_t size);
  ::std::string* mutable_errorcode();
  ::std::string* release_errorcode();
  void set_allocated_errorcode(::std::string* errorcode);

  // string FieldName = 2;
  void clear_fieldname();
  static const int kFieldNameFieldNumber = 2;
  const ::std::string& fieldname() const;
  void set_fieldname(const ::std::string& value);
  #if LANG_CXX11
  void set_fieldname(::std::string&& value);
  #endif
  void set_fieldname(const char* value);
  void set_fieldname(const char* value, size_t size);
  ::std::string* mutable_fieldname();
  ::std::string* release_fieldname();
  void set_allocated_fieldname(::std::string* fieldname);

  // string Message = 3;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:ResponseError)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      ResponseError_MetaEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > meta_;
  ::google::protobuf::internal::ArenaStringPtr errorcode_;
  ::google::protobuf::internal::ArenaStringPtr fieldname_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_services_2eproto;
};
// -------------------------------------------------------------------

class ResponseStatus_MetaEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ResponseStatus_MetaEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<ResponseStatus_MetaEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ResponseStatus_MetaEntry_DoNotUse();
  ResponseStatus_MetaEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ResponseStatus_MetaEntry_DoNotUse& other);
  static const ResponseStatus_MetaEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ResponseStatus_MetaEntry_DoNotUse*>(&_ResponseStatus_MetaEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ResponseStatus final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ResponseStatus) */ {
 public:
  ResponseStatus();
  virtual ~ResponseStatus();

  ResponseStatus(const ResponseStatus& from);

  inline ResponseStatus& operator=(const ResponseStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResponseStatus(ResponseStatus&& from) noexcept
    : ResponseStatus() {
    *this = ::std::move(from);
  }

  inline ResponseStatus& operator=(ResponseStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ResponseStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseStatus* internal_default_instance() {
    return reinterpret_cast<const ResponseStatus*>(
               &_ResponseStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(ResponseStatus* other);
  friend void swap(ResponseStatus& a, ResponseStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResponseStatus* New() const final {
    return CreateMaybeMessage<ResponseStatus>(nullptr);
  }

  ResponseStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResponseStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResponseStatus& from);
  void MergeFrom(const ResponseStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated .ResponseError Errors = 4;
  int errors_size() const;
  void clear_errors();
  static const int kErrorsFieldNumber = 4;
  ::ResponseError* mutable_errors(int index);
  ::google::protobuf::RepeatedPtrField< ::ResponseError >*
      mutable_errors();
  const ::ResponseError& errors(int index) const;
  ::ResponseError* add_errors();
  const ::google::protobuf::RepeatedPtrField< ::ResponseError >&
      errors() const;

  // map<string, string> Meta = 5;
  int meta_size() const;
  void clear_meta();
  static const int kMetaFieldNumber = 5;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      meta() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_meta();

  // string ErrorCode = 1;
  void clear_errorcode();
  static const int kErrorCodeFieldNumber = 1;
  const ::std::string& errorcode() const;
  void set_errorcode(const ::std::string& value);
  #if LANG_CXX11
  void set_errorcode(::std::string&& value);
  #endif
  void set_errorcode(const char* value);
  void set_errorcode(const char* value, size_t size);
  ::std::string* mutable_errorcode();
  ::std::string* release_errorcode();
  void set_allocated_errorcode(::std::string* errorcode);

  // string Message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // string StackTrace = 3;
  void clear_stacktrace();
  static const int kStackTraceFieldNumber = 3;
  const ::std::string& stacktrace() const;
  void set_stacktrace(const ::std::string& value);
  #if LANG_CXX11
  void set_stacktrace(::std::string&& value);
  #endif
  void set_stacktrace(const char* value);
  void set_stacktrace(const char* value, size_t size);
  ::std::string* mutable_stacktrace();
  ::std::string* release_stacktrace();
  void set_allocated_stacktrace(::std::string* stacktrace);

  // @@protoc_insertion_point(class_scope:ResponseStatus)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ResponseError > errors_;
  ::google::protobuf::internal::MapField<
      ResponseStatus_MetaEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > meta_;
  ::google::protobuf::internal::ArenaStringPtr errorcode_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::internal::ArenaStringPtr stacktrace_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_services_2eproto;
};
// -------------------------------------------------------------------

class StreamFiles final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StreamFiles) */ {
 public:
  StreamFiles();
  virtual ~StreamFiles();

  StreamFiles(const StreamFiles& from);

  inline StreamFiles& operator=(const StreamFiles& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StreamFiles(StreamFiles&& from) noexcept
    : StreamFiles() {
    *this = ::std::move(from);
  }

  inline StreamFiles& operator=(StreamFiles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StreamFiles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamFiles* internal_default_instance() {
    return reinterpret_cast<const StreamFiles*>(
               &_StreamFiles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(StreamFiles* other);
  friend void swap(StreamFiles& a, StreamFiles& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StreamFiles* New() const final {
    return CreateMaybeMessage<StreamFiles>(nullptr);
  }

  StreamFiles* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StreamFiles>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StreamFiles& from);
  void MergeFrom(const StreamFiles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamFiles* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string Paths = 1;
  int paths_size() const;
  void clear_paths();
  static const int kPathsFieldNumber = 1;
  const ::std::string& paths(int index) const;
  ::std::string* mutable_paths(int index);
  void set_paths(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_paths(int index, ::std::string&& value);
  #endif
  void set_paths(int index, const char* value);
  void set_paths(int index, const char* value, size_t size);
  ::std::string* add_paths();
  void add_paths(const ::std::string& value);
  #if LANG_CXX11
  void add_paths(::std::string&& value);
  #endif
  void add_paths(const char* value);
  void add_paths(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& paths() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_paths();

  // @@protoc_insertion_point(class_scope:StreamFiles)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> paths_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_services_2eproto;
};
// -------------------------------------------------------------------

class StreamServerEvents final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StreamServerEvents) */ {
 public:
  StreamServerEvents();
  virtual ~StreamServerEvents();

  StreamServerEvents(const StreamServerEvents& from);

  inline StreamServerEvents& operator=(const StreamServerEvents& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StreamServerEvents(StreamServerEvents&& from) noexcept
    : StreamServerEvents() {
    *this = ::std::move(from);
  }

  inline StreamServerEvents& operator=(StreamServerEvents&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StreamServerEvents& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamServerEvents* internal_default_instance() {
    return reinterpret_cast<const StreamServerEvents*>(
               &_StreamServerEvents_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void Swap(StreamServerEvents* other);
  friend void swap(StreamServerEvents& a, StreamServerEvents& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StreamServerEvents* New() const final {
    return CreateMaybeMessage<StreamServerEvents>(nullptr);
  }

  StreamServerEvents* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StreamServerEvents>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StreamServerEvents& from);
  void MergeFrom(const StreamServerEvents& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamServerEvents* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string Channels = 1;
  int channels_size() const;
  void clear_channels();
  static const int kChannelsFieldNumber = 1;
  const ::std::string& channels(int index) const;
  ::std::string* mutable_channels(int index);
  void set_channels(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_channels(int index, ::std::string&& value);
  #endif
  void set_channels(int index, const char* value);
  void set_channels(int index, const char* value, size_t size);
  ::std::string* add_channels();
  void add_channels(const ::std::string& value);
  #if LANG_CXX11
  void add_channels(::std::string&& value);
  #endif
  void add_channels(const char* value);
  void add_channels(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& channels() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_channels();

  // @@protoc_insertion_point(class_scope:StreamServerEvents)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> channels_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_services_2eproto;
};
// -------------------------------------------------------------------

class StreamServerEventsResponse_MetaEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<StreamServerEventsResponse_MetaEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<StreamServerEventsResponse_MetaEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  StreamServerEventsResponse_MetaEntry_DoNotUse();
  StreamServerEventsResponse_MetaEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const StreamServerEventsResponse_MetaEntry_DoNotUse& other);
  static const StreamServerEventsResponse_MetaEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const StreamServerEventsResponse_MetaEntry_DoNotUse*>(&_StreamServerEventsResponse_MetaEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class StreamServerEventsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StreamServerEventsResponse) */ {
 public:
  StreamServerEventsResponse();
  virtual ~StreamServerEventsResponse();

  StreamServerEventsResponse(const StreamServerEventsResponse& from);

  inline StreamServerEventsResponse& operator=(const StreamServerEventsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StreamServerEventsResponse(StreamServerEventsResponse&& from) noexcept
    : StreamServerEventsResponse() {
    *this = ::std::move(from);
  }

  inline StreamServerEventsResponse& operator=(StreamServerEventsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StreamServerEventsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamServerEventsResponse* internal_default_instance() {
    return reinterpret_cast<const StreamServerEventsResponse*>(
               &_StreamServerEventsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  void Swap(StreamServerEventsResponse* other);
  friend void swap(StreamServerEventsResponse& a, StreamServerEventsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StreamServerEventsResponse* New() const final {
    return CreateMaybeMessage<StreamServerEventsResponse>(nullptr);
  }

  StreamServerEventsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StreamServerEventsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StreamServerEventsResponse& from);
  void MergeFrom(const StreamServerEventsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamServerEventsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> Meta = 9;
  int meta_size() const;
  void clear_meta();
  static const int kMetaFieldNumber = 9;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      meta() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_meta();

  // repeated string Channels = 14;
  int channels_size() const;
  void clear_channels();
  static const int kChannelsFieldNumber = 14;
  const ::std::string& channels(int index) const;
  ::std::string* mutable_channels(int index);
  void set_channels(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_channels(int index, ::std::string&& value);
  #endif
  void set_channels(int index, const char* value);
  void set_channels(int index, const char* value, size_t size);
  ::std::string* add_channels();
  void add_channels(const ::std::string& value);
  #if LANG_CXX11
  void add_channels(::std::string&& value);
  #endif
  void add_channels(const char* value);
  void add_channels(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& channels() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_channels();

  // string Channel = 2;
  void clear_channel();
  static const int kChannelFieldNumber = 2;
  const ::std::string& channel() const;
  void set_channel(const ::std::string& value);
  #if LANG_CXX11
  void set_channel(::std::string&& value);
  #endif
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  ::std::string* mutable_channel();
  ::std::string* release_channel();
  void set_allocated_channel(::std::string* channel);

  // string Selector = 4;
  void clear_selector();
  static const int kSelectorFieldNumber = 4;
  const ::std::string& selector() const;
  void set_selector(const ::std::string& value);
  #if LANG_CXX11
  void set_selector(::std::string&& value);
  #endif
  void set_selector(const char* value);
  void set_selector(const char* value, size_t size);
  ::std::string* mutable_selector();
  ::std::string* release_selector();
  void set_allocated_selector(::std::string* selector);

  // string Json = 5;
  void clear_json();
  static const int kJsonFieldNumber = 5;
  const ::std::string& json() const;
  void set_json(const ::std::string& value);
  #if LANG_CXX11
  void set_json(::std::string&& value);
  #endif
  void set_json(const char* value);
  void set_json(const char* value, size_t size);
  ::std::string* mutable_json();
  ::std::string* release_json();
  void set_allocated_json(::std::string* json);

  // string Op = 6;
  void clear_op();
  static const int kOpFieldNumber = 6;
  const ::std::string& op() const;
  void set_op(const ::std::string& value);
  #if LANG_CXX11
  void set_op(::std::string&& value);
  #endif
  void set_op(const char* value);
  void set_op(const char* value, size_t size);
  ::std::string* mutable_op();
  ::std::string* release_op();
  void set_allocated_op(::std::string* op);

  // string Target = 7;
  void clear_target();
  static const int kTargetFieldNumber = 7;
  const ::std::string& target() const;
  void set_target(const ::std::string& value);
  #if LANG_CXX11
  void set_target(::std::string&& value);
  #endif
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  ::std::string* mutable_target();
  ::std::string* release_target();
  void set_allocated_target(::std::string* target);

  // string CssSelector = 8;
  void clear_cssselector();
  static const int kCssSelectorFieldNumber = 8;
  const ::std::string& cssselector() const;
  void set_cssselector(const ::std::string& value);
  #if LANG_CXX11
  void set_cssselector(::std::string&& value);
  #endif
  void set_cssselector(const char* value);
  void set_cssselector(const char* value, size_t size);
  ::std::string* mutable_cssselector();
  ::std::string* release_cssselector();
  void set_allocated_cssselector(::std::string* cssselector);

  // string UserId = 10;
  void clear_userid();
  static const int kUserIdFieldNumber = 10;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // string DisplayName = 11;
  void clear_displayname();
  static const int kDisplayNameFieldNumber = 11;
  const ::std::string& displayname() const;
  void set_displayname(const ::std::string& value);
  #if LANG_CXX11
  void set_displayname(::std::string&& value);
  #endif
  void set_displayname(const char* value);
  void set_displayname(const char* value, size_t size);
  ::std::string* mutable_displayname();
  ::std::string* release_displayname();
  void set_allocated_displayname(::std::string* displayname);

  // string ProfileUrl = 12;
  void clear_profileurl();
  static const int kProfileUrlFieldNumber = 12;
  const ::std::string& profileurl() const;
  void set_profileurl(const ::std::string& value);
  #if LANG_CXX11
  void set_profileurl(::std::string&& value);
  #endif
  void set_profileurl(const char* value);
  void set_profileurl(const char* value, size_t size);
  ::std::string* mutable_profileurl();
  ::std::string* release_profileurl();
  void set_allocated_profileurl(::std::string* profileurl);

  // string Id = 21;
  void clear_id();
  static const int kIdFieldNumber = 21;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string UnRegisterUrl = 22;
  void clear_unregisterurl();
  static const int kUnRegisterUrlFieldNumber = 22;
  const ::std::string& unregisterurl() const;
  void set_unregisterurl(const ::std::string& value);
  #if LANG_CXX11
  void set_unregisterurl(::std::string&& value);
  #endif
  void set_unregisterurl(const char* value);
  void set_unregisterurl(const char* value, size_t size);
  ::std::string* mutable_unregisterurl();
  ::std::string* release_unregisterurl();
  void set_allocated_unregisterurl(::std::string* unregisterurl);

  // string UpdateSubscriberUrl = 23;
  void clear_updatesubscriberurl();
  static const int kUpdateSubscriberUrlFieldNumber = 23;
  const ::std::string& updatesubscriberurl() const;
  void set_updatesubscriberurl(const ::std::string& value);
  #if LANG_CXX11
  void set_updatesubscriberurl(::std::string&& value);
  #endif
  void set_updatesubscriberurl(const char* value);
  void set_updatesubscriberurl(const char* value, size_t size);
  ::std::string* mutable_updatesubscriberurl();
  ::std::string* release_updatesubscriberurl();
  void set_allocated_updatesubscriberurl(::std::string* updatesubscriberurl);

  // string HeartbeatUrl = 24;
  void clear_heartbeaturl();
  static const int kHeartbeatUrlFieldNumber = 24;
  const ::std::string& heartbeaturl() const;
  void set_heartbeaturl(const ::std::string& value);
  #if LANG_CXX11
  void set_heartbeaturl(::std::string&& value);
  #endif
  void set_heartbeaturl(const char* value);
  void set_heartbeaturl(const char* value, size_t size);
  ::std::string* mutable_heartbeaturl();
  ::std::string* release_heartbeaturl();
  void set_allocated_heartbeaturl(::std::string* heartbeaturl);

  // .ResponseStatus ResponseStatus = 30;
  bool has_responsestatus() const;
  void clear_responsestatus();
  static const int kResponseStatusFieldNumber = 30;
  const ::ResponseStatus& responsestatus() const;
  ::ResponseStatus* release_responsestatus();
  ::ResponseStatus* mutable_responsestatus();
  void set_allocated_responsestatus(::ResponseStatus* responsestatus);

  // int64 EventId = 1;
  void clear_eventid();
  static const int kEventIdFieldNumber = 1;
  ::google::protobuf::int64 eventid() const;
  void set_eventid(::google::protobuf::int64 value);

  // int64 CreatedAt = 15;
  void clear_createdat();
  static const int kCreatedAtFieldNumber = 15;
  ::google::protobuf::int64 createdat() const;
  void set_createdat(::google::protobuf::int64 value);

  // bool IsAuthenticated = 13;
  void clear_isauthenticated();
  static const int kIsAuthenticatedFieldNumber = 13;
  bool isauthenticated() const;
  void set_isauthenticated(bool value);

  // int64 HeartbeatIntervalMs = 25;
  void clear_heartbeatintervalms();
  static const int kHeartbeatIntervalMsFieldNumber = 25;
  ::google::protobuf::int64 heartbeatintervalms() const;
  void set_heartbeatintervalms(::google::protobuf::int64 value);

  // int64 IdleTimeoutMs = 26;
  void clear_idletimeoutms();
  static const int kIdleTimeoutMsFieldNumber = 26;
  ::google::protobuf::int64 idletimeoutms() const;
  void set_idletimeoutms(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:StreamServerEventsResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      StreamServerEventsResponse_MetaEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > meta_;
  ::google::protobuf::RepeatedPtrField<::std::string> channels_;
  ::google::protobuf::internal::ArenaStringPtr channel_;
  ::google::protobuf::internal::ArenaStringPtr selector_;
  ::google::protobuf::internal::ArenaStringPtr json_;
  ::google::protobuf::internal::ArenaStringPtr op_;
  ::google::protobuf::internal::ArenaStringPtr target_;
  ::google::protobuf::internal::ArenaStringPtr cssselector_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr displayname_;
  ::google::protobuf::internal::ArenaStringPtr profileurl_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr unregisterurl_;
  ::google::protobuf::internal::ArenaStringPtr updatesubscriberurl_;
  ::google::protobuf::internal::ArenaStringPtr heartbeaturl_;
  ::ResponseStatus* responsestatus_;
  ::google::protobuf::int64 eventid_;
  ::google::protobuf::int64 createdat_;
  bool isauthenticated_;
  ::google::protobuf::int64 heartbeatintervalms_;
  ::google::protobuf::int64 idletimeoutms_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_services_2eproto;
};
// -------------------------------------------------------------------

class Todo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Todo) */ {
 public:
  Todo();
  virtual ~Todo();

  Todo(const Todo& from);

  inline Todo& operator=(const Todo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Todo(Todo&& from) noexcept
    : Todo() {
    *this = ::std::move(from);
  }

  inline Todo& operator=(Todo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Todo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Todo* internal_default_instance() {
    return reinterpret_cast<const Todo*>(
               &_Todo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  void Swap(Todo* other);
  friend void swap(Todo& a, Todo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Todo* New() const final {
    return CreateMaybeMessage<Todo>(nullptr);
  }

  Todo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Todo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Todo& from);
  void MergeFrom(const Todo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Todo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // int64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // int32 Order = 3;
  void clear_order();
  static const int kOrderFieldNumber = 3;
  ::google::protobuf::int32 order() const;
  void set_order(::google::protobuf::int32 value);

  // bool Completed = 4;
  void clear_completed();
  static const int kCompletedFieldNumber = 4;
  bool completed() const;
  void set_completed(bool value);

  // @@protoc_insertion_point(class_scope:Todo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 order_;
  bool completed_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_services_2eproto;
};
// -------------------------------------------------------------------

class UnAssignRoles_MetaEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<UnAssignRoles_MetaEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<UnAssignRoles_MetaEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  UnAssignRoles_MetaEntry_DoNotUse();
  UnAssignRoles_MetaEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const UnAssignRoles_MetaEntry_DoNotUse& other);
  static const UnAssignRoles_MetaEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const UnAssignRoles_MetaEntry_DoNotUse*>(&_UnAssignRoles_MetaEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class UnAssignRoles final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:UnAssignRoles) */ {
 public:
  UnAssignRoles();
  virtual ~UnAssignRoles();

  UnAssignRoles(const UnAssignRoles& from);

  inline UnAssignRoles& operator=(const UnAssignRoles& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnAssignRoles(UnAssignRoles&& from) noexcept
    : UnAssignRoles() {
    *this = ::std::move(from);
  }

  inline UnAssignRoles& operator=(UnAssignRoles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UnAssignRoles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnAssignRoles* internal_default_instance() {
    return reinterpret_cast<const UnAssignRoles*>(
               &_UnAssignRoles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  void Swap(UnAssignRoles* other);
  friend void swap(UnAssignRoles& a, UnAssignRoles& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnAssignRoles* New() const final {
    return CreateMaybeMessage<UnAssignRoles>(nullptr);
  }

  UnAssignRoles* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UnAssignRoles>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UnAssignRoles& from);
  void MergeFrom(const UnAssignRoles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnAssignRoles* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated string Permissions = 2;
  int permissions_size() const;
  void clear_permissions();
  static const int kPermissionsFieldNumber = 2;
  const ::std::string& permissions(int index) const;
  ::std::string* mutable_permissions(int index);
  void set_permissions(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_permissions(int index, ::std::string&& value);
  #endif
  void set_permissions(int index, const char* value);
  void set_permissions(int index, const char* value, size_t size);
  ::std::string* add_permissions();
  void add_permissions(const ::std::string& value);
  #if LANG_CXX11
  void add_permissions(::std::string&& value);
  #endif
  void add_permissions(const char* value);
  void add_permissions(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& permissions() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_permissions();

  // repeated string Roles = 3;
  int roles_size() const;
  void clear_roles();
  static const int kRolesFieldNumber = 3;
  const ::std::string& roles(int index) const;
  ::std::string* mutable_roles(int index);
  void set_roles(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_roles(int index, ::std::string&& value);
  #endif
  void set_roles(int index, const char* value);
  void set_roles(int index, const char* value, size_t size);
  ::std::string* add_roles();
  void add_roles(const ::std::string& value);
  #if LANG_CXX11
  void add_roles(::std::string&& value);
  #endif
  void add_roles(const char* value);
  void add_roles(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& roles() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_roles();

  // map<string, string> Meta = 4;
  int meta_size() const;
  void clear_meta();
  static const int kMetaFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      meta() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_meta();

  // string UserName = 1;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // @@protoc_insertion_point(class_scope:UnAssignRoles)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> permissions_;
  ::google::protobuf::RepeatedPtrField<::std::string> roles_;
  ::google::protobuf::internal::MapField<
      UnAssignRoles_MetaEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > meta_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_services_2eproto;
};
// -------------------------------------------------------------------

class UnAssignRolesResponse_MetaEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<UnAssignRolesResponse_MetaEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<UnAssignRolesResponse_MetaEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  UnAssignRolesResponse_MetaEntry_DoNotUse();
  UnAssignRolesResponse_MetaEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const UnAssignRolesResponse_MetaEntry_DoNotUse& other);
  static const UnAssignRolesResponse_MetaEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const UnAssignRolesResponse_MetaEntry_DoNotUse*>(&_UnAssignRolesResponse_MetaEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class UnAssignRolesResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:UnAssignRolesResponse) */ {
 public:
  UnAssignRolesResponse();
  virtual ~UnAssignRolesResponse();

  UnAssignRolesResponse(const UnAssignRolesResponse& from);

  inline UnAssignRolesResponse& operator=(const UnAssignRolesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnAssignRolesResponse(UnAssignRolesResponse&& from) noexcept
    : UnAssignRolesResponse() {
    *this = ::std::move(from);
  }

  inline UnAssignRolesResponse& operator=(UnAssignRolesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UnAssignRolesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnAssignRolesResponse* internal_default_instance() {
    return reinterpret_cast<const UnAssignRolesResponse*>(
               &_UnAssignRolesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  void Swap(UnAssignRolesResponse* other);
  friend void swap(UnAssignRolesResponse& a, UnAssignRolesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnAssignRolesResponse* New() const final {
    return CreateMaybeMessage<UnAssignRolesResponse>(nullptr);
  }

  UnAssignRolesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UnAssignRolesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UnAssignRolesResponse& from);
  void MergeFrom(const UnAssignRolesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnAssignRolesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated string AllRoles = 1;
  int allroles_size() const;
  void clear_allroles();
  static const int kAllRolesFieldNumber = 1;
  const ::std::string& allroles(int index) const;
  ::std::string* mutable_allroles(int index);
  void set_allroles(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_allroles(int index, ::std::string&& value);
  #endif
  void set_allroles(int index, const char* value);
  void set_allroles(int index, const char* value, size_t size);
  ::std::string* add_allroles();
  void add_allroles(const ::std::string& value);
  #if LANG_CXX11
  void add_allroles(::std::string&& value);
  #endif
  void add_allroles(const char* value);
  void add_allroles(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& allroles() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_allroles();

  // repeated string AllPermissions = 2;
  int allpermissions_size() const;
  void clear_allpermissions();
  static const int kAllPermissionsFieldNumber = 2;
  const ::std::string& allpermissions(int index) const;
  ::std::string* mutable_allpermissions(int index);
  void set_allpermissions(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_allpermissions(int index, ::std::string&& value);
  #endif
  void set_allpermissions(int index, const char* value);
  void set_allpermissions(int index, const char* value, size_t size);
  ::std::string* add_allpermissions();
  void add_allpermissions(const ::std::string& value);
  #if LANG_CXX11
  void add_allpermissions(::std::string&& value);
  #endif
  void add_allpermissions(const char* value);
  void add_allpermissions(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& allpermissions() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_allpermissions();

  // map<string, string> Meta = 3;
  int meta_size() const;
  void clear_meta();
  static const int kMetaFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      meta() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_meta();

  // .ResponseStatus ResponseStatus = 4;
  bool has_responsestatus() const;
  void clear_responsestatus();
  static const int kResponseStatusFieldNumber = 4;
  const ::ResponseStatus& responsestatus() const;
  ::ResponseStatus* release_responsestatus();
  ::ResponseStatus* mutable_responsestatus();
  void set_allocated_responsestatus(::ResponseStatus* responsestatus);

  // @@protoc_insertion_point(class_scope:UnAssignRolesResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> allroles_;
  ::google::protobuf::RepeatedPtrField<::std::string> allpermissions_;
  ::google::protobuf::internal::MapField<
      UnAssignRolesResponse_MetaEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > meta_;
  ::ResponseStatus* responsestatus_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_services_2eproto;
};
// -------------------------------------------------------------------

class UpdateTodo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:UpdateTodo) */ {
 public:
  UpdateTodo();
  virtual ~UpdateTodo();

  UpdateTodo(const UpdateTodo& from);

  inline UpdateTodo& operator=(const UpdateTodo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateTodo(UpdateTodo&& from) noexcept
    : UpdateTodo() {
    *this = ::std::move(from);
  }

  inline UpdateTodo& operator=(UpdateTodo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UpdateTodo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateTodo* internal_default_instance() {
    return reinterpret_cast<const UpdateTodo*>(
               &_UpdateTodo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  void Swap(UpdateTodo* other);
  friend void swap(UpdateTodo& a, UpdateTodo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateTodo* New() const final {
    return CreateMaybeMessage<UpdateTodo>(nullptr);
  }

  UpdateTodo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateTodo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateTodo& from);
  void MergeFrom(const UpdateTodo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateTodo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // int64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // int32 Order = 3;
  void clear_order();
  static const int kOrderFieldNumber = 3;
  ::google::protobuf::int32 order() const;
  void set_order(::google::protobuf::int32 value);

  // bool Completed = 4;
  void clear_completed();
  static const int kCompletedFieldNumber = 4;
  bool completed() const;
  void set_completed(bool value);

  // @@protoc_insertion_point(class_scope:UpdateTodo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 order_;
  bool completed_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_services_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AssignRoles

// string UserName = 1;
inline void AssignRoles::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AssignRoles::username() const {
  // @@protoc_insertion_point(field_get:AssignRoles.UserName)
  return username_.GetNoArena();
}
inline void AssignRoles::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AssignRoles.UserName)
}
#if LANG_CXX11
inline void AssignRoles::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AssignRoles.UserName)
}
#endif
inline void AssignRoles::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AssignRoles.UserName)
}
inline void AssignRoles::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AssignRoles.UserName)
}
inline ::std::string* AssignRoles::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:AssignRoles.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AssignRoles::release_username() {
  // @@protoc_insertion_point(field_release:AssignRoles.UserName)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AssignRoles::set_allocated_username(::std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:AssignRoles.UserName)
}

// repeated string Permissions = 2;
inline int AssignRoles::permissions_size() const {
  return permissions_.size();
}
inline void AssignRoles::clear_permissions() {
  permissions_.Clear();
}
inline const ::std::string& AssignRoles::permissions(int index) const {
  // @@protoc_insertion_point(field_get:AssignRoles.Permissions)
  return permissions_.Get(index);
}
inline ::std::string* AssignRoles::mutable_permissions(int index) {
  // @@protoc_insertion_point(field_mutable:AssignRoles.Permissions)
  return permissions_.Mutable(index);
}
inline void AssignRoles::set_permissions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:AssignRoles.Permissions)
  permissions_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void AssignRoles::set_permissions(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:AssignRoles.Permissions)
  permissions_.Mutable(index)->assign(std::move(value));
}
#endif
inline void AssignRoles::set_permissions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  permissions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AssignRoles.Permissions)
}
inline void AssignRoles::set_permissions(int index, const char* value, size_t size) {
  permissions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AssignRoles.Permissions)
}
inline ::std::string* AssignRoles::add_permissions() {
  // @@protoc_insertion_point(field_add_mutable:AssignRoles.Permissions)
  return permissions_.Add();
}
inline void AssignRoles::add_permissions(const ::std::string& value) {
  permissions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AssignRoles.Permissions)
}
#if LANG_CXX11
inline void AssignRoles::add_permissions(::std::string&& value) {
  permissions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AssignRoles.Permissions)
}
#endif
inline void AssignRoles::add_permissions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  permissions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AssignRoles.Permissions)
}
inline void AssignRoles::add_permissions(const char* value, size_t size) {
  permissions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AssignRoles.Permissions)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
AssignRoles::permissions() const {
  // @@protoc_insertion_point(field_list:AssignRoles.Permissions)
  return permissions_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
AssignRoles::mutable_permissions() {
  // @@protoc_insertion_point(field_mutable_list:AssignRoles.Permissions)
  return &permissions_;
}

// repeated string Roles = 3;
inline int AssignRoles::roles_size() const {
  return roles_.size();
}
inline void AssignRoles::clear_roles() {
  roles_.Clear();
}
inline const ::std::string& AssignRoles::roles(int index) const {
  // @@protoc_insertion_point(field_get:AssignRoles.Roles)
  return roles_.Get(index);
}
inline ::std::string* AssignRoles::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:AssignRoles.Roles)
  return roles_.Mutable(index);
}
inline void AssignRoles::set_roles(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:AssignRoles.Roles)
  roles_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void AssignRoles::set_roles(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:AssignRoles.Roles)
  roles_.Mutable(index)->assign(std::move(value));
}
#endif
inline void AssignRoles::set_roles(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  roles_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AssignRoles.Roles)
}
inline void AssignRoles::set_roles(int index, const char* value, size_t size) {
  roles_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AssignRoles.Roles)
}
inline ::std::string* AssignRoles::add_roles() {
  // @@protoc_insertion_point(field_add_mutable:AssignRoles.Roles)
  return roles_.Add();
}
inline void AssignRoles::add_roles(const ::std::string& value) {
  roles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AssignRoles.Roles)
}
#if LANG_CXX11
inline void AssignRoles::add_roles(::std::string&& value) {
  roles_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AssignRoles.Roles)
}
#endif
inline void AssignRoles::add_roles(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  roles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AssignRoles.Roles)
}
inline void AssignRoles::add_roles(const char* value, size_t size) {
  roles_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AssignRoles.Roles)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
AssignRoles::roles() const {
  // @@protoc_insertion_point(field_list:AssignRoles.Roles)
  return roles_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
AssignRoles::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:AssignRoles.Roles)
  return &roles_;
}

// map<string, string> Meta = 4;
inline int AssignRoles::meta_size() const {
  return meta_.size();
}
inline void AssignRoles::clear_meta() {
  meta_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
AssignRoles::meta() const {
  // @@protoc_insertion_point(field_map:AssignRoles.Meta)
  return meta_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
AssignRoles::mutable_meta() {
  // @@protoc_insertion_point(field_mutable_map:AssignRoles.Meta)
  return meta_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AssignRolesResponse

// repeated string AllRoles = 1;
inline int AssignRolesResponse::allroles_size() const {
  return allroles_.size();
}
inline void AssignRolesResponse::clear_allroles() {
  allroles_.Clear();
}
inline const ::std::string& AssignRolesResponse::allroles(int index) const {
  // @@protoc_insertion_point(field_get:AssignRolesResponse.AllRoles)
  return allroles_.Get(index);
}
inline ::std::string* AssignRolesResponse::mutable_allroles(int index) {
  // @@protoc_insertion_point(field_mutable:AssignRolesResponse.AllRoles)
  return allroles_.Mutable(index);
}
inline void AssignRolesResponse::set_allroles(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:AssignRolesResponse.AllRoles)
  allroles_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void AssignRolesResponse::set_allroles(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:AssignRolesResponse.AllRoles)
  allroles_.Mutable(index)->assign(std::move(value));
}
#endif
inline void AssignRolesResponse::set_allroles(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  allroles_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AssignRolesResponse.AllRoles)
}
inline void AssignRolesResponse::set_allroles(int index, const char* value, size_t size) {
  allroles_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AssignRolesResponse.AllRoles)
}
inline ::std::string* AssignRolesResponse::add_allroles() {
  // @@protoc_insertion_point(field_add_mutable:AssignRolesResponse.AllRoles)
  return allroles_.Add();
}
inline void AssignRolesResponse::add_allroles(const ::std::string& value) {
  allroles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AssignRolesResponse.AllRoles)
}
#if LANG_CXX11
inline void AssignRolesResponse::add_allroles(::std::string&& value) {
  allroles_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AssignRolesResponse.AllRoles)
}
#endif
inline void AssignRolesResponse::add_allroles(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  allroles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AssignRolesResponse.AllRoles)
}
inline void AssignRolesResponse::add_allroles(const char* value, size_t size) {
  allroles_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AssignRolesResponse.AllRoles)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
AssignRolesResponse::allroles() const {
  // @@protoc_insertion_point(field_list:AssignRolesResponse.AllRoles)
  return allroles_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
AssignRolesResponse::mutable_allroles() {
  // @@protoc_insertion_point(field_mutable_list:AssignRolesResponse.AllRoles)
  return &allroles_;
}

// repeated string AllPermissions = 2;
inline int AssignRolesResponse::allpermissions_size() const {
  return allpermissions_.size();
}
inline void AssignRolesResponse::clear_allpermissions() {
  allpermissions_.Clear();
}
inline const ::std::string& AssignRolesResponse::allpermissions(int index) const {
  // @@protoc_insertion_point(field_get:AssignRolesResponse.AllPermissions)
  return allpermissions_.Get(index);
}
inline ::std::string* AssignRolesResponse::mutable_allpermissions(int index) {
  // @@protoc_insertion_point(field_mutable:AssignRolesResponse.AllPermissions)
  return allpermissions_.Mutable(index);
}
inline void AssignRolesResponse::set_allpermissions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:AssignRolesResponse.AllPermissions)
  allpermissions_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void AssignRolesResponse::set_allpermissions(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:AssignRolesResponse.AllPermissions)
  allpermissions_.Mutable(index)->assign(std::move(value));
}
#endif
inline void AssignRolesResponse::set_allpermissions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  allpermissions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AssignRolesResponse.AllPermissions)
}
inline void AssignRolesResponse::set_allpermissions(int index, const char* value, size_t size) {
  allpermissions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AssignRolesResponse.AllPermissions)
}
inline ::std::string* AssignRolesResponse::add_allpermissions() {
  // @@protoc_insertion_point(field_add_mutable:AssignRolesResponse.AllPermissions)
  return allpermissions_.Add();
}
inline void AssignRolesResponse::add_allpermissions(const ::std::string& value) {
  allpermissions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AssignRolesResponse.AllPermissions)
}
#if LANG_CXX11
inline void AssignRolesResponse::add_allpermissions(::std::string&& value) {
  allpermissions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AssignRolesResponse.AllPermissions)
}
#endif
inline void AssignRolesResponse::add_allpermissions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  allpermissions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AssignRolesResponse.AllPermissions)
}
inline void AssignRolesResponse::add_allpermissions(const char* value, size_t size) {
  allpermissions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AssignRolesResponse.AllPermissions)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
AssignRolesResponse::allpermissions() const {
  // @@protoc_insertion_point(field_list:AssignRolesResponse.AllPermissions)
  return allpermissions_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
AssignRolesResponse::mutable_allpermissions() {
  // @@protoc_insertion_point(field_mutable_list:AssignRolesResponse.AllPermissions)
  return &allpermissions_;
}

// map<string, string> Meta = 3;
inline int AssignRolesResponse::meta_size() const {
  return meta_.size();
}
inline void AssignRolesResponse::clear_meta() {
  meta_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
AssignRolesResponse::meta() const {
  // @@protoc_insertion_point(field_map:AssignRolesResponse.Meta)
  return meta_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
AssignRolesResponse::mutable_meta() {
  // @@protoc_insertion_point(field_mutable_map:AssignRolesResponse.Meta)
  return meta_.MutableMap();
}

// .ResponseStatus ResponseStatus = 4;
inline bool AssignRolesResponse::has_responsestatus() const {
  return this != internal_default_instance() && responsestatus_ != nullptr;
}
inline void AssignRolesResponse::clear_responsestatus() {
  if (GetArenaNoVirtual() == nullptr && responsestatus_ != nullptr) {
    delete responsestatus_;
  }
  responsestatus_ = nullptr;
}
inline const ::ResponseStatus& AssignRolesResponse::responsestatus() const {
  const ::ResponseStatus* p = responsestatus_;
  // @@protoc_insertion_point(field_get:AssignRolesResponse.ResponseStatus)
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline ::ResponseStatus* AssignRolesResponse::release_responsestatus() {
  // @@protoc_insertion_point(field_release:AssignRolesResponse.ResponseStatus)
  
  ::ResponseStatus* temp = responsestatus_;
  responsestatus_ = nullptr;
  return temp;
}
inline ::ResponseStatus* AssignRolesResponse::mutable_responsestatus() {
  
  if (responsestatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArenaNoVirtual());
    responsestatus_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AssignRolesResponse.ResponseStatus)
  return responsestatus_;
}
inline void AssignRolesResponse::set_allocated_responsestatus(::ResponseStatus* responsestatus) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete responsestatus_;
  }
  if (responsestatus) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      responsestatus = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, responsestatus, submessage_arena);
    }
    
  } else {
    
  }
  responsestatus_ = responsestatus;
  // @@protoc_insertion_point(field_set_allocated:AssignRolesResponse.ResponseStatus)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Authenticate

// string provider = 1;
inline void Authenticate::clear_provider() {
  provider_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Authenticate::provider() const {
  // @@protoc_insertion_point(field_get:Authenticate.provider)
  return provider_.GetNoArena();
}
inline void Authenticate::set_provider(const ::std::string& value) {
  
  provider_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Authenticate.provider)
}
#if LANG_CXX11
inline void Authenticate::set_provider(::std::string&& value) {
  
  provider_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Authenticate.provider)
}
#endif
inline void Authenticate::set_provider(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  provider_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Authenticate.provider)
}
inline void Authenticate::set_provider(const char* value, size_t size) {
  
  provider_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Authenticate.provider)
}
inline ::std::string* Authenticate::mutable_provider() {
  
  // @@protoc_insertion_point(field_mutable:Authenticate.provider)
  return provider_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Authenticate::release_provider() {
  // @@protoc_insertion_point(field_release:Authenticate.provider)
  
  return provider_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Authenticate::set_allocated_provider(::std::string* provider) {
  if (provider != nullptr) {
    
  } else {
    
  }
  provider_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), provider);
  // @@protoc_insertion_point(field_set_allocated:Authenticate.provider)
}

// string State = 2;
inline void Authenticate::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Authenticate::state() const {
  // @@protoc_insertion_point(field_get:Authenticate.State)
  return state_.GetNoArena();
}
inline void Authenticate::set_state(const ::std::string& value) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Authenticate.State)
}
#if LANG_CXX11
inline void Authenticate::set_state(::std::string&& value) {
  
  state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Authenticate.State)
}
#endif
inline void Authenticate::set_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Authenticate.State)
}
inline void Authenticate::set_state(const char* value, size_t size) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Authenticate.State)
}
inline ::std::string* Authenticate::mutable_state() {
  
  // @@protoc_insertion_point(field_mutable:Authenticate.State)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Authenticate::release_state() {
  // @@protoc_insertion_point(field_release:Authenticate.State)
  
  return state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Authenticate::set_allocated_state(::std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:Authenticate.State)
}

// string oauth_token = 3;
inline void Authenticate::clear_oauth_token() {
  oauth_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Authenticate::oauth_token() const {
  // @@protoc_insertion_point(field_get:Authenticate.oauth_token)
  return oauth_token_.GetNoArena();
}
inline void Authenticate::set_oauth_token(const ::std::string& value) {
  
  oauth_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Authenticate.oauth_token)
}
#if LANG_CXX11
inline void Authenticate::set_oauth_token(::std::string&& value) {
  
  oauth_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Authenticate.oauth_token)
}
#endif
inline void Authenticate::set_oauth_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  oauth_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Authenticate.oauth_token)
}
inline void Authenticate::set_oauth_token(const char* value, size_t size) {
  
  oauth_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Authenticate.oauth_token)
}
inline ::std::string* Authenticate::mutable_oauth_token() {
  
  // @@protoc_insertion_point(field_mutable:Authenticate.oauth_token)
  return oauth_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Authenticate::release_oauth_token() {
  // @@protoc_insertion_point(field_release:Authenticate.oauth_token)
  
  return oauth_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Authenticate::set_allocated_oauth_token(::std::string* oauth_token) {
  if (oauth_token != nullptr) {
    
  } else {
    
  }
  oauth_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), oauth_token);
  // @@protoc_insertion_point(field_set_allocated:Authenticate.oauth_token)
}

// string oauth_verifier = 4;
inline void Authenticate::clear_oauth_verifier() {
  oauth_verifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Authenticate::oauth_verifier() const {
  // @@protoc_insertion_point(field_get:Authenticate.oauth_verifier)
  return oauth_verifier_.GetNoArena();
}
inline void Authenticate::set_oauth_verifier(const ::std::string& value) {
  
  oauth_verifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Authenticate.oauth_verifier)
}
#if LANG_CXX11
inline void Authenticate::set_oauth_verifier(::std::string&& value) {
  
  oauth_verifier_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Authenticate.oauth_verifier)
}
#endif
inline void Authenticate::set_oauth_verifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  oauth_verifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Authenticate.oauth_verifier)
}
inline void Authenticate::set_oauth_verifier(const char* value, size_t size) {
  
  oauth_verifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Authenticate.oauth_verifier)
}
inline ::std::string* Authenticate::mutable_oauth_verifier() {
  
  // @@protoc_insertion_point(field_mutable:Authenticate.oauth_verifier)
  return oauth_verifier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Authenticate::release_oauth_verifier() {
  // @@protoc_insertion_point(field_release:Authenticate.oauth_verifier)
  
  return oauth_verifier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Authenticate::set_allocated_oauth_verifier(::std::string* oauth_verifier) {
  if (oauth_verifier != nullptr) {
    
  } else {
    
  }
  oauth_verifier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), oauth_verifier);
  // @@protoc_insertion_point(field_set_allocated:Authenticate.oauth_verifier)
}

// string UserName = 5;
inline void Authenticate::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Authenticate::username() const {
  // @@protoc_insertion_point(field_get:Authenticate.UserName)
  return username_.GetNoArena();
}
inline void Authenticate::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Authenticate.UserName)
}
#if LANG_CXX11
inline void Authenticate::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Authenticate.UserName)
}
#endif
inline void Authenticate::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Authenticate.UserName)
}
inline void Authenticate::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Authenticate.UserName)
}
inline ::std::string* Authenticate::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:Authenticate.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Authenticate::release_username() {
  // @@protoc_insertion_point(field_release:Authenticate.UserName)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Authenticate::set_allocated_username(::std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:Authenticate.UserName)
}

// string Password = 6;
inline void Authenticate::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Authenticate::password() const {
  // @@protoc_insertion_point(field_get:Authenticate.Password)
  return password_.GetNoArena();
}
inline void Authenticate::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Authenticate.Password)
}
#if LANG_CXX11
inline void Authenticate::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Authenticate.Password)
}
#endif
inline void Authenticate::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Authenticate.Password)
}
inline void Authenticate::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Authenticate.Password)
}
inline ::std::string* Authenticate::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:Authenticate.Password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Authenticate::release_password() {
  // @@protoc_insertion_point(field_release:Authenticate.Password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Authenticate::set_allocated_password(::std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:Authenticate.Password)
}

// bool RememberMe = 7;
inline void Authenticate::clear_rememberme() {
  rememberme_ = false;
}
inline bool Authenticate::rememberme() const {
  // @@protoc_insertion_point(field_get:Authenticate.RememberMe)
  return rememberme_;
}
inline void Authenticate::set_rememberme(bool value) {
  
  rememberme_ = value;
  // @@protoc_insertion_point(field_set:Authenticate.RememberMe)
}

// string Continue = 8;
inline void Authenticate::clear_continue_() {
  continue__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Authenticate::continue_() const {
  // @@protoc_insertion_point(field_get:Authenticate.Continue)
  return continue__.GetNoArena();
}
inline void Authenticate::set_continue_(const ::std::string& value) {
  
  continue__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Authenticate.Continue)
}
#if LANG_CXX11
inline void Authenticate::set_continue_(::std::string&& value) {
  
  continue__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Authenticate.Continue)
}
#endif
inline void Authenticate::set_continue_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  continue__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Authenticate.Continue)
}
inline void Authenticate::set_continue_(const char* value, size_t size) {
  
  continue__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Authenticate.Continue)
}
inline ::std::string* Authenticate::mutable_continue_() {
  
  // @@protoc_insertion_point(field_mutable:Authenticate.Continue)
  return continue__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Authenticate::release_continue_() {
  // @@protoc_insertion_point(field_release:Authenticate.Continue)
  
  return continue__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Authenticate::set_allocated_continue_(::std::string* continue_) {
  if (continue_ != nullptr) {
    
  } else {
    
  }
  continue__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), continue_);
  // @@protoc_insertion_point(field_set_allocated:Authenticate.Continue)
}

// string ErrorView = 9;
inline void Authenticate::clear_errorview() {
  errorview_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Authenticate::errorview() const {
  // @@protoc_insertion_point(field_get:Authenticate.ErrorView)
  return errorview_.GetNoArena();
}
inline void Authenticate::set_errorview(const ::std::string& value) {
  
  errorview_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Authenticate.ErrorView)
}
#if LANG_CXX11
inline void Authenticate::set_errorview(::std::string&& value) {
  
  errorview_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Authenticate.ErrorView)
}
#endif
inline void Authenticate::set_errorview(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errorview_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Authenticate.ErrorView)
}
inline void Authenticate::set_errorview(const char* value, size_t size) {
  
  errorview_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Authenticate.ErrorView)
}
inline ::std::string* Authenticate::mutable_errorview() {
  
  // @@protoc_insertion_point(field_mutable:Authenticate.ErrorView)
  return errorview_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Authenticate::release_errorview() {
  // @@protoc_insertion_point(field_release:Authenticate.ErrorView)
  
  return errorview_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Authenticate::set_allocated_errorview(::std::string* errorview) {
  if (errorview != nullptr) {
    
  } else {
    
  }
  errorview_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errorview);
  // @@protoc_insertion_point(field_set_allocated:Authenticate.ErrorView)
}

// string nonce = 10;
inline void Authenticate::clear_nonce() {
  nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Authenticate::nonce() const {
  // @@protoc_insertion_point(field_get:Authenticate.nonce)
  return nonce_.GetNoArena();
}
inline void Authenticate::set_nonce(const ::std::string& value) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Authenticate.nonce)
}
#if LANG_CXX11
inline void Authenticate::set_nonce(::std::string&& value) {
  
  nonce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Authenticate.nonce)
}
#endif
inline void Authenticate::set_nonce(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Authenticate.nonce)
}
inline void Authenticate::set_nonce(const char* value, size_t size) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Authenticate.nonce)
}
inline ::std::string* Authenticate::mutable_nonce() {
  
  // @@protoc_insertion_point(field_mutable:Authenticate.nonce)
  return nonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Authenticate::release_nonce() {
  // @@protoc_insertion_point(field_release:Authenticate.nonce)
  
  return nonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Authenticate::set_allocated_nonce(::std::string* nonce) {
  if (nonce != nullptr) {
    
  } else {
    
  }
  nonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nonce);
  // @@protoc_insertion_point(field_set_allocated:Authenticate.nonce)
}

// string uri = 11;
inline void Authenticate::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Authenticate::uri() const {
  // @@protoc_insertion_point(field_get:Authenticate.uri)
  return uri_.GetNoArena();
}
inline void Authenticate::set_uri(const ::std::string& value) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Authenticate.uri)
}
#if LANG_CXX11
inline void Authenticate::set_uri(::std::string&& value) {
  
  uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Authenticate.uri)
}
#endif
inline void Authenticate::set_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Authenticate.uri)
}
inline void Authenticate::set_uri(const char* value, size_t size) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Authenticate.uri)
}
inline ::std::string* Authenticate::mutable_uri() {
  
  // @@protoc_insertion_point(field_mutable:Authenticate.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Authenticate::release_uri() {
  // @@protoc_insertion_point(field_release:Authenticate.uri)
  
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Authenticate::set_allocated_uri(::std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:Authenticate.uri)
}

// string response = 12;
inline void Authenticate::clear_response() {
  response_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Authenticate::response() const {
  // @@protoc_insertion_point(field_get:Authenticate.response)
  return response_.GetNoArena();
}
inline void Authenticate::set_response(const ::std::string& value) {
  
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Authenticate.response)
}
#if LANG_CXX11
inline void Authenticate::set_response(::std::string&& value) {
  
  response_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Authenticate.response)
}
#endif
inline void Authenticate::set_response(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Authenticate.response)
}
inline void Authenticate::set_response(const char* value, size_t size) {
  
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Authenticate.response)
}
inline ::std::string* Authenticate::mutable_response() {
  
  // @@protoc_insertion_point(field_mutable:Authenticate.response)
  return response_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Authenticate::release_response() {
  // @@protoc_insertion_point(field_release:Authenticate.response)
  
  return response_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Authenticate::set_allocated_response(::std::string* response) {
  if (response != nullptr) {
    
  } else {
    
  }
  response_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response);
  // @@protoc_insertion_point(field_set_allocated:Authenticate.response)
}

// string qop = 13;
inline void Authenticate::clear_qop() {
  qop_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Authenticate::qop() const {
  // @@protoc_insertion_point(field_get:Authenticate.qop)
  return qop_.GetNoArena();
}
inline void Authenticate::set_qop(const ::std::string& value) {
  
  qop_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Authenticate.qop)
}
#if LANG_CXX11
inline void Authenticate::set_qop(::std::string&& value) {
  
  qop_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Authenticate.qop)
}
#endif
inline void Authenticate::set_qop(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  qop_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Authenticate.qop)
}
inline void Authenticate::set_qop(const char* value, size_t size) {
  
  qop_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Authenticate.qop)
}
inline ::std::string* Authenticate::mutable_qop() {
  
  // @@protoc_insertion_point(field_mutable:Authenticate.qop)
  return qop_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Authenticate::release_qop() {
  // @@protoc_insertion_point(field_release:Authenticate.qop)
  
  return qop_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Authenticate::set_allocated_qop(::std::string* qop) {
  if (qop != nullptr) {
    
  } else {
    
  }
  qop_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qop);
  // @@protoc_insertion_point(field_set_allocated:Authenticate.qop)
}

// string nc = 14;
inline void Authenticate::clear_nc() {
  nc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Authenticate::nc() const {
  // @@protoc_insertion_point(field_get:Authenticate.nc)
  return nc_.GetNoArena();
}
inline void Authenticate::set_nc(const ::std::string& value) {
  
  nc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Authenticate.nc)
}
#if LANG_CXX11
inline void Authenticate::set_nc(::std::string&& value) {
  
  nc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Authenticate.nc)
}
#endif
inline void Authenticate::set_nc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Authenticate.nc)
}
inline void Authenticate::set_nc(const char* value, size_t size) {
  
  nc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Authenticate.nc)
}
inline ::std::string* Authenticate::mutable_nc() {
  
  // @@protoc_insertion_point(field_mutable:Authenticate.nc)
  return nc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Authenticate::release_nc() {
  // @@protoc_insertion_point(field_release:Authenticate.nc)
  
  return nc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Authenticate::set_allocated_nc(::std::string* nc) {
  if (nc != nullptr) {
    
  } else {
    
  }
  nc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nc);
  // @@protoc_insertion_point(field_set_allocated:Authenticate.nc)
}

// string cnonce = 15;
inline void Authenticate::clear_cnonce() {
  cnonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Authenticate::cnonce() const {
  // @@protoc_insertion_point(field_get:Authenticate.cnonce)
  return cnonce_.GetNoArena();
}
inline void Authenticate::set_cnonce(const ::std::string& value) {
  
  cnonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Authenticate.cnonce)
}
#if LANG_CXX11
inline void Authenticate::set_cnonce(::std::string&& value) {
  
  cnonce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Authenticate.cnonce)
}
#endif
inline void Authenticate::set_cnonce(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cnonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Authenticate.cnonce)
}
inline void Authenticate::set_cnonce(const char* value, size_t size) {
  
  cnonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Authenticate.cnonce)
}
inline ::std::string* Authenticate::mutable_cnonce() {
  
  // @@protoc_insertion_point(field_mutable:Authenticate.cnonce)
  return cnonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Authenticate::release_cnonce() {
  // @@protoc_insertion_point(field_release:Authenticate.cnonce)
  
  return cnonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Authenticate::set_allocated_cnonce(::std::string* cnonce) {
  if (cnonce != nullptr) {
    
  } else {
    
  }
  cnonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cnonce);
  // @@protoc_insertion_point(field_set_allocated:Authenticate.cnonce)
}

// bool UseTokenCookie = 16;
inline void Authenticate::clear_usetokencookie() {
  usetokencookie_ = false;
}
inline bool Authenticate::usetokencookie() const {
  // @@protoc_insertion_point(field_get:Authenticate.UseTokenCookie)
  return usetokencookie_;
}
inline void Authenticate::set_usetokencookie(bool value) {
  
  usetokencookie_ = value;
  // @@protoc_insertion_point(field_set:Authenticate.UseTokenCookie)
}

// string AccessToken = 17;
inline void Authenticate::clear_accesstoken() {
  accesstoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Authenticate::accesstoken() const {
  // @@protoc_insertion_point(field_get:Authenticate.AccessToken)
  return accesstoken_.GetNoArena();
}
inline void Authenticate::set_accesstoken(const ::std::string& value) {
  
  accesstoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Authenticate.AccessToken)
}
#if LANG_CXX11
inline void Authenticate::set_accesstoken(::std::string&& value) {
  
  accesstoken_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Authenticate.AccessToken)
}
#endif
inline void Authenticate::set_accesstoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  accesstoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Authenticate.AccessToken)
}
inline void Authenticate::set_accesstoken(const char* value, size_t size) {
  
  accesstoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Authenticate.AccessToken)
}
inline ::std::string* Authenticate::mutable_accesstoken() {
  
  // @@protoc_insertion_point(field_mutable:Authenticate.AccessToken)
  return accesstoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Authenticate::release_accesstoken() {
  // @@protoc_insertion_point(field_release:Authenticate.AccessToken)
  
  return accesstoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Authenticate::set_allocated_accesstoken(::std::string* accesstoken) {
  if (accesstoken != nullptr) {
    
  } else {
    
  }
  accesstoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accesstoken);
  // @@protoc_insertion_point(field_set_allocated:Authenticate.AccessToken)
}

// string AccessTokenSecret = 18;
inline void Authenticate::clear_accesstokensecret() {
  accesstokensecret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Authenticate::accesstokensecret() const {
  // @@protoc_insertion_point(field_get:Authenticate.AccessTokenSecret)
  return accesstokensecret_.GetNoArena();
}
inline void Authenticate::set_accesstokensecret(const ::std::string& value) {
  
  accesstokensecret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Authenticate.AccessTokenSecret)
}
#if LANG_CXX11
inline void Authenticate::set_accesstokensecret(::std::string&& value) {
  
  accesstokensecret_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Authenticate.AccessTokenSecret)
}
#endif
inline void Authenticate::set_accesstokensecret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  accesstokensecret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Authenticate.AccessTokenSecret)
}
inline void Authenticate::set_accesstokensecret(const char* value, size_t size) {
  
  accesstokensecret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Authenticate.AccessTokenSecret)
}
inline ::std::string* Authenticate::mutable_accesstokensecret() {
  
  // @@protoc_insertion_point(field_mutable:Authenticate.AccessTokenSecret)
  return accesstokensecret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Authenticate::release_accesstokensecret() {
  // @@protoc_insertion_point(field_release:Authenticate.AccessTokenSecret)
  
  return accesstokensecret_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Authenticate::set_allocated_accesstokensecret(::std::string* accesstokensecret) {
  if (accesstokensecret != nullptr) {
    
  } else {
    
  }
  accesstokensecret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accesstokensecret);
  // @@protoc_insertion_point(field_set_allocated:Authenticate.AccessTokenSecret)
}

// string scope = 19;
inline void Authenticate::clear_scope() {
  scope_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Authenticate::scope() const {
  // @@protoc_insertion_point(field_get:Authenticate.scope)
  return scope_.GetNoArena();
}
inline void Authenticate::set_scope(const ::std::string& value) {
  
  scope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Authenticate.scope)
}
#if LANG_CXX11
inline void Authenticate::set_scope(::std::string&& value) {
  
  scope_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Authenticate.scope)
}
#endif
inline void Authenticate::set_scope(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Authenticate.scope)
}
inline void Authenticate::set_scope(const char* value, size_t size) {
  
  scope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Authenticate.scope)
}
inline ::std::string* Authenticate::mutable_scope() {
  
  // @@protoc_insertion_point(field_mutable:Authenticate.scope)
  return scope_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Authenticate::release_scope() {
  // @@protoc_insertion_point(field_release:Authenticate.scope)
  
  return scope_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Authenticate::set_allocated_scope(::std::string* scope) {
  if (scope != nullptr) {
    
  } else {
    
  }
  scope_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scope);
  // @@protoc_insertion_point(field_set_allocated:Authenticate.scope)
}

// map<string, string> Meta = 20;
inline int Authenticate::meta_size() const {
  return meta_.size();
}
inline void Authenticate::clear_meta() {
  meta_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Authenticate::meta() const {
  // @@protoc_insertion_point(field_map:Authenticate.Meta)
  return meta_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Authenticate::mutable_meta() {
  // @@protoc_insertion_point(field_mutable_map:Authenticate.Meta)
  return meta_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AuthenticateResponse

// string UserId = 1;
inline void AuthenticateResponse::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthenticateResponse::userid() const {
  // @@protoc_insertion_point(field_get:AuthenticateResponse.UserId)
  return userid_.GetNoArena();
}
inline void AuthenticateResponse::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AuthenticateResponse.UserId)
}
#if LANG_CXX11
inline void AuthenticateResponse::set_userid(::std::string&& value) {
  
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AuthenticateResponse.UserId)
}
#endif
inline void AuthenticateResponse::set_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AuthenticateResponse.UserId)
}
inline void AuthenticateResponse::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AuthenticateResponse.UserId)
}
inline ::std::string* AuthenticateResponse::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:AuthenticateResponse.UserId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthenticateResponse::release_userid() {
  // @@protoc_insertion_point(field_release:AuthenticateResponse.UserId)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateResponse::set_allocated_userid(::std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:AuthenticateResponse.UserId)
}

// string SessionId = 2;
inline void AuthenticateResponse::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthenticateResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:AuthenticateResponse.SessionId)
  return sessionid_.GetNoArena();
}
inline void AuthenticateResponse::set_sessionid(const ::std::string& value) {
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AuthenticateResponse.SessionId)
}
#if LANG_CXX11
inline void AuthenticateResponse::set_sessionid(::std::string&& value) {
  
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AuthenticateResponse.SessionId)
}
#endif
inline void AuthenticateResponse::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AuthenticateResponse.SessionId)
}
inline void AuthenticateResponse::set_sessionid(const char* value, size_t size) {
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AuthenticateResponse.SessionId)
}
inline ::std::string* AuthenticateResponse::mutable_sessionid() {
  
  // @@protoc_insertion_point(field_mutable:AuthenticateResponse.SessionId)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthenticateResponse::release_sessionid() {
  // @@protoc_insertion_point(field_release:AuthenticateResponse.SessionId)
  
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateResponse::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != nullptr) {
    
  } else {
    
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:AuthenticateResponse.SessionId)
}

// string UserName = 3;
inline void AuthenticateResponse::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthenticateResponse::username() const {
  // @@protoc_insertion_point(field_get:AuthenticateResponse.UserName)
  return username_.GetNoArena();
}
inline void AuthenticateResponse::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AuthenticateResponse.UserName)
}
#if LANG_CXX11
inline void AuthenticateResponse::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AuthenticateResponse.UserName)
}
#endif
inline void AuthenticateResponse::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AuthenticateResponse.UserName)
}
inline void AuthenticateResponse::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AuthenticateResponse.UserName)
}
inline ::std::string* AuthenticateResponse::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:AuthenticateResponse.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthenticateResponse::release_username() {
  // @@protoc_insertion_point(field_release:AuthenticateResponse.UserName)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateResponse::set_allocated_username(::std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:AuthenticateResponse.UserName)
}

// string DisplayName = 4;
inline void AuthenticateResponse::clear_displayname() {
  displayname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthenticateResponse::displayname() const {
  // @@protoc_insertion_point(field_get:AuthenticateResponse.DisplayName)
  return displayname_.GetNoArena();
}
inline void AuthenticateResponse::set_displayname(const ::std::string& value) {
  
  displayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AuthenticateResponse.DisplayName)
}
#if LANG_CXX11
inline void AuthenticateResponse::set_displayname(::std::string&& value) {
  
  displayname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AuthenticateResponse.DisplayName)
}
#endif
inline void AuthenticateResponse::set_displayname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  displayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AuthenticateResponse.DisplayName)
}
inline void AuthenticateResponse::set_displayname(const char* value, size_t size) {
  
  displayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AuthenticateResponse.DisplayName)
}
inline ::std::string* AuthenticateResponse::mutable_displayname() {
  
  // @@protoc_insertion_point(field_mutable:AuthenticateResponse.DisplayName)
  return displayname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthenticateResponse::release_displayname() {
  // @@protoc_insertion_point(field_release:AuthenticateResponse.DisplayName)
  
  return displayname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateResponse::set_allocated_displayname(::std::string* displayname) {
  if (displayname != nullptr) {
    
  } else {
    
  }
  displayname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), displayname);
  // @@protoc_insertion_point(field_set_allocated:AuthenticateResponse.DisplayName)
}

// string ReferrerUrl = 5;
inline void AuthenticateResponse::clear_referrerurl() {
  referrerurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthenticateResponse::referrerurl() const {
  // @@protoc_insertion_point(field_get:AuthenticateResponse.ReferrerUrl)
  return referrerurl_.GetNoArena();
}
inline void AuthenticateResponse::set_referrerurl(const ::std::string& value) {
  
  referrerurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AuthenticateResponse.ReferrerUrl)
}
#if LANG_CXX11
inline void AuthenticateResponse::set_referrerurl(::std::string&& value) {
  
  referrerurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AuthenticateResponse.ReferrerUrl)
}
#endif
inline void AuthenticateResponse::set_referrerurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  referrerurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AuthenticateResponse.ReferrerUrl)
}
inline void AuthenticateResponse::set_referrerurl(const char* value, size_t size) {
  
  referrerurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AuthenticateResponse.ReferrerUrl)
}
inline ::std::string* AuthenticateResponse::mutable_referrerurl() {
  
  // @@protoc_insertion_point(field_mutable:AuthenticateResponse.ReferrerUrl)
  return referrerurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthenticateResponse::release_referrerurl() {
  // @@protoc_insertion_point(field_release:AuthenticateResponse.ReferrerUrl)
  
  return referrerurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateResponse::set_allocated_referrerurl(::std::string* referrerurl) {
  if (referrerurl != nullptr) {
    
  } else {
    
  }
  referrerurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), referrerurl);
  // @@protoc_insertion_point(field_set_allocated:AuthenticateResponse.ReferrerUrl)
}

// string BearerToken = 6;
inline void AuthenticateResponse::clear_bearertoken() {
  bearertoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthenticateResponse::bearertoken() const {
  // @@protoc_insertion_point(field_get:AuthenticateResponse.BearerToken)
  return bearertoken_.GetNoArena();
}
inline void AuthenticateResponse::set_bearertoken(const ::std::string& value) {
  
  bearertoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AuthenticateResponse.BearerToken)
}
#if LANG_CXX11
inline void AuthenticateResponse::set_bearertoken(::std::string&& value) {
  
  bearertoken_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AuthenticateResponse.BearerToken)
}
#endif
inline void AuthenticateResponse::set_bearertoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bearertoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AuthenticateResponse.BearerToken)
}
inline void AuthenticateResponse::set_bearertoken(const char* value, size_t size) {
  
  bearertoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AuthenticateResponse.BearerToken)
}
inline ::std::string* AuthenticateResponse::mutable_bearertoken() {
  
  // @@protoc_insertion_point(field_mutable:AuthenticateResponse.BearerToken)
  return bearertoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthenticateResponse::release_bearertoken() {
  // @@protoc_insertion_point(field_release:AuthenticateResponse.BearerToken)
  
  return bearertoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateResponse::set_allocated_bearertoken(::std::string* bearertoken) {
  if (bearertoken != nullptr) {
    
  } else {
    
  }
  bearertoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bearertoken);
  // @@protoc_insertion_point(field_set_allocated:AuthenticateResponse.BearerToken)
}

// string RefreshToken = 7;
inline void AuthenticateResponse::clear_refreshtoken() {
  refreshtoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthenticateResponse::refreshtoken() const {
  // @@protoc_insertion_point(field_get:AuthenticateResponse.RefreshToken)
  return refreshtoken_.GetNoArena();
}
inline void AuthenticateResponse::set_refreshtoken(const ::std::string& value) {
  
  refreshtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AuthenticateResponse.RefreshToken)
}
#if LANG_CXX11
inline void AuthenticateResponse::set_refreshtoken(::std::string&& value) {
  
  refreshtoken_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AuthenticateResponse.RefreshToken)
}
#endif
inline void AuthenticateResponse::set_refreshtoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  refreshtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AuthenticateResponse.RefreshToken)
}
inline void AuthenticateResponse::set_refreshtoken(const char* value, size_t size) {
  
  refreshtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AuthenticateResponse.RefreshToken)
}
inline ::std::string* AuthenticateResponse::mutable_refreshtoken() {
  
  // @@protoc_insertion_point(field_mutable:AuthenticateResponse.RefreshToken)
  return refreshtoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthenticateResponse::release_refreshtoken() {
  // @@protoc_insertion_point(field_release:AuthenticateResponse.RefreshToken)
  
  return refreshtoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateResponse::set_allocated_refreshtoken(::std::string* refreshtoken) {
  if (refreshtoken != nullptr) {
    
  } else {
    
  }
  refreshtoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), refreshtoken);
  // @@protoc_insertion_point(field_set_allocated:AuthenticateResponse.RefreshToken)
}

// string ProfileUrl = 8;
inline void AuthenticateResponse::clear_profileurl() {
  profileurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthenticateResponse::profileurl() const {
  // @@protoc_insertion_point(field_get:AuthenticateResponse.ProfileUrl)
  return profileurl_.GetNoArena();
}
inline void AuthenticateResponse::set_profileurl(const ::std::string& value) {
  
  profileurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AuthenticateResponse.ProfileUrl)
}
#if LANG_CXX11
inline void AuthenticateResponse::set_profileurl(::std::string&& value) {
  
  profileurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AuthenticateResponse.ProfileUrl)
}
#endif
inline void AuthenticateResponse::set_profileurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  profileurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AuthenticateResponse.ProfileUrl)
}
inline void AuthenticateResponse::set_profileurl(const char* value, size_t size) {
  
  profileurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AuthenticateResponse.ProfileUrl)
}
inline ::std::string* AuthenticateResponse::mutable_profileurl() {
  
  // @@protoc_insertion_point(field_mutable:AuthenticateResponse.ProfileUrl)
  return profileurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthenticateResponse::release_profileurl() {
  // @@protoc_insertion_point(field_release:AuthenticateResponse.ProfileUrl)
  
  return profileurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateResponse::set_allocated_profileurl(::std::string* profileurl) {
  if (profileurl != nullptr) {
    
  } else {
    
  }
  profileurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), profileurl);
  // @@protoc_insertion_point(field_set_allocated:AuthenticateResponse.ProfileUrl)
}

// repeated string Roles = 9;
inline int AuthenticateResponse::roles_size() const {
  return roles_.size();
}
inline void AuthenticateResponse::clear_roles() {
  roles_.Clear();
}
inline const ::std::string& AuthenticateResponse::roles(int index) const {
  // @@protoc_insertion_point(field_get:AuthenticateResponse.Roles)
  return roles_.Get(index);
}
inline ::std::string* AuthenticateResponse::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:AuthenticateResponse.Roles)
  return roles_.Mutable(index);
}
inline void AuthenticateResponse::set_roles(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:AuthenticateResponse.Roles)
  roles_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void AuthenticateResponse::set_roles(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:AuthenticateResponse.Roles)
  roles_.Mutable(index)->assign(std::move(value));
}
#endif
inline void AuthenticateResponse::set_roles(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  roles_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AuthenticateResponse.Roles)
}
inline void AuthenticateResponse::set_roles(int index, const char* value, size_t size) {
  roles_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AuthenticateResponse.Roles)
}
inline ::std::string* AuthenticateResponse::add_roles() {
  // @@protoc_insertion_point(field_add_mutable:AuthenticateResponse.Roles)
  return roles_.Add();
}
inline void AuthenticateResponse::add_roles(const ::std::string& value) {
  roles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AuthenticateResponse.Roles)
}
#if LANG_CXX11
inline void AuthenticateResponse::add_roles(::std::string&& value) {
  roles_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AuthenticateResponse.Roles)
}
#endif
inline void AuthenticateResponse::add_roles(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  roles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AuthenticateResponse.Roles)
}
inline void AuthenticateResponse::add_roles(const char* value, size_t size) {
  roles_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AuthenticateResponse.Roles)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
AuthenticateResponse::roles() const {
  // @@protoc_insertion_point(field_list:AuthenticateResponse.Roles)
  return roles_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
AuthenticateResponse::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:AuthenticateResponse.Roles)
  return &roles_;
}

// repeated string Permissions = 10;
inline int AuthenticateResponse::permissions_size() const {
  return permissions_.size();
}
inline void AuthenticateResponse::clear_permissions() {
  permissions_.Clear();
}
inline const ::std::string& AuthenticateResponse::permissions(int index) const {
  // @@protoc_insertion_point(field_get:AuthenticateResponse.Permissions)
  return permissions_.Get(index);
}
inline ::std::string* AuthenticateResponse::mutable_permissions(int index) {
  // @@protoc_insertion_point(field_mutable:AuthenticateResponse.Permissions)
  return permissions_.Mutable(index);
}
inline void AuthenticateResponse::set_permissions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:AuthenticateResponse.Permissions)
  permissions_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void AuthenticateResponse::set_permissions(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:AuthenticateResponse.Permissions)
  permissions_.Mutable(index)->assign(std::move(value));
}
#endif
inline void AuthenticateResponse::set_permissions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  permissions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AuthenticateResponse.Permissions)
}
inline void AuthenticateResponse::set_permissions(int index, const char* value, size_t size) {
  permissions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AuthenticateResponse.Permissions)
}
inline ::std::string* AuthenticateResponse::add_permissions() {
  // @@protoc_insertion_point(field_add_mutable:AuthenticateResponse.Permissions)
  return permissions_.Add();
}
inline void AuthenticateResponse::add_permissions(const ::std::string& value) {
  permissions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AuthenticateResponse.Permissions)
}
#if LANG_CXX11
inline void AuthenticateResponse::add_permissions(::std::string&& value) {
  permissions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AuthenticateResponse.Permissions)
}
#endif
inline void AuthenticateResponse::add_permissions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  permissions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AuthenticateResponse.Permissions)
}
inline void AuthenticateResponse::add_permissions(const char* value, size_t size) {
  permissions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AuthenticateResponse.Permissions)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
AuthenticateResponse::permissions() const {
  // @@protoc_insertion_point(field_list:AuthenticateResponse.Permissions)
  return permissions_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
AuthenticateResponse::mutable_permissions() {
  // @@protoc_insertion_point(field_mutable_list:AuthenticateResponse.Permissions)
  return &permissions_;
}

// .ResponseStatus ResponseStatus = 11;
inline bool AuthenticateResponse::has_responsestatus() const {
  return this != internal_default_instance() && responsestatus_ != nullptr;
}
inline void AuthenticateResponse::clear_responsestatus() {
  if (GetArenaNoVirtual() == nullptr && responsestatus_ != nullptr) {
    delete responsestatus_;
  }
  responsestatus_ = nullptr;
}
inline const ::ResponseStatus& AuthenticateResponse::responsestatus() const {
  const ::ResponseStatus* p = responsestatus_;
  // @@protoc_insertion_point(field_get:AuthenticateResponse.ResponseStatus)
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline ::ResponseStatus* AuthenticateResponse::release_responsestatus() {
  // @@protoc_insertion_point(field_release:AuthenticateResponse.ResponseStatus)
  
  ::ResponseStatus* temp = responsestatus_;
  responsestatus_ = nullptr;
  return temp;
}
inline ::ResponseStatus* AuthenticateResponse::mutable_responsestatus() {
  
  if (responsestatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArenaNoVirtual());
    responsestatus_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AuthenticateResponse.ResponseStatus)
  return responsestatus_;
}
inline void AuthenticateResponse::set_allocated_responsestatus(::ResponseStatus* responsestatus) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete responsestatus_;
  }
  if (responsestatus) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      responsestatus = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, responsestatus, submessage_arena);
    }
    
  } else {
    
  }
  responsestatus_ = responsestatus;
  // @@protoc_insertion_point(field_set_allocated:AuthenticateResponse.ResponseStatus)
}

// map<string, string> Meta = 12;
inline int AuthenticateResponse::meta_size() const {
  return meta_.size();
}
inline void AuthenticateResponse::clear_meta() {
  meta_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
AuthenticateResponse::meta() const {
  // @@protoc_insertion_point(field_map:AuthenticateResponse.Meta)
  return meta_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
AuthenticateResponse::mutable_meta() {
  // @@protoc_insertion_point(field_mutable_map:AuthenticateResponse.Meta)
  return meta_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ConvertSessionToToken

// bool PreserveSession = 1;
inline void ConvertSessionToToken::clear_preservesession() {
  preservesession_ = false;
}
inline bool ConvertSessionToToken::preservesession() const {
  // @@protoc_insertion_point(field_get:ConvertSessionToToken.PreserveSession)
  return preservesession_;
}
inline void ConvertSessionToToken::set_preservesession(bool value) {
  
  preservesession_ = value;
  // @@protoc_insertion_point(field_set:ConvertSessionToToken.PreserveSession)
}

// map<string, string> Meta = 2;
inline int ConvertSessionToToken::meta_size() const {
  return meta_.size();
}
inline void ConvertSessionToToken::clear_meta() {
  meta_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
ConvertSessionToToken::meta() const {
  // @@protoc_insertion_point(field_map:ConvertSessionToToken.Meta)
  return meta_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
ConvertSessionToToken::mutable_meta() {
  // @@protoc_insertion_point(field_mutable_map:ConvertSessionToToken.Meta)
  return meta_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ConvertSessionToTokenResponse

// map<string, string> Meta = 1;
inline int ConvertSessionToTokenResponse::meta_size() const {
  return meta_.size();
}
inline void ConvertSessionToTokenResponse::clear_meta() {
  meta_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
ConvertSessionToTokenResponse::meta() const {
  // @@protoc_insertion_point(field_map:ConvertSessionToTokenResponse.Meta)
  return meta_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
ConvertSessionToTokenResponse::mutable_meta() {
  // @@protoc_insertion_point(field_mutable_map:ConvertSessionToTokenResponse.Meta)
  return meta_.MutableMap();
}

// string AccessToken = 2;
inline void ConvertSessionToTokenResponse::clear_accesstoken() {
  accesstoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConvertSessionToTokenResponse::accesstoken() const {
  // @@protoc_insertion_point(field_get:ConvertSessionToTokenResponse.AccessToken)
  return accesstoken_.GetNoArena();
}
inline void ConvertSessionToTokenResponse::set_accesstoken(const ::std::string& value) {
  
  accesstoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConvertSessionToTokenResponse.AccessToken)
}
#if LANG_CXX11
inline void ConvertSessionToTokenResponse::set_accesstoken(::std::string&& value) {
  
  accesstoken_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConvertSessionToTokenResponse.AccessToken)
}
#endif
inline void ConvertSessionToTokenResponse::set_accesstoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  accesstoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConvertSessionToTokenResponse.AccessToken)
}
inline void ConvertSessionToTokenResponse::set_accesstoken(const char* value, size_t size) {
  
  accesstoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConvertSessionToTokenResponse.AccessToken)
}
inline ::std::string* ConvertSessionToTokenResponse::mutable_accesstoken() {
  
  // @@protoc_insertion_point(field_mutable:ConvertSessionToTokenResponse.AccessToken)
  return accesstoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConvertSessionToTokenResponse::release_accesstoken() {
  // @@protoc_insertion_point(field_release:ConvertSessionToTokenResponse.AccessToken)
  
  return accesstoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConvertSessionToTokenResponse::set_allocated_accesstoken(::std::string* accesstoken) {
  if (accesstoken != nullptr) {
    
  } else {
    
  }
  accesstoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accesstoken);
  // @@protoc_insertion_point(field_set_allocated:ConvertSessionToTokenResponse.AccessToken)
}

// string RefreshToken = 3;
inline void ConvertSessionToTokenResponse::clear_refreshtoken() {
  refreshtoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConvertSessionToTokenResponse::refreshtoken() const {
  // @@protoc_insertion_point(field_get:ConvertSessionToTokenResponse.RefreshToken)
  return refreshtoken_.GetNoArena();
}
inline void ConvertSessionToTokenResponse::set_refreshtoken(const ::std::string& value) {
  
  refreshtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConvertSessionToTokenResponse.RefreshToken)
}
#if LANG_CXX11
inline void ConvertSessionToTokenResponse::set_refreshtoken(::std::string&& value) {
  
  refreshtoken_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConvertSessionToTokenResponse.RefreshToken)
}
#endif
inline void ConvertSessionToTokenResponse::set_refreshtoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  refreshtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConvertSessionToTokenResponse.RefreshToken)
}
inline void ConvertSessionToTokenResponse::set_refreshtoken(const char* value, size_t size) {
  
  refreshtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConvertSessionToTokenResponse.RefreshToken)
}
inline ::std::string* ConvertSessionToTokenResponse::mutable_refreshtoken() {
  
  // @@protoc_insertion_point(field_mutable:ConvertSessionToTokenResponse.RefreshToken)
  return refreshtoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConvertSessionToTokenResponse::release_refreshtoken() {
  // @@protoc_insertion_point(field_release:ConvertSessionToTokenResponse.RefreshToken)
  
  return refreshtoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConvertSessionToTokenResponse::set_allocated_refreshtoken(::std::string* refreshtoken) {
  if (refreshtoken != nullptr) {
    
  } else {
    
  }
  refreshtoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), refreshtoken);
  // @@protoc_insertion_point(field_set_allocated:ConvertSessionToTokenResponse.RefreshToken)
}

// .ResponseStatus ResponseStatus = 4;
inline bool ConvertSessionToTokenResponse::has_responsestatus() const {
  return this != internal_default_instance() && responsestatus_ != nullptr;
}
inline void ConvertSessionToTokenResponse::clear_responsestatus() {
  if (GetArenaNoVirtual() == nullptr && responsestatus_ != nullptr) {
    delete responsestatus_;
  }
  responsestatus_ = nullptr;
}
inline const ::ResponseStatus& ConvertSessionToTokenResponse::responsestatus() const {
  const ::ResponseStatus* p = responsestatus_;
  // @@protoc_insertion_point(field_get:ConvertSessionToTokenResponse.ResponseStatus)
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline ::ResponseStatus* ConvertSessionToTokenResponse::release_responsestatus() {
  // @@protoc_insertion_point(field_release:ConvertSessionToTokenResponse.ResponseStatus)
  
  ::ResponseStatus* temp = responsestatus_;
  responsestatus_ = nullptr;
  return temp;
}
inline ::ResponseStatus* ConvertSessionToTokenResponse::mutable_responsestatus() {
  
  if (responsestatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArenaNoVirtual());
    responsestatus_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ConvertSessionToTokenResponse.ResponseStatus)
  return responsestatus_;
}
inline void ConvertSessionToTokenResponse::set_allocated_responsestatus(::ResponseStatus* responsestatus) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete responsestatus_;
  }
  if (responsestatus) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      responsestatus = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, responsestatus, submessage_arena);
    }
    
  } else {
    
  }
  responsestatus_ = responsestatus;
  // @@protoc_insertion_point(field_set_allocated:ConvertSessionToTokenResponse.ResponseStatus)
}

// -------------------------------------------------------------------

// CreateTodo

// string Title = 1;
inline void CreateTodo::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateTodo::title() const {
  // @@protoc_insertion_point(field_get:CreateTodo.Title)
  return title_.GetNoArena();
}
inline void CreateTodo::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateTodo.Title)
}
#if LANG_CXX11
inline void CreateTodo::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateTodo.Title)
}
#endif
inline void CreateTodo::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateTodo.Title)
}
inline void CreateTodo::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateTodo.Title)
}
inline ::std::string* CreateTodo::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:CreateTodo.Title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateTodo::release_title() {
  // @@protoc_insertion_point(field_release:CreateTodo.Title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateTodo::set_allocated_title(::std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:CreateTodo.Title)
}

// int32 Order = 2;
inline void CreateTodo::clear_order() {
  order_ = 0;
}
inline ::google::protobuf::int32 CreateTodo::order() const {
  // @@protoc_insertion_point(field_get:CreateTodo.Order)
  return order_;
}
inline void CreateTodo::set_order(::google::protobuf::int32 value) {
  
  order_ = value;
  // @@protoc_insertion_point(field_set:CreateTodo.Order)
}

// -------------------------------------------------------------------

// CreateTodoResponse

// .Todo Result = 1;
inline bool CreateTodoResponse::has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline void CreateTodoResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::Todo& CreateTodoResponse::result() const {
  const ::Todo* p = result_;
  // @@protoc_insertion_point(field_get:CreateTodoResponse.Result)
  return p != nullptr ? *p : *reinterpret_cast<const ::Todo*>(
      &::_Todo_default_instance_);
}
inline ::Todo* CreateTodoResponse::release_result() {
  // @@protoc_insertion_point(field_release:CreateTodoResponse.Result)
  
  ::Todo* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::Todo* CreateTodoResponse::mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::Todo>(GetArenaNoVirtual());
    result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CreateTodoResponse.Result)
  return result_;
}
inline void CreateTodoResponse::set_allocated_result(::Todo* result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:CreateTodoResponse.Result)
}

// .ResponseStatus ResponseStatus = 2;
inline bool CreateTodoResponse::has_responsestatus() const {
  return this != internal_default_instance() && responsestatus_ != nullptr;
}
inline void CreateTodoResponse::clear_responsestatus() {
  if (GetArenaNoVirtual() == nullptr && responsestatus_ != nullptr) {
    delete responsestatus_;
  }
  responsestatus_ = nullptr;
}
inline const ::ResponseStatus& CreateTodoResponse::responsestatus() const {
  const ::ResponseStatus* p = responsestatus_;
  // @@protoc_insertion_point(field_get:CreateTodoResponse.ResponseStatus)
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline ::ResponseStatus* CreateTodoResponse::release_responsestatus() {
  // @@protoc_insertion_point(field_release:CreateTodoResponse.ResponseStatus)
  
  ::ResponseStatus* temp = responsestatus_;
  responsestatus_ = nullptr;
  return temp;
}
inline ::ResponseStatus* CreateTodoResponse::mutable_responsestatus() {
  
  if (responsestatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArenaNoVirtual());
    responsestatus_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CreateTodoResponse.ResponseStatus)
  return responsestatus_;
}
inline void CreateTodoResponse::set_allocated_responsestatus(::ResponseStatus* responsestatus) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete responsestatus_;
  }
  if (responsestatus) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      responsestatus = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, responsestatus, submessage_arena);
    }
    
  } else {
    
  }
  responsestatus_ = responsestatus;
  // @@protoc_insertion_point(field_set_allocated:CreateTodoResponse.ResponseStatus)
}

// -------------------------------------------------------------------

// DeleteTodo

// int64 Id = 1;
inline void DeleteTodo::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 DeleteTodo::id() const {
  // @@protoc_insertion_point(field_get:DeleteTodo.Id)
  return id_;
}
inline void DeleteTodo::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:DeleteTodo.Id)
}

// -------------------------------------------------------------------

// DeleteTodos

// repeated int64 Ids = 1 [packed = false];
inline int DeleteTodos::ids_size() const {
  return ids_.size();
}
inline void DeleteTodos::clear_ids() {
  ids_.Clear();
}
inline ::google::protobuf::int64 DeleteTodos::ids(int index) const {
  // @@protoc_insertion_point(field_get:DeleteTodos.Ids)
  return ids_.Get(index);
}
inline void DeleteTodos::set_ids(int index, ::google::protobuf::int64 value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:DeleteTodos.Ids)
}
inline void DeleteTodos::add_ids(::google::protobuf::int64 value) {
  ids_.Add(value);
  // @@protoc_insertion_point(field_add:DeleteTodos.Ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DeleteTodos::ids() const {
  // @@protoc_insertion_point(field_list:DeleteTodos.Ids)
  return ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DeleteTodos::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:DeleteTodos.Ids)
  return &ids_;
}

// -------------------------------------------------------------------

// EmptyResponse

// .ResponseStatus ResponseStatus = 1;
inline bool EmptyResponse::has_responsestatus() const {
  return this != internal_default_instance() && responsestatus_ != nullptr;
}
inline void EmptyResponse::clear_responsestatus() {
  if (GetArenaNoVirtual() == nullptr && responsestatus_ != nullptr) {
    delete responsestatus_;
  }
  responsestatus_ = nullptr;
}
inline const ::ResponseStatus& EmptyResponse::responsestatus() const {
  const ::ResponseStatus* p = responsestatus_;
  // @@protoc_insertion_point(field_get:EmptyResponse.ResponseStatus)
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline ::ResponseStatus* EmptyResponse::release_responsestatus() {
  // @@protoc_insertion_point(field_release:EmptyResponse.ResponseStatus)
  
  ::ResponseStatus* temp = responsestatus_;
  responsestatus_ = nullptr;
  return temp;
}
inline ::ResponseStatus* EmptyResponse::mutable_responsestatus() {
  
  if (responsestatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArenaNoVirtual());
    responsestatus_ = p;
  }
  // @@protoc_insertion_point(field_mutable:EmptyResponse.ResponseStatus)
  return responsestatus_;
}
inline void EmptyResponse::set_allocated_responsestatus(::ResponseStatus* responsestatus) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete responsestatus_;
  }
  if (responsestatus) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      responsestatus = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, responsestatus, submessage_arena);
    }
    
  } else {
    
  }
  responsestatus_ = responsestatus;
  // @@protoc_insertion_point(field_set_allocated:EmptyResponse.ResponseStatus)
}

// -------------------------------------------------------------------

// FileContent

// string Name = 1;
inline void FileContent::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileContent::name() const {
  // @@protoc_insertion_point(field_get:FileContent.Name)
  return name_.GetNoArena();
}
inline void FileContent::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FileContent.Name)
}
#if LANG_CXX11
inline void FileContent::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FileContent.Name)
}
#endif
inline void FileContent::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FileContent.Name)
}
inline void FileContent::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FileContent.Name)
}
inline ::std::string* FileContent::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:FileContent.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileContent::release_name() {
  // @@protoc_insertion_point(field_release:FileContent.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileContent::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:FileContent.Name)
}

// string Type = 2;
inline void FileContent::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileContent::type() const {
  // @@protoc_insertion_point(field_get:FileContent.Type)
  return type_.GetNoArena();
}
inline void FileContent::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FileContent.Type)
}
#if LANG_CXX11
inline void FileContent::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FileContent.Type)
}
#endif
inline void FileContent::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FileContent.Type)
}
inline void FileContent::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FileContent.Type)
}
inline ::std::string* FileContent::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:FileContent.Type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileContent::release_type() {
  // @@protoc_insertion_point(field_release:FileContent.Type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileContent::set_allocated_type(::std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:FileContent.Type)
}

// int32 Length = 3;
inline void FileContent::clear_length() {
  length_ = 0;
}
inline ::google::protobuf::int32 FileContent::length() const {
  // @@protoc_insertion_point(field_get:FileContent.Length)
  return length_;
}
inline void FileContent::set_length(::google::protobuf::int32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:FileContent.Length)
}

// bytes Body = 4;
inline void FileContent::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileContent::body() const {
  // @@protoc_insertion_point(field_get:FileContent.Body)
  return body_.GetNoArena();
}
inline void FileContent::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FileContent.Body)
}
#if LANG_CXX11
inline void FileContent::set_body(::std::string&& value) {
  
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FileContent.Body)
}
#endif
inline void FileContent::set_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FileContent.Body)
}
inline void FileContent::set_body(const void* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FileContent.Body)
}
inline ::std::string* FileContent::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:FileContent.Body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileContent::release_body() {
  // @@protoc_insertion_point(field_release:FileContent.Body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileContent::set_allocated_body(::std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:FileContent.Body)
}

// .ResponseStatus ResponseStatus = 5;
inline bool FileContent::has_responsestatus() const {
  return this != internal_default_instance() && responsestatus_ != nullptr;
}
inline void FileContent::clear_responsestatus() {
  if (GetArenaNoVirtual() == nullptr && responsestatus_ != nullptr) {
    delete responsestatus_;
  }
  responsestatus_ = nullptr;
}
inline const ::ResponseStatus& FileContent::responsestatus() const {
  const ::ResponseStatus* p = responsestatus_;
  // @@protoc_insertion_point(field_get:FileContent.ResponseStatus)
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline ::ResponseStatus* FileContent::release_responsestatus() {
  // @@protoc_insertion_point(field_release:FileContent.ResponseStatus)
  
  ::ResponseStatus* temp = responsestatus_;
  responsestatus_ = nullptr;
  return temp;
}
inline ::ResponseStatus* FileContent::mutable_responsestatus() {
  
  if (responsestatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArenaNoVirtual());
    responsestatus_ = p;
  }
  // @@protoc_insertion_point(field_mutable:FileContent.ResponseStatus)
  return responsestatus_;
}
inline void FileContent::set_allocated_responsestatus(::ResponseStatus* responsestatus) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete responsestatus_;
  }
  if (responsestatus) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      responsestatus = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, responsestatus, submessage_arena);
    }
    
  } else {
    
  }
  responsestatus_ = responsestatus;
  // @@protoc_insertion_point(field_set_allocated:FileContent.ResponseStatus)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetAccessToken

// string RefreshToken = 1;
inline void GetAccessToken::clear_refreshtoken() {
  refreshtoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetAccessToken::refreshtoken() const {
  // @@protoc_insertion_point(field_get:GetAccessToken.RefreshToken)
  return refreshtoken_.GetNoArena();
}
inline void GetAccessToken::set_refreshtoken(const ::std::string& value) {
  
  refreshtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GetAccessToken.RefreshToken)
}
#if LANG_CXX11
inline void GetAccessToken::set_refreshtoken(::std::string&& value) {
  
  refreshtoken_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetAccessToken.RefreshToken)
}
#endif
inline void GetAccessToken::set_refreshtoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  refreshtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetAccessToken.RefreshToken)
}
inline void GetAccessToken::set_refreshtoken(const char* value, size_t size) {
  
  refreshtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetAccessToken.RefreshToken)
}
inline ::std::string* GetAccessToken::mutable_refreshtoken() {
  
  // @@protoc_insertion_point(field_mutable:GetAccessToken.RefreshToken)
  return refreshtoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetAccessToken::release_refreshtoken() {
  // @@protoc_insertion_point(field_release:GetAccessToken.RefreshToken)
  
  return refreshtoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetAccessToken::set_allocated_refreshtoken(::std::string* refreshtoken) {
  if (refreshtoken != nullptr) {
    
  } else {
    
  }
  refreshtoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), refreshtoken);
  // @@protoc_insertion_point(field_set_allocated:GetAccessToken.RefreshToken)
}

// bool UseTokenCookie = 2;
inline void GetAccessToken::clear_usetokencookie() {
  usetokencookie_ = false;
}
inline bool GetAccessToken::usetokencookie() const {
  // @@protoc_insertion_point(field_get:GetAccessToken.UseTokenCookie)
  return usetokencookie_;
}
inline void GetAccessToken::set_usetokencookie(bool value) {
  
  usetokencookie_ = value;
  // @@protoc_insertion_point(field_set:GetAccessToken.UseTokenCookie)
}

// map<string, string> Meta = 3;
inline int GetAccessToken::meta_size() const {
  return meta_.size();
}
inline void GetAccessToken::clear_meta() {
  meta_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
GetAccessToken::meta() const {
  // @@protoc_insertion_point(field_map:GetAccessToken.Meta)
  return meta_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
GetAccessToken::mutable_meta() {
  // @@protoc_insertion_point(field_mutable_map:GetAccessToken.Meta)
  return meta_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetAccessTokenResponse

// string AccessToken = 1;
inline void GetAccessTokenResponse::clear_accesstoken() {
  accesstoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetAccessTokenResponse::accesstoken() const {
  // @@protoc_insertion_point(field_get:GetAccessTokenResponse.AccessToken)
  return accesstoken_.GetNoArena();
}
inline void GetAccessTokenResponse::set_accesstoken(const ::std::string& value) {
  
  accesstoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GetAccessTokenResponse.AccessToken)
}
#if LANG_CXX11
inline void GetAccessTokenResponse::set_accesstoken(::std::string&& value) {
  
  accesstoken_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetAccessTokenResponse.AccessToken)
}
#endif
inline void GetAccessTokenResponse::set_accesstoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  accesstoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetAccessTokenResponse.AccessToken)
}
inline void GetAccessTokenResponse::set_accesstoken(const char* value, size_t size) {
  
  accesstoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetAccessTokenResponse.AccessToken)
}
inline ::std::string* GetAccessTokenResponse::mutable_accesstoken() {
  
  // @@protoc_insertion_point(field_mutable:GetAccessTokenResponse.AccessToken)
  return accesstoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetAccessTokenResponse::release_accesstoken() {
  // @@protoc_insertion_point(field_release:GetAccessTokenResponse.AccessToken)
  
  return accesstoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetAccessTokenResponse::set_allocated_accesstoken(::std::string* accesstoken) {
  if (accesstoken != nullptr) {
    
  } else {
    
  }
  accesstoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accesstoken);
  // @@protoc_insertion_point(field_set_allocated:GetAccessTokenResponse.AccessToken)
}

// map<string, string> Meta = 2;
inline int GetAccessTokenResponse::meta_size() const {
  return meta_.size();
}
inline void GetAccessTokenResponse::clear_meta() {
  meta_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
GetAccessTokenResponse::meta() const {
  // @@protoc_insertion_point(field_map:GetAccessTokenResponse.Meta)
  return meta_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
GetAccessTokenResponse::mutable_meta() {
  // @@protoc_insertion_point(field_mutable_map:GetAccessTokenResponse.Meta)
  return meta_.MutableMap();
}

// .ResponseStatus ResponseStatus = 3;
inline bool GetAccessTokenResponse::has_responsestatus() const {
  return this != internal_default_instance() && responsestatus_ != nullptr;
}
inline void GetAccessTokenResponse::clear_responsestatus() {
  if (GetArenaNoVirtual() == nullptr && responsestatus_ != nullptr) {
    delete responsestatus_;
  }
  responsestatus_ = nullptr;
}
inline const ::ResponseStatus& GetAccessTokenResponse::responsestatus() const {
  const ::ResponseStatus* p = responsestatus_;
  // @@protoc_insertion_point(field_get:GetAccessTokenResponse.ResponseStatus)
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline ::ResponseStatus* GetAccessTokenResponse::release_responsestatus() {
  // @@protoc_insertion_point(field_release:GetAccessTokenResponse.ResponseStatus)
  
  ::ResponseStatus* temp = responsestatus_;
  responsestatus_ = nullptr;
  return temp;
}
inline ::ResponseStatus* GetAccessTokenResponse::mutable_responsestatus() {
  
  if (responsestatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArenaNoVirtual());
    responsestatus_ = p;
  }
  // @@protoc_insertion_point(field_mutable:GetAccessTokenResponse.ResponseStatus)
  return responsestatus_;
}
inline void GetAccessTokenResponse::set_allocated_responsestatus(::ResponseStatus* responsestatus) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete responsestatus_;
  }
  if (responsestatus) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      responsestatus = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, responsestatus, submessage_arena);
    }
    
  } else {
    
  }
  responsestatus_ = responsestatus;
  // @@protoc_insertion_point(field_set_allocated:GetAccessTokenResponse.ResponseStatus)
}

// -------------------------------------------------------------------

// GetTodo

// int64 Id = 1;
inline void GetTodo::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GetTodo::id() const {
  // @@protoc_insertion_point(field_get:GetTodo.Id)
  return id_;
}
inline void GetTodo::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:GetTodo.Id)
}

// -------------------------------------------------------------------

// GetTodoResponse

// .Todo Result = 1;
inline bool GetTodoResponse::has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline void GetTodoResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::Todo& GetTodoResponse::result() const {
  const ::Todo* p = result_;
  // @@protoc_insertion_point(field_get:GetTodoResponse.Result)
  return p != nullptr ? *p : *reinterpret_cast<const ::Todo*>(
      &::_Todo_default_instance_);
}
inline ::Todo* GetTodoResponse::release_result() {
  // @@protoc_insertion_point(field_release:GetTodoResponse.Result)
  
  ::Todo* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::Todo* GetTodoResponse::mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::Todo>(GetArenaNoVirtual());
    result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:GetTodoResponse.Result)
  return result_;
}
inline void GetTodoResponse::set_allocated_result(::Todo* result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:GetTodoResponse.Result)
}

// .ResponseStatus ResponseStatus = 2;
inline bool GetTodoResponse::has_responsestatus() const {
  return this != internal_default_instance() && responsestatus_ != nullptr;
}
inline void GetTodoResponse::clear_responsestatus() {
  if (GetArenaNoVirtual() == nullptr && responsestatus_ != nullptr) {
    delete responsestatus_;
  }
  responsestatus_ = nullptr;
}
inline const ::ResponseStatus& GetTodoResponse::responsestatus() const {
  const ::ResponseStatus* p = responsestatus_;
  // @@protoc_insertion_point(field_get:GetTodoResponse.ResponseStatus)
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline ::ResponseStatus* GetTodoResponse::release_responsestatus() {
  // @@protoc_insertion_point(field_release:GetTodoResponse.ResponseStatus)
  
  ::ResponseStatus* temp = responsestatus_;
  responsestatus_ = nullptr;
  return temp;
}
inline ::ResponseStatus* GetTodoResponse::mutable_responsestatus() {
  
  if (responsestatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArenaNoVirtual());
    responsestatus_ = p;
  }
  // @@protoc_insertion_point(field_mutable:GetTodoResponse.ResponseStatus)
  return responsestatus_;
}
inline void GetTodoResponse::set_allocated_responsestatus(::ResponseStatus* responsestatus) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete responsestatus_;
  }
  if (responsestatus) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      responsestatus = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, responsestatus, submessage_arena);
    }
    
  } else {
    
  }
  responsestatus_ = responsestatus;
  // @@protoc_insertion_point(field_set_allocated:GetTodoResponse.ResponseStatus)
}

// -------------------------------------------------------------------

// GetTodos

// -------------------------------------------------------------------

// GetTodosResponse

// repeated .Todo Results = 1;
inline int GetTodosResponse::results_size() const {
  return results_.size();
}
inline void GetTodosResponse::clear_results() {
  results_.Clear();
}
inline ::Todo* GetTodosResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:GetTodosResponse.Results)
  return results_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Todo >*
GetTodosResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:GetTodosResponse.Results)
  return &results_;
}
inline const ::Todo& GetTodosResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:GetTodosResponse.Results)
  return results_.Get(index);
}
inline ::Todo* GetTodosResponse::add_results() {
  // @@protoc_insertion_point(field_add:GetTodosResponse.Results)
  return results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Todo >&
GetTodosResponse::results() const {
  // @@protoc_insertion_point(field_list:GetTodosResponse.Results)
  return results_;
}

// .ResponseStatus ResponseStatus = 2;
inline bool GetTodosResponse::has_responsestatus() const {
  return this != internal_default_instance() && responsestatus_ != nullptr;
}
inline void GetTodosResponse::clear_responsestatus() {
  if (GetArenaNoVirtual() == nullptr && responsestatus_ != nullptr) {
    delete responsestatus_;
  }
  responsestatus_ = nullptr;
}
inline const ::ResponseStatus& GetTodosResponse::responsestatus() const {
  const ::ResponseStatus* p = responsestatus_;
  // @@protoc_insertion_point(field_get:GetTodosResponse.ResponseStatus)
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline ::ResponseStatus* GetTodosResponse::release_responsestatus() {
  // @@protoc_insertion_point(field_release:GetTodosResponse.ResponseStatus)
  
  ::ResponseStatus* temp = responsestatus_;
  responsestatus_ = nullptr;
  return temp;
}
inline ::ResponseStatus* GetTodosResponse::mutable_responsestatus() {
  
  if (responsestatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArenaNoVirtual());
    responsestatus_ = p;
  }
  // @@protoc_insertion_point(field_mutable:GetTodosResponse.ResponseStatus)
  return responsestatus_;
}
inline void GetTodosResponse::set_allocated_responsestatus(::ResponseStatus* responsestatus) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete responsestatus_;
  }
  if (responsestatus) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      responsestatus = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, responsestatus, submessage_arena);
    }
    
  } else {
    
  }
  responsestatus_ = responsestatus;
  // @@protoc_insertion_point(field_set_allocated:GetTodosResponse.ResponseStatus)
}

// -------------------------------------------------------------------

// Hello

// string Name = 1;
inline void Hello::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Hello::name() const {
  // @@protoc_insertion_point(field_get:Hello.Name)
  return name_.GetNoArena();
}
inline void Hello::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Hello.Name)
}
#if LANG_CXX11
inline void Hello::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hello.Name)
}
#endif
inline void Hello::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hello.Name)
}
inline void Hello::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hello.Name)
}
inline ::std::string* Hello::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Hello.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Hello::release_name() {
  // @@protoc_insertion_point(field_release:Hello.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Hello::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Hello.Name)
}

// -------------------------------------------------------------------

// HelloResponse

// string Result = 1;
inline void HelloResponse::clear_result() {
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HelloResponse::result() const {
  // @@protoc_insertion_point(field_get:HelloResponse.Result)
  return result_.GetNoArena();
}
inline void HelloResponse::set_result(const ::std::string& value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HelloResponse.Result)
}
#if LANG_CXX11
inline void HelloResponse::set_result(::std::string&& value) {
  
  result_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HelloResponse.Result)
}
#endif
inline void HelloResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HelloResponse.Result)
}
inline void HelloResponse::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HelloResponse.Result)
}
inline ::std::string* HelloResponse::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:HelloResponse.Result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HelloResponse::release_result() {
  // @@protoc_insertion_point(field_release:HelloResponse.Result)
  
  return result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HelloResponse::set_allocated_result(::std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:HelloResponse.Result)
}

// .ResponseStatus ResponseStatus = 2;
inline bool HelloResponse::has_responsestatus() const {
  return this != internal_default_instance() && responsestatus_ != nullptr;
}
inline void HelloResponse::clear_responsestatus() {
  if (GetArenaNoVirtual() == nullptr && responsestatus_ != nullptr) {
    delete responsestatus_;
  }
  responsestatus_ = nullptr;
}
inline const ::ResponseStatus& HelloResponse::responsestatus() const {
  const ::ResponseStatus* p = responsestatus_;
  // @@protoc_insertion_point(field_get:HelloResponse.ResponseStatus)
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline ::ResponseStatus* HelloResponse::release_responsestatus() {
  // @@protoc_insertion_point(field_release:HelloResponse.ResponseStatus)
  
  ::ResponseStatus* temp = responsestatus_;
  responsestatus_ = nullptr;
  return temp;
}
inline ::ResponseStatus* HelloResponse::mutable_responsestatus() {
  
  if (responsestatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArenaNoVirtual());
    responsestatus_ = p;
  }
  // @@protoc_insertion_point(field_mutable:HelloResponse.ResponseStatus)
  return responsestatus_;
}
inline void HelloResponse::set_allocated_responsestatus(::ResponseStatus* responsestatus) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete responsestatus_;
  }
  if (responsestatus) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      responsestatus = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, responsestatus, submessage_arena);
    }
    
  } else {
    
  }
  responsestatus_ = responsestatus;
  // @@protoc_insertion_point(field_set_allocated:HelloResponse.ResponseStatus)
}

// -------------------------------------------------------------------

// HelloSecure

// string Name = 1;
inline void HelloSecure::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HelloSecure::name() const {
  // @@protoc_insertion_point(field_get:HelloSecure.Name)
  return name_.GetNoArena();
}
inline void HelloSecure::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HelloSecure.Name)
}
#if LANG_CXX11
inline void HelloSecure::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HelloSecure.Name)
}
#endif
inline void HelloSecure::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HelloSecure.Name)
}
inline void HelloSecure::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HelloSecure.Name)
}
inline ::std::string* HelloSecure::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:HelloSecure.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HelloSecure::release_name() {
  // @@protoc_insertion_point(field_release:HelloSecure.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HelloSecure::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:HelloSecure.Name)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Register

// string UserName = 1;
inline void Register::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Register::username() const {
  // @@protoc_insertion_point(field_get:Register.UserName)
  return username_.GetNoArena();
}
inline void Register::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Register.UserName)
}
#if LANG_CXX11
inline void Register::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Register.UserName)
}
#endif
inline void Register::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Register.UserName)
}
inline void Register::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Register.UserName)
}
inline ::std::string* Register::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:Register.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Register::release_username() {
  // @@protoc_insertion_point(field_release:Register.UserName)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Register::set_allocated_username(::std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:Register.UserName)
}

// string FirstName = 2;
inline void Register::clear_firstname() {
  firstname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Register::firstname() const {
  // @@protoc_insertion_point(field_get:Register.FirstName)
  return firstname_.GetNoArena();
}
inline void Register::set_firstname(const ::std::string& value) {
  
  firstname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Register.FirstName)
}
#if LANG_CXX11
inline void Register::set_firstname(::std::string&& value) {
  
  firstname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Register.FirstName)
}
#endif
inline void Register::set_firstname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  firstname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Register.FirstName)
}
inline void Register::set_firstname(const char* value, size_t size) {
  
  firstname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Register.FirstName)
}
inline ::std::string* Register::mutable_firstname() {
  
  // @@protoc_insertion_point(field_mutable:Register.FirstName)
  return firstname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Register::release_firstname() {
  // @@protoc_insertion_point(field_release:Register.FirstName)
  
  return firstname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Register::set_allocated_firstname(::std::string* firstname) {
  if (firstname != nullptr) {
    
  } else {
    
  }
  firstname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firstname);
  // @@protoc_insertion_point(field_set_allocated:Register.FirstName)
}

// string LastName = 3;
inline void Register::clear_lastname() {
  lastname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Register::lastname() const {
  // @@protoc_insertion_point(field_get:Register.LastName)
  return lastname_.GetNoArena();
}
inline void Register::set_lastname(const ::std::string& value) {
  
  lastname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Register.LastName)
}
#if LANG_CXX11
inline void Register::set_lastname(::std::string&& value) {
  
  lastname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Register.LastName)
}
#endif
inline void Register::set_lastname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lastname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Register.LastName)
}
inline void Register::set_lastname(const char* value, size_t size) {
  
  lastname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Register.LastName)
}
inline ::std::string* Register::mutable_lastname() {
  
  // @@protoc_insertion_point(field_mutable:Register.LastName)
  return lastname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Register::release_lastname() {
  // @@protoc_insertion_point(field_release:Register.LastName)
  
  return lastname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Register::set_allocated_lastname(::std::string* lastname) {
  if (lastname != nullptr) {
    
  } else {
    
  }
  lastname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lastname);
  // @@protoc_insertion_point(field_set_allocated:Register.LastName)
}

// string DisplayName = 4;
inline void Register::clear_displayname() {
  displayname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Register::displayname() const {
  // @@protoc_insertion_point(field_get:Register.DisplayName)
  return displayname_.GetNoArena();
}
inline void Register::set_displayname(const ::std::string& value) {
  
  displayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Register.DisplayName)
}
#if LANG_CXX11
inline void Register::set_displayname(::std::string&& value) {
  
  displayname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Register.DisplayName)
}
#endif
inline void Register::set_displayname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  displayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Register.DisplayName)
}
inline void Register::set_displayname(const char* value, size_t size) {
  
  displayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Register.DisplayName)
}
inline ::std::string* Register::mutable_displayname() {
  
  // @@protoc_insertion_point(field_mutable:Register.DisplayName)
  return displayname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Register::release_displayname() {
  // @@protoc_insertion_point(field_release:Register.DisplayName)
  
  return displayname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Register::set_allocated_displayname(::std::string* displayname) {
  if (displayname != nullptr) {
    
  } else {
    
  }
  displayname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), displayname);
  // @@protoc_insertion_point(field_set_allocated:Register.DisplayName)
}

// string Email = 5;
inline void Register::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Register::email() const {
  // @@protoc_insertion_point(field_get:Register.Email)
  return email_.GetNoArena();
}
inline void Register::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Register.Email)
}
#if LANG_CXX11
inline void Register::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Register.Email)
}
#endif
inline void Register::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Register.Email)
}
inline void Register::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Register.Email)
}
inline ::std::string* Register::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:Register.Email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Register::release_email() {
  // @@protoc_insertion_point(field_release:Register.Email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Register::set_allocated_email(::std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:Register.Email)
}

// string Password = 6;
inline void Register::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Register::password() const {
  // @@protoc_insertion_point(field_get:Register.Password)
  return password_.GetNoArena();
}
inline void Register::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Register.Password)
}
#if LANG_CXX11
inline void Register::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Register.Password)
}
#endif
inline void Register::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Register.Password)
}
inline void Register::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Register.Password)
}
inline ::std::string* Register::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:Register.Password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Register::release_password() {
  // @@protoc_insertion_point(field_release:Register.Password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Register::set_allocated_password(::std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:Register.Password)
}

// string ConfirmPassword = 7;
inline void Register::clear_confirmpassword() {
  confirmpassword_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Register::confirmpassword() const {
  // @@protoc_insertion_point(field_get:Register.ConfirmPassword)
  return confirmpassword_.GetNoArena();
}
inline void Register::set_confirmpassword(const ::std::string& value) {
  
  confirmpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Register.ConfirmPassword)
}
#if LANG_CXX11
inline void Register::set_confirmpassword(::std::string&& value) {
  
  confirmpassword_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Register.ConfirmPassword)
}
#endif
inline void Register::set_confirmpassword(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  confirmpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Register.ConfirmPassword)
}
inline void Register::set_confirmpassword(const char* value, size_t size) {
  
  confirmpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Register.ConfirmPassword)
}
inline ::std::string* Register::mutable_confirmpassword() {
  
  // @@protoc_insertion_point(field_mutable:Register.ConfirmPassword)
  return confirmpassword_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Register::release_confirmpassword() {
  // @@protoc_insertion_point(field_release:Register.ConfirmPassword)
  
  return confirmpassword_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Register::set_allocated_confirmpassword(::std::string* confirmpassword) {
  if (confirmpassword != nullptr) {
    
  } else {
    
  }
  confirmpassword_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), confirmpassword);
  // @@protoc_insertion_point(field_set_allocated:Register.ConfirmPassword)
}

// bool AutoLogin = 8;
inline void Register::clear_autologin() {
  autologin_ = false;
}
inline bool Register::autologin() const {
  // @@protoc_insertion_point(field_get:Register.AutoLogin)
  return autologin_;
}
inline void Register::set_autologin(bool value) {
  
  autologin_ = value;
  // @@protoc_insertion_point(field_set:Register.AutoLogin)
}

// string Continue = 9;
inline void Register::clear_continue_() {
  continue__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Register::continue_() const {
  // @@protoc_insertion_point(field_get:Register.Continue)
  return continue__.GetNoArena();
}
inline void Register::set_continue_(const ::std::string& value) {
  
  continue__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Register.Continue)
}
#if LANG_CXX11
inline void Register::set_continue_(::std::string&& value) {
  
  continue__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Register.Continue)
}
#endif
inline void Register::set_continue_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  continue__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Register.Continue)
}
inline void Register::set_continue_(const char* value, size_t size) {
  
  continue__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Register.Continue)
}
inline ::std::string* Register::mutable_continue_() {
  
  // @@protoc_insertion_point(field_mutable:Register.Continue)
  return continue__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Register::release_continue_() {
  // @@protoc_insertion_point(field_release:Register.Continue)
  
  return continue__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Register::set_allocated_continue_(::std::string* continue_) {
  if (continue_ != nullptr) {
    
  } else {
    
  }
  continue__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), continue_);
  // @@protoc_insertion_point(field_set_allocated:Register.Continue)
}

// string ErrorView = 10;
inline void Register::clear_errorview() {
  errorview_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Register::errorview() const {
  // @@protoc_insertion_point(field_get:Register.ErrorView)
  return errorview_.GetNoArena();
}
inline void Register::set_errorview(const ::std::string& value) {
  
  errorview_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Register.ErrorView)
}
#if LANG_CXX11
inline void Register::set_errorview(::std::string&& value) {
  
  errorview_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Register.ErrorView)
}
#endif
inline void Register::set_errorview(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errorview_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Register.ErrorView)
}
inline void Register::set_errorview(const char* value, size_t size) {
  
  errorview_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Register.ErrorView)
}
inline ::std::string* Register::mutable_errorview() {
  
  // @@protoc_insertion_point(field_mutable:Register.ErrorView)
  return errorview_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Register::release_errorview() {
  // @@protoc_insertion_point(field_release:Register.ErrorView)
  
  return errorview_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Register::set_allocated_errorview(::std::string* errorview) {
  if (errorview != nullptr) {
    
  } else {
    
  }
  errorview_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errorview);
  // @@protoc_insertion_point(field_set_allocated:Register.ErrorView)
}

// map<string, string> Meta = 11;
inline int Register::meta_size() const {
  return meta_.size();
}
inline void Register::clear_meta() {
  meta_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Register::meta() const {
  // @@protoc_insertion_point(field_map:Register.Meta)
  return meta_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Register::mutable_meta() {
  // @@protoc_insertion_point(field_mutable_map:Register.Meta)
  return meta_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RegisterResponse

// string UserId = 1;
inline void RegisterResponse::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterResponse::userid() const {
  // @@protoc_insertion_point(field_get:RegisterResponse.UserId)
  return userid_.GetNoArena();
}
inline void RegisterResponse::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RegisterResponse.UserId)
}
#if LANG_CXX11
inline void RegisterResponse::set_userid(::std::string&& value) {
  
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RegisterResponse.UserId)
}
#endif
inline void RegisterResponse::set_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RegisterResponse.UserId)
}
inline void RegisterResponse::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RegisterResponse.UserId)
}
inline ::std::string* RegisterResponse::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:RegisterResponse.UserId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterResponse::release_userid() {
  // @@protoc_insertion_point(field_release:RegisterResponse.UserId)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterResponse::set_allocated_userid(::std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:RegisterResponse.UserId)
}

// string SessionId = 2;
inline void RegisterResponse::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:RegisterResponse.SessionId)
  return sessionid_.GetNoArena();
}
inline void RegisterResponse::set_sessionid(const ::std::string& value) {
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RegisterResponse.SessionId)
}
#if LANG_CXX11
inline void RegisterResponse::set_sessionid(::std::string&& value) {
  
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RegisterResponse.SessionId)
}
#endif
inline void RegisterResponse::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RegisterResponse.SessionId)
}
inline void RegisterResponse::set_sessionid(const char* value, size_t size) {
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RegisterResponse.SessionId)
}
inline ::std::string* RegisterResponse::mutable_sessionid() {
  
  // @@protoc_insertion_point(field_mutable:RegisterResponse.SessionId)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterResponse::release_sessionid() {
  // @@protoc_insertion_point(field_release:RegisterResponse.SessionId)
  
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterResponse::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != nullptr) {
    
  } else {
    
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:RegisterResponse.SessionId)
}

// string UserName = 3;
inline void RegisterResponse::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterResponse::username() const {
  // @@protoc_insertion_point(field_get:RegisterResponse.UserName)
  return username_.GetNoArena();
}
inline void RegisterResponse::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RegisterResponse.UserName)
}
#if LANG_CXX11
inline void RegisterResponse::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RegisterResponse.UserName)
}
#endif
inline void RegisterResponse::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RegisterResponse.UserName)
}
inline void RegisterResponse::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RegisterResponse.UserName)
}
inline ::std::string* RegisterResponse::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:RegisterResponse.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterResponse::release_username() {
  // @@protoc_insertion_point(field_release:RegisterResponse.UserName)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterResponse::set_allocated_username(::std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:RegisterResponse.UserName)
}

// string ReferrerUrl = 4;
inline void RegisterResponse::clear_referrerurl() {
  referrerurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterResponse::referrerurl() const {
  // @@protoc_insertion_point(field_get:RegisterResponse.ReferrerUrl)
  return referrerurl_.GetNoArena();
}
inline void RegisterResponse::set_referrerurl(const ::std::string& value) {
  
  referrerurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RegisterResponse.ReferrerUrl)
}
#if LANG_CXX11
inline void RegisterResponse::set_referrerurl(::std::string&& value) {
  
  referrerurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RegisterResponse.ReferrerUrl)
}
#endif
inline void RegisterResponse::set_referrerurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  referrerurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RegisterResponse.ReferrerUrl)
}
inline void RegisterResponse::set_referrerurl(const char* value, size_t size) {
  
  referrerurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RegisterResponse.ReferrerUrl)
}
inline ::std::string* RegisterResponse::mutable_referrerurl() {
  
  // @@protoc_insertion_point(field_mutable:RegisterResponse.ReferrerUrl)
  return referrerurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterResponse::release_referrerurl() {
  // @@protoc_insertion_point(field_release:RegisterResponse.ReferrerUrl)
  
  return referrerurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterResponse::set_allocated_referrerurl(::std::string* referrerurl) {
  if (referrerurl != nullptr) {
    
  } else {
    
  }
  referrerurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), referrerurl);
  // @@protoc_insertion_point(field_set_allocated:RegisterResponse.ReferrerUrl)
}

// string BearerToken = 5;
inline void RegisterResponse::clear_bearertoken() {
  bearertoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterResponse::bearertoken() const {
  // @@protoc_insertion_point(field_get:RegisterResponse.BearerToken)
  return bearertoken_.GetNoArena();
}
inline void RegisterResponse::set_bearertoken(const ::std::string& value) {
  
  bearertoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RegisterResponse.BearerToken)
}
#if LANG_CXX11
inline void RegisterResponse::set_bearertoken(::std::string&& value) {
  
  bearertoken_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RegisterResponse.BearerToken)
}
#endif
inline void RegisterResponse::set_bearertoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bearertoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RegisterResponse.BearerToken)
}
inline void RegisterResponse::set_bearertoken(const char* value, size_t size) {
  
  bearertoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RegisterResponse.BearerToken)
}
inline ::std::string* RegisterResponse::mutable_bearertoken() {
  
  // @@protoc_insertion_point(field_mutable:RegisterResponse.BearerToken)
  return bearertoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterResponse::release_bearertoken() {
  // @@protoc_insertion_point(field_release:RegisterResponse.BearerToken)
  
  return bearertoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterResponse::set_allocated_bearertoken(::std::string* bearertoken) {
  if (bearertoken != nullptr) {
    
  } else {
    
  }
  bearertoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bearertoken);
  // @@protoc_insertion_point(field_set_allocated:RegisterResponse.BearerToken)
}

// string RefreshToken = 6;
inline void RegisterResponse::clear_refreshtoken() {
  refreshtoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterResponse::refreshtoken() const {
  // @@protoc_insertion_point(field_get:RegisterResponse.RefreshToken)
  return refreshtoken_.GetNoArena();
}
inline void RegisterResponse::set_refreshtoken(const ::std::string& value) {
  
  refreshtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RegisterResponse.RefreshToken)
}
#if LANG_CXX11
inline void RegisterResponse::set_refreshtoken(::std::string&& value) {
  
  refreshtoken_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RegisterResponse.RefreshToken)
}
#endif
inline void RegisterResponse::set_refreshtoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  refreshtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RegisterResponse.RefreshToken)
}
inline void RegisterResponse::set_refreshtoken(const char* value, size_t size) {
  
  refreshtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RegisterResponse.RefreshToken)
}
inline ::std::string* RegisterResponse::mutable_refreshtoken() {
  
  // @@protoc_insertion_point(field_mutable:RegisterResponse.RefreshToken)
  return refreshtoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterResponse::release_refreshtoken() {
  // @@protoc_insertion_point(field_release:RegisterResponse.RefreshToken)
  
  return refreshtoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterResponse::set_allocated_refreshtoken(::std::string* refreshtoken) {
  if (refreshtoken != nullptr) {
    
  } else {
    
  }
  refreshtoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), refreshtoken);
  // @@protoc_insertion_point(field_set_allocated:RegisterResponse.RefreshToken)
}

// .ResponseStatus ResponseStatus = 7;
inline bool RegisterResponse::has_responsestatus() const {
  return this != internal_default_instance() && responsestatus_ != nullptr;
}
inline void RegisterResponse::clear_responsestatus() {
  if (GetArenaNoVirtual() == nullptr && responsestatus_ != nullptr) {
    delete responsestatus_;
  }
  responsestatus_ = nullptr;
}
inline const ::ResponseStatus& RegisterResponse::responsestatus() const {
  const ::ResponseStatus* p = responsestatus_;
  // @@protoc_insertion_point(field_get:RegisterResponse.ResponseStatus)
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline ::ResponseStatus* RegisterResponse::release_responsestatus() {
  // @@protoc_insertion_point(field_release:RegisterResponse.ResponseStatus)
  
  ::ResponseStatus* temp = responsestatus_;
  responsestatus_ = nullptr;
  return temp;
}
inline ::ResponseStatus* RegisterResponse::mutable_responsestatus() {
  
  if (responsestatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArenaNoVirtual());
    responsestatus_ = p;
  }
  // @@protoc_insertion_point(field_mutable:RegisterResponse.ResponseStatus)
  return responsestatus_;
}
inline void RegisterResponse::set_allocated_responsestatus(::ResponseStatus* responsestatus) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete responsestatus_;
  }
  if (responsestatus) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      responsestatus = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, responsestatus, submessage_arena);
    }
    
  } else {
    
  }
  responsestatus_ = responsestatus;
  // @@protoc_insertion_point(field_set_allocated:RegisterResponse.ResponseStatus)
}

// map<string, string> Meta = 8;
inline int RegisterResponse::meta_size() const {
  return meta_.size();
}
inline void RegisterResponse::clear_meta() {
  meta_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
RegisterResponse::meta() const {
  // @@protoc_insertion_point(field_map:RegisterResponse.Meta)
  return meta_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
RegisterResponse::mutable_meta() {
  // @@protoc_insertion_point(field_mutable_map:RegisterResponse.Meta)
  return meta_.MutableMap();
}

// -------------------------------------------------------------------

// ResetTodos

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ResponseError

// string ErrorCode = 1;
inline void ResponseError::clear_errorcode() {
  errorcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResponseError::errorcode() const {
  // @@protoc_insertion_point(field_get:ResponseError.ErrorCode)
  return errorcode_.GetNoArena();
}
inline void ResponseError::set_errorcode(const ::std::string& value) {
  
  errorcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ResponseError.ErrorCode)
}
#if LANG_CXX11
inline void ResponseError::set_errorcode(::std::string&& value) {
  
  errorcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ResponseError.ErrorCode)
}
#endif
inline void ResponseError::set_errorcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errorcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ResponseError.ErrorCode)
}
inline void ResponseError::set_errorcode(const char* value, size_t size) {
  
  errorcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ResponseError.ErrorCode)
}
inline ::std::string* ResponseError::mutable_errorcode() {
  
  // @@protoc_insertion_point(field_mutable:ResponseError.ErrorCode)
  return errorcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseError::release_errorcode() {
  // @@protoc_insertion_point(field_release:ResponseError.ErrorCode)
  
  return errorcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseError::set_allocated_errorcode(::std::string* errorcode) {
  if (errorcode != nullptr) {
    
  } else {
    
  }
  errorcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errorcode);
  // @@protoc_insertion_point(field_set_allocated:ResponseError.ErrorCode)
}

// string FieldName = 2;
inline void ResponseError::clear_fieldname() {
  fieldname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResponseError::fieldname() const {
  // @@protoc_insertion_point(field_get:ResponseError.FieldName)
  return fieldname_.GetNoArena();
}
inline void ResponseError::set_fieldname(const ::std::string& value) {
  
  fieldname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ResponseError.FieldName)
}
#if LANG_CXX11
inline void ResponseError::set_fieldname(::std::string&& value) {
  
  fieldname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ResponseError.FieldName)
}
#endif
inline void ResponseError::set_fieldname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fieldname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ResponseError.FieldName)
}
inline void ResponseError::set_fieldname(const char* value, size_t size) {
  
  fieldname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ResponseError.FieldName)
}
inline ::std::string* ResponseError::mutable_fieldname() {
  
  // @@protoc_insertion_point(field_mutable:ResponseError.FieldName)
  return fieldname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseError::release_fieldname() {
  // @@protoc_insertion_point(field_release:ResponseError.FieldName)
  
  return fieldname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseError::set_allocated_fieldname(::std::string* fieldname) {
  if (fieldname != nullptr) {
    
  } else {
    
  }
  fieldname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fieldname);
  // @@protoc_insertion_point(field_set_allocated:ResponseError.FieldName)
}

// string Message = 3;
inline void ResponseError::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResponseError::message() const {
  // @@protoc_insertion_point(field_get:ResponseError.Message)
  return message_.GetNoArena();
}
inline void ResponseError::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ResponseError.Message)
}
#if LANG_CXX11
inline void ResponseError::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ResponseError.Message)
}
#endif
inline void ResponseError::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ResponseError.Message)
}
inline void ResponseError::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ResponseError.Message)
}
inline ::std::string* ResponseError::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:ResponseError.Message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseError::release_message() {
  // @@protoc_insertion_point(field_release:ResponseError.Message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseError::set_allocated_message(::std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:ResponseError.Message)
}

// map<string, string> Meta = 4;
inline int ResponseError::meta_size() const {
  return meta_.size();
}
inline void ResponseError::clear_meta() {
  meta_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
ResponseError::meta() const {
  // @@protoc_insertion_point(field_map:ResponseError.Meta)
  return meta_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
ResponseError::mutable_meta() {
  // @@protoc_insertion_point(field_mutable_map:ResponseError.Meta)
  return meta_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ResponseStatus

// string ErrorCode = 1;
inline void ResponseStatus::clear_errorcode() {
  errorcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResponseStatus::errorcode() const {
  // @@protoc_insertion_point(field_get:ResponseStatus.ErrorCode)
  return errorcode_.GetNoArena();
}
inline void ResponseStatus::set_errorcode(const ::std::string& value) {
  
  errorcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ResponseStatus.ErrorCode)
}
#if LANG_CXX11
inline void ResponseStatus::set_errorcode(::std::string&& value) {
  
  errorcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ResponseStatus.ErrorCode)
}
#endif
inline void ResponseStatus::set_errorcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errorcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ResponseStatus.ErrorCode)
}
inline void ResponseStatus::set_errorcode(const char* value, size_t size) {
  
  errorcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ResponseStatus.ErrorCode)
}
inline ::std::string* ResponseStatus::mutable_errorcode() {
  
  // @@protoc_insertion_point(field_mutable:ResponseStatus.ErrorCode)
  return errorcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseStatus::release_errorcode() {
  // @@protoc_insertion_point(field_release:ResponseStatus.ErrorCode)
  
  return errorcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseStatus::set_allocated_errorcode(::std::string* errorcode) {
  if (errorcode != nullptr) {
    
  } else {
    
  }
  errorcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errorcode);
  // @@protoc_insertion_point(field_set_allocated:ResponseStatus.ErrorCode)
}

// string Message = 2;
inline void ResponseStatus::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResponseStatus::message() const {
  // @@protoc_insertion_point(field_get:ResponseStatus.Message)
  return message_.GetNoArena();
}
inline void ResponseStatus::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ResponseStatus.Message)
}
#if LANG_CXX11
inline void ResponseStatus::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ResponseStatus.Message)
}
#endif
inline void ResponseStatus::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ResponseStatus.Message)
}
inline void ResponseStatus::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ResponseStatus.Message)
}
inline ::std::string* ResponseStatus::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:ResponseStatus.Message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseStatus::release_message() {
  // @@protoc_insertion_point(field_release:ResponseStatus.Message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseStatus::set_allocated_message(::std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:ResponseStatus.Message)
}

// string StackTrace = 3;
inline void ResponseStatus::clear_stacktrace() {
  stacktrace_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResponseStatus::stacktrace() const {
  // @@protoc_insertion_point(field_get:ResponseStatus.StackTrace)
  return stacktrace_.GetNoArena();
}
inline void ResponseStatus::set_stacktrace(const ::std::string& value) {
  
  stacktrace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ResponseStatus.StackTrace)
}
#if LANG_CXX11
inline void ResponseStatus::set_stacktrace(::std::string&& value) {
  
  stacktrace_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ResponseStatus.StackTrace)
}
#endif
inline void ResponseStatus::set_stacktrace(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stacktrace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ResponseStatus.StackTrace)
}
inline void ResponseStatus::set_stacktrace(const char* value, size_t size) {
  
  stacktrace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ResponseStatus.StackTrace)
}
inline ::std::string* ResponseStatus::mutable_stacktrace() {
  
  // @@protoc_insertion_point(field_mutable:ResponseStatus.StackTrace)
  return stacktrace_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseStatus::release_stacktrace() {
  // @@protoc_insertion_point(field_release:ResponseStatus.StackTrace)
  
  return stacktrace_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseStatus::set_allocated_stacktrace(::std::string* stacktrace) {
  if (stacktrace != nullptr) {
    
  } else {
    
  }
  stacktrace_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stacktrace);
  // @@protoc_insertion_point(field_set_allocated:ResponseStatus.StackTrace)
}

// repeated .ResponseError Errors = 4;
inline int ResponseStatus::errors_size() const {
  return errors_.size();
}
inline void ResponseStatus::clear_errors() {
  errors_.Clear();
}
inline ::ResponseError* ResponseStatus::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:ResponseStatus.Errors)
  return errors_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ResponseError >*
ResponseStatus::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:ResponseStatus.Errors)
  return &errors_;
}
inline const ::ResponseError& ResponseStatus::errors(int index) const {
  // @@protoc_insertion_point(field_get:ResponseStatus.Errors)
  return errors_.Get(index);
}
inline ::ResponseError* ResponseStatus::add_errors() {
  // @@protoc_insertion_point(field_add:ResponseStatus.Errors)
  return errors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ResponseError >&
ResponseStatus::errors() const {
  // @@protoc_insertion_point(field_list:ResponseStatus.Errors)
  return errors_;
}

// map<string, string> Meta = 5;
inline int ResponseStatus::meta_size() const {
  return meta_.size();
}
inline void ResponseStatus::clear_meta() {
  meta_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
ResponseStatus::meta() const {
  // @@protoc_insertion_point(field_map:ResponseStatus.Meta)
  return meta_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
ResponseStatus::mutable_meta() {
  // @@protoc_insertion_point(field_mutable_map:ResponseStatus.Meta)
  return meta_.MutableMap();
}

// -------------------------------------------------------------------

// StreamFiles

// repeated string Paths = 1;
inline int StreamFiles::paths_size() const {
  return paths_.size();
}
inline void StreamFiles::clear_paths() {
  paths_.Clear();
}
inline const ::std::string& StreamFiles::paths(int index) const {
  // @@protoc_insertion_point(field_get:StreamFiles.Paths)
  return paths_.Get(index);
}
inline ::std::string* StreamFiles::mutable_paths(int index) {
  // @@protoc_insertion_point(field_mutable:StreamFiles.Paths)
  return paths_.Mutable(index);
}
inline void StreamFiles::set_paths(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:StreamFiles.Paths)
  paths_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void StreamFiles::set_paths(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:StreamFiles.Paths)
  paths_.Mutable(index)->assign(std::move(value));
}
#endif
inline void StreamFiles::set_paths(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  paths_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StreamFiles.Paths)
}
inline void StreamFiles::set_paths(int index, const char* value, size_t size) {
  paths_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StreamFiles.Paths)
}
inline ::std::string* StreamFiles::add_paths() {
  // @@protoc_insertion_point(field_add_mutable:StreamFiles.Paths)
  return paths_.Add();
}
inline void StreamFiles::add_paths(const ::std::string& value) {
  paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StreamFiles.Paths)
}
#if LANG_CXX11
inline void StreamFiles::add_paths(::std::string&& value) {
  paths_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StreamFiles.Paths)
}
#endif
inline void StreamFiles::add_paths(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StreamFiles.Paths)
}
inline void StreamFiles::add_paths(const char* value, size_t size) {
  paths_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StreamFiles.Paths)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
StreamFiles::paths() const {
  // @@protoc_insertion_point(field_list:StreamFiles.Paths)
  return paths_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
StreamFiles::mutable_paths() {
  // @@protoc_insertion_point(field_mutable_list:StreamFiles.Paths)
  return &paths_;
}

// -------------------------------------------------------------------

// StreamServerEvents

// repeated string Channels = 1;
inline int StreamServerEvents::channels_size() const {
  return channels_.size();
}
inline void StreamServerEvents::clear_channels() {
  channels_.Clear();
}
inline const ::std::string& StreamServerEvents::channels(int index) const {
  // @@protoc_insertion_point(field_get:StreamServerEvents.Channels)
  return channels_.Get(index);
}
inline ::std::string* StreamServerEvents::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:StreamServerEvents.Channels)
  return channels_.Mutable(index);
}
inline void StreamServerEvents::set_channels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:StreamServerEvents.Channels)
  channels_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void StreamServerEvents::set_channels(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:StreamServerEvents.Channels)
  channels_.Mutable(index)->assign(std::move(value));
}
#endif
inline void StreamServerEvents::set_channels(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  channels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StreamServerEvents.Channels)
}
inline void StreamServerEvents::set_channels(int index, const char* value, size_t size) {
  channels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StreamServerEvents.Channels)
}
inline ::std::string* StreamServerEvents::add_channels() {
  // @@protoc_insertion_point(field_add_mutable:StreamServerEvents.Channels)
  return channels_.Add();
}
inline void StreamServerEvents::add_channels(const ::std::string& value) {
  channels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StreamServerEvents.Channels)
}
#if LANG_CXX11
inline void StreamServerEvents::add_channels(::std::string&& value) {
  channels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StreamServerEvents.Channels)
}
#endif
inline void StreamServerEvents::add_channels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  channels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StreamServerEvents.Channels)
}
inline void StreamServerEvents::add_channels(const char* value, size_t size) {
  channels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StreamServerEvents.Channels)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
StreamServerEvents::channels() const {
  // @@protoc_insertion_point(field_list:StreamServerEvents.Channels)
  return channels_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
StreamServerEvents::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:StreamServerEvents.Channels)
  return &channels_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// StreamServerEventsResponse

// int64 EventId = 1;
inline void StreamServerEventsResponse::clear_eventid() {
  eventid_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 StreamServerEventsResponse::eventid() const {
  // @@protoc_insertion_point(field_get:StreamServerEventsResponse.EventId)
  return eventid_;
}
inline void StreamServerEventsResponse::set_eventid(::google::protobuf::int64 value) {
  
  eventid_ = value;
  // @@protoc_insertion_point(field_set:StreamServerEventsResponse.EventId)
}

// string Channel = 2;
inline void StreamServerEventsResponse::clear_channel() {
  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StreamServerEventsResponse::channel() const {
  // @@protoc_insertion_point(field_get:StreamServerEventsResponse.Channel)
  return channel_.GetNoArena();
}
inline void StreamServerEventsResponse::set_channel(const ::std::string& value) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StreamServerEventsResponse.Channel)
}
#if LANG_CXX11
inline void StreamServerEventsResponse::set_channel(::std::string&& value) {
  
  channel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StreamServerEventsResponse.Channel)
}
#endif
inline void StreamServerEventsResponse::set_channel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StreamServerEventsResponse.Channel)
}
inline void StreamServerEventsResponse::set_channel(const char* value, size_t size) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StreamServerEventsResponse.Channel)
}
inline ::std::string* StreamServerEventsResponse::mutable_channel() {
  
  // @@protoc_insertion_point(field_mutable:StreamServerEventsResponse.Channel)
  return channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StreamServerEventsResponse::release_channel() {
  // @@protoc_insertion_point(field_release:StreamServerEventsResponse.Channel)
  
  return channel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StreamServerEventsResponse::set_allocated_channel(::std::string* channel) {
  if (channel != nullptr) {
    
  } else {
    
  }
  channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:StreamServerEventsResponse.Channel)
}

// string Selector = 4;
inline void StreamServerEventsResponse::clear_selector() {
  selector_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StreamServerEventsResponse::selector() const {
  // @@protoc_insertion_point(field_get:StreamServerEventsResponse.Selector)
  return selector_.GetNoArena();
}
inline void StreamServerEventsResponse::set_selector(const ::std::string& value) {
  
  selector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StreamServerEventsResponse.Selector)
}
#if LANG_CXX11
inline void StreamServerEventsResponse::set_selector(::std::string&& value) {
  
  selector_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StreamServerEventsResponse.Selector)
}
#endif
inline void StreamServerEventsResponse::set_selector(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  selector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StreamServerEventsResponse.Selector)
}
inline void StreamServerEventsResponse::set_selector(const char* value, size_t size) {
  
  selector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StreamServerEventsResponse.Selector)
}
inline ::std::string* StreamServerEventsResponse::mutable_selector() {
  
  // @@protoc_insertion_point(field_mutable:StreamServerEventsResponse.Selector)
  return selector_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StreamServerEventsResponse::release_selector() {
  // @@protoc_insertion_point(field_release:StreamServerEventsResponse.Selector)
  
  return selector_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StreamServerEventsResponse::set_allocated_selector(::std::string* selector) {
  if (selector != nullptr) {
    
  } else {
    
  }
  selector_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), selector);
  // @@protoc_insertion_point(field_set_allocated:StreamServerEventsResponse.Selector)
}

// string Json = 5;
inline void StreamServerEventsResponse::clear_json() {
  json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StreamServerEventsResponse::json() const {
  // @@protoc_insertion_point(field_get:StreamServerEventsResponse.Json)
  return json_.GetNoArena();
}
inline void StreamServerEventsResponse::set_json(const ::std::string& value) {
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StreamServerEventsResponse.Json)
}
#if LANG_CXX11
inline void StreamServerEventsResponse::set_json(::std::string&& value) {
  
  json_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StreamServerEventsResponse.Json)
}
#endif
inline void StreamServerEventsResponse::set_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StreamServerEventsResponse.Json)
}
inline void StreamServerEventsResponse::set_json(const char* value, size_t size) {
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StreamServerEventsResponse.Json)
}
inline ::std::string* StreamServerEventsResponse::mutable_json() {
  
  // @@protoc_insertion_point(field_mutable:StreamServerEventsResponse.Json)
  return json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StreamServerEventsResponse::release_json() {
  // @@protoc_insertion_point(field_release:StreamServerEventsResponse.Json)
  
  return json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StreamServerEventsResponse::set_allocated_json(::std::string* json) {
  if (json != nullptr) {
    
  } else {
    
  }
  json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), json);
  // @@protoc_insertion_point(field_set_allocated:StreamServerEventsResponse.Json)
}

// string Op = 6;
inline void StreamServerEventsResponse::clear_op() {
  op_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StreamServerEventsResponse::op() const {
  // @@protoc_insertion_point(field_get:StreamServerEventsResponse.Op)
  return op_.GetNoArena();
}
inline void StreamServerEventsResponse::set_op(const ::std::string& value) {
  
  op_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StreamServerEventsResponse.Op)
}
#if LANG_CXX11
inline void StreamServerEventsResponse::set_op(::std::string&& value) {
  
  op_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StreamServerEventsResponse.Op)
}
#endif
inline void StreamServerEventsResponse::set_op(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  op_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StreamServerEventsResponse.Op)
}
inline void StreamServerEventsResponse::set_op(const char* value, size_t size) {
  
  op_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StreamServerEventsResponse.Op)
}
inline ::std::string* StreamServerEventsResponse::mutable_op() {
  
  // @@protoc_insertion_point(field_mutable:StreamServerEventsResponse.Op)
  return op_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StreamServerEventsResponse::release_op() {
  // @@protoc_insertion_point(field_release:StreamServerEventsResponse.Op)
  
  return op_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StreamServerEventsResponse::set_allocated_op(::std::string* op) {
  if (op != nullptr) {
    
  } else {
    
  }
  op_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), op);
  // @@protoc_insertion_point(field_set_allocated:StreamServerEventsResponse.Op)
}

// string Target = 7;
inline void StreamServerEventsResponse::clear_target() {
  target_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StreamServerEventsResponse::target() const {
  // @@protoc_insertion_point(field_get:StreamServerEventsResponse.Target)
  return target_.GetNoArena();
}
inline void StreamServerEventsResponse::set_target(const ::std::string& value) {
  
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StreamServerEventsResponse.Target)
}
#if LANG_CXX11
inline void StreamServerEventsResponse::set_target(::std::string&& value) {
  
  target_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StreamServerEventsResponse.Target)
}
#endif
inline void StreamServerEventsResponse::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StreamServerEventsResponse.Target)
}
inline void StreamServerEventsResponse::set_target(const char* value, size_t size) {
  
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StreamServerEventsResponse.Target)
}
inline ::std::string* StreamServerEventsResponse::mutable_target() {
  
  // @@protoc_insertion_point(field_mutable:StreamServerEventsResponse.Target)
  return target_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StreamServerEventsResponse::release_target() {
  // @@protoc_insertion_point(field_release:StreamServerEventsResponse.Target)
  
  return target_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StreamServerEventsResponse::set_allocated_target(::std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target);
  // @@protoc_insertion_point(field_set_allocated:StreamServerEventsResponse.Target)
}

// string CssSelector = 8;
inline void StreamServerEventsResponse::clear_cssselector() {
  cssselector_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StreamServerEventsResponse::cssselector() const {
  // @@protoc_insertion_point(field_get:StreamServerEventsResponse.CssSelector)
  return cssselector_.GetNoArena();
}
inline void StreamServerEventsResponse::set_cssselector(const ::std::string& value) {
  
  cssselector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StreamServerEventsResponse.CssSelector)
}
#if LANG_CXX11
inline void StreamServerEventsResponse::set_cssselector(::std::string&& value) {
  
  cssselector_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StreamServerEventsResponse.CssSelector)
}
#endif
inline void StreamServerEventsResponse::set_cssselector(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cssselector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StreamServerEventsResponse.CssSelector)
}
inline void StreamServerEventsResponse::set_cssselector(const char* value, size_t size) {
  
  cssselector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StreamServerEventsResponse.CssSelector)
}
inline ::std::string* StreamServerEventsResponse::mutable_cssselector() {
  
  // @@protoc_insertion_point(field_mutable:StreamServerEventsResponse.CssSelector)
  return cssselector_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StreamServerEventsResponse::release_cssselector() {
  // @@protoc_insertion_point(field_release:StreamServerEventsResponse.CssSelector)
  
  return cssselector_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StreamServerEventsResponse::set_allocated_cssselector(::std::string* cssselector) {
  if (cssselector != nullptr) {
    
  } else {
    
  }
  cssselector_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cssselector);
  // @@protoc_insertion_point(field_set_allocated:StreamServerEventsResponse.CssSelector)
}

// map<string, string> Meta = 9;
inline int StreamServerEventsResponse::meta_size() const {
  return meta_.size();
}
inline void StreamServerEventsResponse::clear_meta() {
  meta_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
StreamServerEventsResponse::meta() const {
  // @@protoc_insertion_point(field_map:StreamServerEventsResponse.Meta)
  return meta_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
StreamServerEventsResponse::mutable_meta() {
  // @@protoc_insertion_point(field_mutable_map:StreamServerEventsResponse.Meta)
  return meta_.MutableMap();
}

// string UserId = 10;
inline void StreamServerEventsResponse::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StreamServerEventsResponse::userid() const {
  // @@protoc_insertion_point(field_get:StreamServerEventsResponse.UserId)
  return userid_.GetNoArena();
}
inline void StreamServerEventsResponse::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StreamServerEventsResponse.UserId)
}
#if LANG_CXX11
inline void StreamServerEventsResponse::set_userid(::std::string&& value) {
  
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StreamServerEventsResponse.UserId)
}
#endif
inline void StreamServerEventsResponse::set_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StreamServerEventsResponse.UserId)
}
inline void StreamServerEventsResponse::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StreamServerEventsResponse.UserId)
}
inline ::std::string* StreamServerEventsResponse::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:StreamServerEventsResponse.UserId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StreamServerEventsResponse::release_userid() {
  // @@protoc_insertion_point(field_release:StreamServerEventsResponse.UserId)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StreamServerEventsResponse::set_allocated_userid(::std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:StreamServerEventsResponse.UserId)
}

// string DisplayName = 11;
inline void StreamServerEventsResponse::clear_displayname() {
  displayname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StreamServerEventsResponse::displayname() const {
  // @@protoc_insertion_point(field_get:StreamServerEventsResponse.DisplayName)
  return displayname_.GetNoArena();
}
inline void StreamServerEventsResponse::set_displayname(const ::std::string& value) {
  
  displayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StreamServerEventsResponse.DisplayName)
}
#if LANG_CXX11
inline void StreamServerEventsResponse::set_displayname(::std::string&& value) {
  
  displayname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StreamServerEventsResponse.DisplayName)
}
#endif
inline void StreamServerEventsResponse::set_displayname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  displayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StreamServerEventsResponse.DisplayName)
}
inline void StreamServerEventsResponse::set_displayname(const char* value, size_t size) {
  
  displayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StreamServerEventsResponse.DisplayName)
}
inline ::std::string* StreamServerEventsResponse::mutable_displayname() {
  
  // @@protoc_insertion_point(field_mutable:StreamServerEventsResponse.DisplayName)
  return displayname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StreamServerEventsResponse::release_displayname() {
  // @@protoc_insertion_point(field_release:StreamServerEventsResponse.DisplayName)
  
  return displayname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StreamServerEventsResponse::set_allocated_displayname(::std::string* displayname) {
  if (displayname != nullptr) {
    
  } else {
    
  }
  displayname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), displayname);
  // @@protoc_insertion_point(field_set_allocated:StreamServerEventsResponse.DisplayName)
}

// string ProfileUrl = 12;
inline void StreamServerEventsResponse::clear_profileurl() {
  profileurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StreamServerEventsResponse::profileurl() const {
  // @@protoc_insertion_point(field_get:StreamServerEventsResponse.ProfileUrl)
  return profileurl_.GetNoArena();
}
inline void StreamServerEventsResponse::set_profileurl(const ::std::string& value) {
  
  profileurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StreamServerEventsResponse.ProfileUrl)
}
#if LANG_CXX11
inline void StreamServerEventsResponse::set_profileurl(::std::string&& value) {
  
  profileurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StreamServerEventsResponse.ProfileUrl)
}
#endif
inline void StreamServerEventsResponse::set_profileurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  profileurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StreamServerEventsResponse.ProfileUrl)
}
inline void StreamServerEventsResponse::set_profileurl(const char* value, size_t size) {
  
  profileurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StreamServerEventsResponse.ProfileUrl)
}
inline ::std::string* StreamServerEventsResponse::mutable_profileurl() {
  
  // @@protoc_insertion_point(field_mutable:StreamServerEventsResponse.ProfileUrl)
  return profileurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StreamServerEventsResponse::release_profileurl() {
  // @@protoc_insertion_point(field_release:StreamServerEventsResponse.ProfileUrl)
  
  return profileurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StreamServerEventsResponse::set_allocated_profileurl(::std::string* profileurl) {
  if (profileurl != nullptr) {
    
  } else {
    
  }
  profileurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), profileurl);
  // @@protoc_insertion_point(field_set_allocated:StreamServerEventsResponse.ProfileUrl)
}

// bool IsAuthenticated = 13;
inline void StreamServerEventsResponse::clear_isauthenticated() {
  isauthenticated_ = false;
}
inline bool StreamServerEventsResponse::isauthenticated() const {
  // @@protoc_insertion_point(field_get:StreamServerEventsResponse.IsAuthenticated)
  return isauthenticated_;
}
inline void StreamServerEventsResponse::set_isauthenticated(bool value) {
  
  isauthenticated_ = value;
  // @@protoc_insertion_point(field_set:StreamServerEventsResponse.IsAuthenticated)
}

// repeated string Channels = 14;
inline int StreamServerEventsResponse::channels_size() const {
  return channels_.size();
}
inline void StreamServerEventsResponse::clear_channels() {
  channels_.Clear();
}
inline const ::std::string& StreamServerEventsResponse::channels(int index) const {
  // @@protoc_insertion_point(field_get:StreamServerEventsResponse.Channels)
  return channels_.Get(index);
}
inline ::std::string* StreamServerEventsResponse::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:StreamServerEventsResponse.Channels)
  return channels_.Mutable(index);
}
inline void StreamServerEventsResponse::set_channels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:StreamServerEventsResponse.Channels)
  channels_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void StreamServerEventsResponse::set_channels(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:StreamServerEventsResponse.Channels)
  channels_.Mutable(index)->assign(std::move(value));
}
#endif
inline void StreamServerEventsResponse::set_channels(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  channels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StreamServerEventsResponse.Channels)
}
inline void StreamServerEventsResponse::set_channels(int index, const char* value, size_t size) {
  channels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StreamServerEventsResponse.Channels)
}
inline ::std::string* StreamServerEventsResponse::add_channels() {
  // @@protoc_insertion_point(field_add_mutable:StreamServerEventsResponse.Channels)
  return channels_.Add();
}
inline void StreamServerEventsResponse::add_channels(const ::std::string& value) {
  channels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StreamServerEventsResponse.Channels)
}
#if LANG_CXX11
inline void StreamServerEventsResponse::add_channels(::std::string&& value) {
  channels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StreamServerEventsResponse.Channels)
}
#endif
inline void StreamServerEventsResponse::add_channels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  channels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StreamServerEventsResponse.Channels)
}
inline void StreamServerEventsResponse::add_channels(const char* value, size_t size) {
  channels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StreamServerEventsResponse.Channels)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
StreamServerEventsResponse::channels() const {
  // @@protoc_insertion_point(field_list:StreamServerEventsResponse.Channels)
  return channels_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
StreamServerEventsResponse::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:StreamServerEventsResponse.Channels)
  return &channels_;
}

// int64 CreatedAt = 15;
inline void StreamServerEventsResponse::clear_createdat() {
  createdat_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 StreamServerEventsResponse::createdat() const {
  // @@protoc_insertion_point(field_get:StreamServerEventsResponse.CreatedAt)
  return createdat_;
}
inline void StreamServerEventsResponse::set_createdat(::google::protobuf::int64 value) {
  
  createdat_ = value;
  // @@protoc_insertion_point(field_set:StreamServerEventsResponse.CreatedAt)
}

// string Id = 21;
inline void StreamServerEventsResponse::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StreamServerEventsResponse::id() const {
  // @@protoc_insertion_point(field_get:StreamServerEventsResponse.Id)
  return id_.GetNoArena();
}
inline void StreamServerEventsResponse::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StreamServerEventsResponse.Id)
}
#if LANG_CXX11
inline void StreamServerEventsResponse::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StreamServerEventsResponse.Id)
}
#endif
inline void StreamServerEventsResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StreamServerEventsResponse.Id)
}
inline void StreamServerEventsResponse::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StreamServerEventsResponse.Id)
}
inline ::std::string* StreamServerEventsResponse::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:StreamServerEventsResponse.Id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StreamServerEventsResponse::release_id() {
  // @@protoc_insertion_point(field_release:StreamServerEventsResponse.Id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StreamServerEventsResponse::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:StreamServerEventsResponse.Id)
}

// string UnRegisterUrl = 22;
inline void StreamServerEventsResponse::clear_unregisterurl() {
  unregisterurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StreamServerEventsResponse::unregisterurl() const {
  // @@protoc_insertion_point(field_get:StreamServerEventsResponse.UnRegisterUrl)
  return unregisterurl_.GetNoArena();
}
inline void StreamServerEventsResponse::set_unregisterurl(const ::std::string& value) {
  
  unregisterurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StreamServerEventsResponse.UnRegisterUrl)
}
#if LANG_CXX11
inline void StreamServerEventsResponse::set_unregisterurl(::std::string&& value) {
  
  unregisterurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StreamServerEventsResponse.UnRegisterUrl)
}
#endif
inline void StreamServerEventsResponse::set_unregisterurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  unregisterurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StreamServerEventsResponse.UnRegisterUrl)
}
inline void StreamServerEventsResponse::set_unregisterurl(const char* value, size_t size) {
  
  unregisterurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StreamServerEventsResponse.UnRegisterUrl)
}
inline ::std::string* StreamServerEventsResponse::mutable_unregisterurl() {
  
  // @@protoc_insertion_point(field_mutable:StreamServerEventsResponse.UnRegisterUrl)
  return unregisterurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StreamServerEventsResponse::release_unregisterurl() {
  // @@protoc_insertion_point(field_release:StreamServerEventsResponse.UnRegisterUrl)
  
  return unregisterurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StreamServerEventsResponse::set_allocated_unregisterurl(::std::string* unregisterurl) {
  if (unregisterurl != nullptr) {
    
  } else {
    
  }
  unregisterurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unregisterurl);
  // @@protoc_insertion_point(field_set_allocated:StreamServerEventsResponse.UnRegisterUrl)
}

// string UpdateSubscriberUrl = 23;
inline void StreamServerEventsResponse::clear_updatesubscriberurl() {
  updatesubscriberurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StreamServerEventsResponse::updatesubscriberurl() const {
  // @@protoc_insertion_point(field_get:StreamServerEventsResponse.UpdateSubscriberUrl)
  return updatesubscriberurl_.GetNoArena();
}
inline void StreamServerEventsResponse::set_updatesubscriberurl(const ::std::string& value) {
  
  updatesubscriberurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StreamServerEventsResponse.UpdateSubscriberUrl)
}
#if LANG_CXX11
inline void StreamServerEventsResponse::set_updatesubscriberurl(::std::string&& value) {
  
  updatesubscriberurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StreamServerEventsResponse.UpdateSubscriberUrl)
}
#endif
inline void StreamServerEventsResponse::set_updatesubscriberurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  updatesubscriberurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StreamServerEventsResponse.UpdateSubscriberUrl)
}
inline void StreamServerEventsResponse::set_updatesubscriberurl(const char* value, size_t size) {
  
  updatesubscriberurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StreamServerEventsResponse.UpdateSubscriberUrl)
}
inline ::std::string* StreamServerEventsResponse::mutable_updatesubscriberurl() {
  
  // @@protoc_insertion_point(field_mutable:StreamServerEventsResponse.UpdateSubscriberUrl)
  return updatesubscriberurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StreamServerEventsResponse::release_updatesubscriberurl() {
  // @@protoc_insertion_point(field_release:StreamServerEventsResponse.UpdateSubscriberUrl)
  
  return updatesubscriberurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StreamServerEventsResponse::set_allocated_updatesubscriberurl(::std::string* updatesubscriberurl) {
  if (updatesubscriberurl != nullptr) {
    
  } else {
    
  }
  updatesubscriberurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), updatesubscriberurl);
  // @@protoc_insertion_point(field_set_allocated:StreamServerEventsResponse.UpdateSubscriberUrl)
}

// string HeartbeatUrl = 24;
inline void StreamServerEventsResponse::clear_heartbeaturl() {
  heartbeaturl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StreamServerEventsResponse::heartbeaturl() const {
  // @@protoc_insertion_point(field_get:StreamServerEventsResponse.HeartbeatUrl)
  return heartbeaturl_.GetNoArena();
}
inline void StreamServerEventsResponse::set_heartbeaturl(const ::std::string& value) {
  
  heartbeaturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StreamServerEventsResponse.HeartbeatUrl)
}
#if LANG_CXX11
inline void StreamServerEventsResponse::set_heartbeaturl(::std::string&& value) {
  
  heartbeaturl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StreamServerEventsResponse.HeartbeatUrl)
}
#endif
inline void StreamServerEventsResponse::set_heartbeaturl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  heartbeaturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StreamServerEventsResponse.HeartbeatUrl)
}
inline void StreamServerEventsResponse::set_heartbeaturl(const char* value, size_t size) {
  
  heartbeaturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StreamServerEventsResponse.HeartbeatUrl)
}
inline ::std::string* StreamServerEventsResponse::mutable_heartbeaturl() {
  
  // @@protoc_insertion_point(field_mutable:StreamServerEventsResponse.HeartbeatUrl)
  return heartbeaturl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StreamServerEventsResponse::release_heartbeaturl() {
  // @@protoc_insertion_point(field_release:StreamServerEventsResponse.HeartbeatUrl)
  
  return heartbeaturl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StreamServerEventsResponse::set_allocated_heartbeaturl(::std::string* heartbeaturl) {
  if (heartbeaturl != nullptr) {
    
  } else {
    
  }
  heartbeaturl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), heartbeaturl);
  // @@protoc_insertion_point(field_set_allocated:StreamServerEventsResponse.HeartbeatUrl)
}

// int64 HeartbeatIntervalMs = 25;
inline void StreamServerEventsResponse::clear_heartbeatintervalms() {
  heartbeatintervalms_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 StreamServerEventsResponse::heartbeatintervalms() const {
  // @@protoc_insertion_point(field_get:StreamServerEventsResponse.HeartbeatIntervalMs)
  return heartbeatintervalms_;
}
inline void StreamServerEventsResponse::set_heartbeatintervalms(::google::protobuf::int64 value) {
  
  heartbeatintervalms_ = value;
  // @@protoc_insertion_point(field_set:StreamServerEventsResponse.HeartbeatIntervalMs)
}

// int64 IdleTimeoutMs = 26;
inline void StreamServerEventsResponse::clear_idletimeoutms() {
  idletimeoutms_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 StreamServerEventsResponse::idletimeoutms() const {
  // @@protoc_insertion_point(field_get:StreamServerEventsResponse.IdleTimeoutMs)
  return idletimeoutms_;
}
inline void StreamServerEventsResponse::set_idletimeoutms(::google::protobuf::int64 value) {
  
  idletimeoutms_ = value;
  // @@protoc_insertion_point(field_set:StreamServerEventsResponse.IdleTimeoutMs)
}

// .ResponseStatus ResponseStatus = 30;
inline bool StreamServerEventsResponse::has_responsestatus() const {
  return this != internal_default_instance() && responsestatus_ != nullptr;
}
inline void StreamServerEventsResponse::clear_responsestatus() {
  if (GetArenaNoVirtual() == nullptr && responsestatus_ != nullptr) {
    delete responsestatus_;
  }
  responsestatus_ = nullptr;
}
inline const ::ResponseStatus& StreamServerEventsResponse::responsestatus() const {
  const ::ResponseStatus* p = responsestatus_;
  // @@protoc_insertion_point(field_get:StreamServerEventsResponse.ResponseStatus)
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline ::ResponseStatus* StreamServerEventsResponse::release_responsestatus() {
  // @@protoc_insertion_point(field_release:StreamServerEventsResponse.ResponseStatus)
  
  ::ResponseStatus* temp = responsestatus_;
  responsestatus_ = nullptr;
  return temp;
}
inline ::ResponseStatus* StreamServerEventsResponse::mutable_responsestatus() {
  
  if (responsestatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArenaNoVirtual());
    responsestatus_ = p;
  }
  // @@protoc_insertion_point(field_mutable:StreamServerEventsResponse.ResponseStatus)
  return responsestatus_;
}
inline void StreamServerEventsResponse::set_allocated_responsestatus(::ResponseStatus* responsestatus) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete responsestatus_;
  }
  if (responsestatus) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      responsestatus = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, responsestatus, submessage_arena);
    }
    
  } else {
    
  }
  responsestatus_ = responsestatus;
  // @@protoc_insertion_point(field_set_allocated:StreamServerEventsResponse.ResponseStatus)
}

// -------------------------------------------------------------------

// Todo

// int64 Id = 1;
inline void Todo::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Todo::id() const {
  // @@protoc_insertion_point(field_get:Todo.Id)
  return id_;
}
inline void Todo::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Todo.Id)
}

// string Title = 2;
inline void Todo::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Todo::title() const {
  // @@protoc_insertion_point(field_get:Todo.Title)
  return title_.GetNoArena();
}
inline void Todo::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Todo.Title)
}
#if LANG_CXX11
inline void Todo::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Todo.Title)
}
#endif
inline void Todo::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Todo.Title)
}
inline void Todo::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Todo.Title)
}
inline ::std::string* Todo::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:Todo.Title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Todo::release_title() {
  // @@protoc_insertion_point(field_release:Todo.Title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Todo::set_allocated_title(::std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:Todo.Title)
}

// int32 Order = 3;
inline void Todo::clear_order() {
  order_ = 0;
}
inline ::google::protobuf::int32 Todo::order() const {
  // @@protoc_insertion_point(field_get:Todo.Order)
  return order_;
}
inline void Todo::set_order(::google::protobuf::int32 value) {
  
  order_ = value;
  // @@protoc_insertion_point(field_set:Todo.Order)
}

// bool Completed = 4;
inline void Todo::clear_completed() {
  completed_ = false;
}
inline bool Todo::completed() const {
  // @@protoc_insertion_point(field_get:Todo.Completed)
  return completed_;
}
inline void Todo::set_completed(bool value) {
  
  completed_ = value;
  // @@protoc_insertion_point(field_set:Todo.Completed)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// UnAssignRoles

// string UserName = 1;
inline void UnAssignRoles::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnAssignRoles::username() const {
  // @@protoc_insertion_point(field_get:UnAssignRoles.UserName)
  return username_.GetNoArena();
}
inline void UnAssignRoles::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UnAssignRoles.UserName)
}
#if LANG_CXX11
inline void UnAssignRoles::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UnAssignRoles.UserName)
}
#endif
inline void UnAssignRoles::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UnAssignRoles.UserName)
}
inline void UnAssignRoles::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UnAssignRoles.UserName)
}
inline ::std::string* UnAssignRoles::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:UnAssignRoles.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnAssignRoles::release_username() {
  // @@protoc_insertion_point(field_release:UnAssignRoles.UserName)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnAssignRoles::set_allocated_username(::std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:UnAssignRoles.UserName)
}

// repeated string Permissions = 2;
inline int UnAssignRoles::permissions_size() const {
  return permissions_.size();
}
inline void UnAssignRoles::clear_permissions() {
  permissions_.Clear();
}
inline const ::std::string& UnAssignRoles::permissions(int index) const {
  // @@protoc_insertion_point(field_get:UnAssignRoles.Permissions)
  return permissions_.Get(index);
}
inline ::std::string* UnAssignRoles::mutable_permissions(int index) {
  // @@protoc_insertion_point(field_mutable:UnAssignRoles.Permissions)
  return permissions_.Mutable(index);
}
inline void UnAssignRoles::set_permissions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:UnAssignRoles.Permissions)
  permissions_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void UnAssignRoles::set_permissions(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:UnAssignRoles.Permissions)
  permissions_.Mutable(index)->assign(std::move(value));
}
#endif
inline void UnAssignRoles::set_permissions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  permissions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:UnAssignRoles.Permissions)
}
inline void UnAssignRoles::set_permissions(int index, const char* value, size_t size) {
  permissions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UnAssignRoles.Permissions)
}
inline ::std::string* UnAssignRoles::add_permissions() {
  // @@protoc_insertion_point(field_add_mutable:UnAssignRoles.Permissions)
  return permissions_.Add();
}
inline void UnAssignRoles::add_permissions(const ::std::string& value) {
  permissions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:UnAssignRoles.Permissions)
}
#if LANG_CXX11
inline void UnAssignRoles::add_permissions(::std::string&& value) {
  permissions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:UnAssignRoles.Permissions)
}
#endif
inline void UnAssignRoles::add_permissions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  permissions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:UnAssignRoles.Permissions)
}
inline void UnAssignRoles::add_permissions(const char* value, size_t size) {
  permissions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:UnAssignRoles.Permissions)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
UnAssignRoles::permissions() const {
  // @@protoc_insertion_point(field_list:UnAssignRoles.Permissions)
  return permissions_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
UnAssignRoles::mutable_permissions() {
  // @@protoc_insertion_point(field_mutable_list:UnAssignRoles.Permissions)
  return &permissions_;
}

// repeated string Roles = 3;
inline int UnAssignRoles::roles_size() const {
  return roles_.size();
}
inline void UnAssignRoles::clear_roles() {
  roles_.Clear();
}
inline const ::std::string& UnAssignRoles::roles(int index) const {
  // @@protoc_insertion_point(field_get:UnAssignRoles.Roles)
  return roles_.Get(index);
}
inline ::std::string* UnAssignRoles::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:UnAssignRoles.Roles)
  return roles_.Mutable(index);
}
inline void UnAssignRoles::set_roles(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:UnAssignRoles.Roles)
  roles_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void UnAssignRoles::set_roles(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:UnAssignRoles.Roles)
  roles_.Mutable(index)->assign(std::move(value));
}
#endif
inline void UnAssignRoles::set_roles(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  roles_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:UnAssignRoles.Roles)
}
inline void UnAssignRoles::set_roles(int index, const char* value, size_t size) {
  roles_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UnAssignRoles.Roles)
}
inline ::std::string* UnAssignRoles::add_roles() {
  // @@protoc_insertion_point(field_add_mutable:UnAssignRoles.Roles)
  return roles_.Add();
}
inline void UnAssignRoles::add_roles(const ::std::string& value) {
  roles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:UnAssignRoles.Roles)
}
#if LANG_CXX11
inline void UnAssignRoles::add_roles(::std::string&& value) {
  roles_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:UnAssignRoles.Roles)
}
#endif
inline void UnAssignRoles::add_roles(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  roles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:UnAssignRoles.Roles)
}
inline void UnAssignRoles::add_roles(const char* value, size_t size) {
  roles_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:UnAssignRoles.Roles)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
UnAssignRoles::roles() const {
  // @@protoc_insertion_point(field_list:UnAssignRoles.Roles)
  return roles_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
UnAssignRoles::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:UnAssignRoles.Roles)
  return &roles_;
}

// map<string, string> Meta = 4;
inline int UnAssignRoles::meta_size() const {
  return meta_.size();
}
inline void UnAssignRoles::clear_meta() {
  meta_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
UnAssignRoles::meta() const {
  // @@protoc_insertion_point(field_map:UnAssignRoles.Meta)
  return meta_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
UnAssignRoles::mutable_meta() {
  // @@protoc_insertion_point(field_mutable_map:UnAssignRoles.Meta)
  return meta_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// UnAssignRolesResponse

// repeated string AllRoles = 1;
inline int UnAssignRolesResponse::allroles_size() const {
  return allroles_.size();
}
inline void UnAssignRolesResponse::clear_allroles() {
  allroles_.Clear();
}
inline const ::std::string& UnAssignRolesResponse::allroles(int index) const {
  // @@protoc_insertion_point(field_get:UnAssignRolesResponse.AllRoles)
  return allroles_.Get(index);
}
inline ::std::string* UnAssignRolesResponse::mutable_allroles(int index) {
  // @@protoc_insertion_point(field_mutable:UnAssignRolesResponse.AllRoles)
  return allroles_.Mutable(index);
}
inline void UnAssignRolesResponse::set_allroles(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:UnAssignRolesResponse.AllRoles)
  allroles_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void UnAssignRolesResponse::set_allroles(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:UnAssignRolesResponse.AllRoles)
  allroles_.Mutable(index)->assign(std::move(value));
}
#endif
inline void UnAssignRolesResponse::set_allroles(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  allroles_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:UnAssignRolesResponse.AllRoles)
}
inline void UnAssignRolesResponse::set_allroles(int index, const char* value, size_t size) {
  allroles_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UnAssignRolesResponse.AllRoles)
}
inline ::std::string* UnAssignRolesResponse::add_allroles() {
  // @@protoc_insertion_point(field_add_mutable:UnAssignRolesResponse.AllRoles)
  return allroles_.Add();
}
inline void UnAssignRolesResponse::add_allroles(const ::std::string& value) {
  allroles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:UnAssignRolesResponse.AllRoles)
}
#if LANG_CXX11
inline void UnAssignRolesResponse::add_allroles(::std::string&& value) {
  allroles_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:UnAssignRolesResponse.AllRoles)
}
#endif
inline void UnAssignRolesResponse::add_allroles(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  allroles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:UnAssignRolesResponse.AllRoles)
}
inline void UnAssignRolesResponse::add_allroles(const char* value, size_t size) {
  allroles_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:UnAssignRolesResponse.AllRoles)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
UnAssignRolesResponse::allroles() const {
  // @@protoc_insertion_point(field_list:UnAssignRolesResponse.AllRoles)
  return allroles_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
UnAssignRolesResponse::mutable_allroles() {
  // @@protoc_insertion_point(field_mutable_list:UnAssignRolesResponse.AllRoles)
  return &allroles_;
}

// repeated string AllPermissions = 2;
inline int UnAssignRolesResponse::allpermissions_size() const {
  return allpermissions_.size();
}
inline void UnAssignRolesResponse::clear_allpermissions() {
  allpermissions_.Clear();
}
inline const ::std::string& UnAssignRolesResponse::allpermissions(int index) const {
  // @@protoc_insertion_point(field_get:UnAssignRolesResponse.AllPermissions)
  return allpermissions_.Get(index);
}
inline ::std::string* UnAssignRolesResponse::mutable_allpermissions(int index) {
  // @@protoc_insertion_point(field_mutable:UnAssignRolesResponse.AllPermissions)
  return allpermissions_.Mutable(index);
}
inline void UnAssignRolesResponse::set_allpermissions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:UnAssignRolesResponse.AllPermissions)
  allpermissions_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void UnAssignRolesResponse::set_allpermissions(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:UnAssignRolesResponse.AllPermissions)
  allpermissions_.Mutable(index)->assign(std::move(value));
}
#endif
inline void UnAssignRolesResponse::set_allpermissions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  allpermissions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:UnAssignRolesResponse.AllPermissions)
}
inline void UnAssignRolesResponse::set_allpermissions(int index, const char* value, size_t size) {
  allpermissions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UnAssignRolesResponse.AllPermissions)
}
inline ::std::string* UnAssignRolesResponse::add_allpermissions() {
  // @@protoc_insertion_point(field_add_mutable:UnAssignRolesResponse.AllPermissions)
  return allpermissions_.Add();
}
inline void UnAssignRolesResponse::add_allpermissions(const ::std::string& value) {
  allpermissions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:UnAssignRolesResponse.AllPermissions)
}
#if LANG_CXX11
inline void UnAssignRolesResponse::add_allpermissions(::std::string&& value) {
  allpermissions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:UnAssignRolesResponse.AllPermissions)
}
#endif
inline void UnAssignRolesResponse::add_allpermissions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  allpermissions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:UnAssignRolesResponse.AllPermissions)
}
inline void UnAssignRolesResponse::add_allpermissions(const char* value, size_t size) {
  allpermissions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:UnAssignRolesResponse.AllPermissions)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
UnAssignRolesResponse::allpermissions() const {
  // @@protoc_insertion_point(field_list:UnAssignRolesResponse.AllPermissions)
  return allpermissions_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
UnAssignRolesResponse::mutable_allpermissions() {
  // @@protoc_insertion_point(field_mutable_list:UnAssignRolesResponse.AllPermissions)
  return &allpermissions_;
}

// map<string, string> Meta = 3;
inline int UnAssignRolesResponse::meta_size() const {
  return meta_.size();
}
inline void UnAssignRolesResponse::clear_meta() {
  meta_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
UnAssignRolesResponse::meta() const {
  // @@protoc_insertion_point(field_map:UnAssignRolesResponse.Meta)
  return meta_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
UnAssignRolesResponse::mutable_meta() {
  // @@protoc_insertion_point(field_mutable_map:UnAssignRolesResponse.Meta)
  return meta_.MutableMap();
}

// .ResponseStatus ResponseStatus = 4;
inline bool UnAssignRolesResponse::has_responsestatus() const {
  return this != internal_default_instance() && responsestatus_ != nullptr;
}
inline void UnAssignRolesResponse::clear_responsestatus() {
  if (GetArenaNoVirtual() == nullptr && responsestatus_ != nullptr) {
    delete responsestatus_;
  }
  responsestatus_ = nullptr;
}
inline const ::ResponseStatus& UnAssignRolesResponse::responsestatus() const {
  const ::ResponseStatus* p = responsestatus_;
  // @@protoc_insertion_point(field_get:UnAssignRolesResponse.ResponseStatus)
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline ::ResponseStatus* UnAssignRolesResponse::release_responsestatus() {
  // @@protoc_insertion_point(field_release:UnAssignRolesResponse.ResponseStatus)
  
  ::ResponseStatus* temp = responsestatus_;
  responsestatus_ = nullptr;
  return temp;
}
inline ::ResponseStatus* UnAssignRolesResponse::mutable_responsestatus() {
  
  if (responsestatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArenaNoVirtual());
    responsestatus_ = p;
  }
  // @@protoc_insertion_point(field_mutable:UnAssignRolesResponse.ResponseStatus)
  return responsestatus_;
}
inline void UnAssignRolesResponse::set_allocated_responsestatus(::ResponseStatus* responsestatus) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete responsestatus_;
  }
  if (responsestatus) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      responsestatus = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, responsestatus, submessage_arena);
    }
    
  } else {
    
  }
  responsestatus_ = responsestatus;
  // @@protoc_insertion_point(field_set_allocated:UnAssignRolesResponse.ResponseStatus)
}

// -------------------------------------------------------------------

// UpdateTodo

// int64 Id = 1;
inline void UpdateTodo::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 UpdateTodo::id() const {
  // @@protoc_insertion_point(field_get:UpdateTodo.Id)
  return id_;
}
inline void UpdateTodo::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:UpdateTodo.Id)
}

// string Title = 2;
inline void UpdateTodo::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateTodo::title() const {
  // @@protoc_insertion_point(field_get:UpdateTodo.Title)
  return title_.GetNoArena();
}
inline void UpdateTodo::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UpdateTodo.Title)
}
#if LANG_CXX11
inline void UpdateTodo::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UpdateTodo.Title)
}
#endif
inline void UpdateTodo::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UpdateTodo.Title)
}
inline void UpdateTodo::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UpdateTodo.Title)
}
inline ::std::string* UpdateTodo::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:UpdateTodo.Title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateTodo::release_title() {
  // @@protoc_insertion_point(field_release:UpdateTodo.Title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateTodo::set_allocated_title(::std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:UpdateTodo.Title)
}

// int32 Order = 3;
inline void UpdateTodo::clear_order() {
  order_ = 0;
}
inline ::google::protobuf::int32 UpdateTodo::order() const {
  // @@protoc_insertion_point(field_get:UpdateTodo.Order)
  return order_;
}
inline void UpdateTodo::set_order(::google::protobuf::int32 value) {
  
  order_ = value;
  // @@protoc_insertion_point(field_set:UpdateTodo.Order)
}

// bool Completed = 4;
inline void UpdateTodo::clear_completed() {
  completed_ = false;
}
inline bool UpdateTodo::completed() const {
  // @@protoc_insertion_point(field_get:UpdateTodo.Completed)
  return completed_;
}
inline void UpdateTodo::set_completed(bool value) {
  
  completed_ = value;
  // @@protoc_insertion_point(field_set:UpdateTodo.Completed)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_services_2eproto
