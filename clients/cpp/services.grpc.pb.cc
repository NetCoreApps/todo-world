// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: services.proto

#include "services.pb.h"
#include "services.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* GrpcServices_method_names[] = {
  "/GrpcServices/PostAssignRoles",
  "/GrpcServices/OptionsAuthenticate",
  "/GrpcServices/GetAuthenticate",
  "/GrpcServices/PostAuthenticate",
  "/GrpcServices/DeleteAuthenticate",
  "/GrpcServices/PostConvertSessionToToken",
  "/GrpcServices/PostCreateTodo",
  "/GrpcServices/CallDeleteTodo",
  "/GrpcServices/CallDeleteTodos",
  "/GrpcServices/PostGetAccessToken",
  "/GrpcServices/CallGetTodo",
  "/GrpcServices/CallGetTodos",
  "/GrpcServices/GetHello",
  "/GrpcServices/PostHello",
  "/GrpcServices/PutHello",
  "/GrpcServices/DeleteHello",
  "/GrpcServices/PatchHello",
  "/GrpcServices/GetHelloSecure",
  "/GrpcServices/PostHelloSecure",
  "/GrpcServices/PutHelloSecure",
  "/GrpcServices/DeleteHelloSecure",
  "/GrpcServices/PatchHelloSecure",
  "/GrpcServices/PutRegister",
  "/GrpcServices/PostRegister",
  "/GrpcServices/PostResetTodos",
  "/GrpcServices/ServerStreamFiles",
  "/GrpcServices/ServerStreamServerEvents",
  "/GrpcServices/PostUnAssignRoles",
  "/GrpcServices/PutUpdateTodo",
};

std::unique_ptr< GrpcServices::Stub> GrpcServices::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GrpcServices::Stub> stub(new GrpcServices::Stub(channel));
  return stub;
}

GrpcServices::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_PostAssignRoles_(GrpcServices_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OptionsAuthenticate_(GrpcServices_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAuthenticate_(GrpcServices_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostAuthenticate_(GrpcServices_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteAuthenticate_(GrpcServices_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostConvertSessionToToken_(GrpcServices_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostCreateTodo_(GrpcServices_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CallDeleteTodo_(GrpcServices_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CallDeleteTodos_(GrpcServices_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostGetAccessToken_(GrpcServices_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CallGetTodo_(GrpcServices_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CallGetTodos_(GrpcServices_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetHello_(GrpcServices_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostHello_(GrpcServices_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PutHello_(GrpcServices_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteHello_(GrpcServices_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PatchHello_(GrpcServices_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetHelloSecure_(GrpcServices_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostHelloSecure_(GrpcServices_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PutHelloSecure_(GrpcServices_method_names[19], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteHelloSecure_(GrpcServices_method_names[20], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PatchHelloSecure_(GrpcServices_method_names[21], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PutRegister_(GrpcServices_method_names[22], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostRegister_(GrpcServices_method_names[23], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostResetTodos_(GrpcServices_method_names[24], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ServerStreamFiles_(GrpcServices_method_names[25], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ServerStreamServerEvents_(GrpcServices_method_names[26], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_PostUnAssignRoles_(GrpcServices_method_names[27], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PutUpdateTodo_(GrpcServices_method_names[28], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status GrpcServices::Stub::PostAssignRoles(::grpc::ClientContext* context, const ::AssignRoles& request, ::AssignRolesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostAssignRoles_, context, request, response);
}

void GrpcServices::Stub::experimental_async::PostAssignRoles(::grpc::ClientContext* context, const ::AssignRoles* request, ::AssignRolesResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostAssignRoles_, context, request, response, std::move(f));
}

void GrpcServices::Stub::experimental_async::PostAssignRoles(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AssignRolesResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostAssignRoles_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::AssignRolesResponse>* GrpcServices::Stub::AsyncPostAssignRolesRaw(::grpc::ClientContext* context, const ::AssignRoles& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::AssignRolesResponse>::Create(channel_.get(), cq, rpcmethod_PostAssignRoles_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::AssignRolesResponse>* GrpcServices::Stub::PrepareAsyncPostAssignRolesRaw(::grpc::ClientContext* context, const ::AssignRoles& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::AssignRolesResponse>::Create(channel_.get(), cq, rpcmethod_PostAssignRoles_, context, request, false);
}

::grpc::Status GrpcServices::Stub::OptionsAuthenticate(::grpc::ClientContext* context, const ::Authenticate& request, ::AuthenticateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_OptionsAuthenticate_, context, request, response);
}

void GrpcServices::Stub::experimental_async::OptionsAuthenticate(::grpc::ClientContext* context, const ::Authenticate* request, ::AuthenticateResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OptionsAuthenticate_, context, request, response, std::move(f));
}

void GrpcServices::Stub::experimental_async::OptionsAuthenticate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AuthenticateResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OptionsAuthenticate_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::AuthenticateResponse>* GrpcServices::Stub::AsyncOptionsAuthenticateRaw(::grpc::ClientContext* context, const ::Authenticate& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::AuthenticateResponse>::Create(channel_.get(), cq, rpcmethod_OptionsAuthenticate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::AuthenticateResponse>* GrpcServices::Stub::PrepareAsyncOptionsAuthenticateRaw(::grpc::ClientContext* context, const ::Authenticate& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::AuthenticateResponse>::Create(channel_.get(), cq, rpcmethod_OptionsAuthenticate_, context, request, false);
}

::grpc::Status GrpcServices::Stub::GetAuthenticate(::grpc::ClientContext* context, const ::Authenticate& request, ::AuthenticateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAuthenticate_, context, request, response);
}

void GrpcServices::Stub::experimental_async::GetAuthenticate(::grpc::ClientContext* context, const ::Authenticate* request, ::AuthenticateResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAuthenticate_, context, request, response, std::move(f));
}

void GrpcServices::Stub::experimental_async::GetAuthenticate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AuthenticateResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAuthenticate_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::AuthenticateResponse>* GrpcServices::Stub::AsyncGetAuthenticateRaw(::grpc::ClientContext* context, const ::Authenticate& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::AuthenticateResponse>::Create(channel_.get(), cq, rpcmethod_GetAuthenticate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::AuthenticateResponse>* GrpcServices::Stub::PrepareAsyncGetAuthenticateRaw(::grpc::ClientContext* context, const ::Authenticate& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::AuthenticateResponse>::Create(channel_.get(), cq, rpcmethod_GetAuthenticate_, context, request, false);
}

::grpc::Status GrpcServices::Stub::PostAuthenticate(::grpc::ClientContext* context, const ::Authenticate& request, ::AuthenticateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostAuthenticate_, context, request, response);
}

void GrpcServices::Stub::experimental_async::PostAuthenticate(::grpc::ClientContext* context, const ::Authenticate* request, ::AuthenticateResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostAuthenticate_, context, request, response, std::move(f));
}

void GrpcServices::Stub::experimental_async::PostAuthenticate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AuthenticateResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostAuthenticate_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::AuthenticateResponse>* GrpcServices::Stub::AsyncPostAuthenticateRaw(::grpc::ClientContext* context, const ::Authenticate& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::AuthenticateResponse>::Create(channel_.get(), cq, rpcmethod_PostAuthenticate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::AuthenticateResponse>* GrpcServices::Stub::PrepareAsyncPostAuthenticateRaw(::grpc::ClientContext* context, const ::Authenticate& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::AuthenticateResponse>::Create(channel_.get(), cq, rpcmethod_PostAuthenticate_, context, request, false);
}

::grpc::Status GrpcServices::Stub::DeleteAuthenticate(::grpc::ClientContext* context, const ::Authenticate& request, ::AuthenticateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteAuthenticate_, context, request, response);
}

void GrpcServices::Stub::experimental_async::DeleteAuthenticate(::grpc::ClientContext* context, const ::Authenticate* request, ::AuthenticateResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteAuthenticate_, context, request, response, std::move(f));
}

void GrpcServices::Stub::experimental_async::DeleteAuthenticate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AuthenticateResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteAuthenticate_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::AuthenticateResponse>* GrpcServices::Stub::AsyncDeleteAuthenticateRaw(::grpc::ClientContext* context, const ::Authenticate& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::AuthenticateResponse>::Create(channel_.get(), cq, rpcmethod_DeleteAuthenticate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::AuthenticateResponse>* GrpcServices::Stub::PrepareAsyncDeleteAuthenticateRaw(::grpc::ClientContext* context, const ::Authenticate& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::AuthenticateResponse>::Create(channel_.get(), cq, rpcmethod_DeleteAuthenticate_, context, request, false);
}

::grpc::Status GrpcServices::Stub::PostConvertSessionToToken(::grpc::ClientContext* context, const ::ConvertSessionToToken& request, ::ConvertSessionToTokenResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostConvertSessionToToken_, context, request, response);
}

void GrpcServices::Stub::experimental_async::PostConvertSessionToToken(::grpc::ClientContext* context, const ::ConvertSessionToToken* request, ::ConvertSessionToTokenResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostConvertSessionToToken_, context, request, response, std::move(f));
}

void GrpcServices::Stub::experimental_async::PostConvertSessionToToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ConvertSessionToTokenResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostConvertSessionToToken_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::ConvertSessionToTokenResponse>* GrpcServices::Stub::AsyncPostConvertSessionToTokenRaw(::grpc::ClientContext* context, const ::ConvertSessionToToken& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ConvertSessionToTokenResponse>::Create(channel_.get(), cq, rpcmethod_PostConvertSessionToToken_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ConvertSessionToTokenResponse>* GrpcServices::Stub::PrepareAsyncPostConvertSessionToTokenRaw(::grpc::ClientContext* context, const ::ConvertSessionToToken& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ConvertSessionToTokenResponse>::Create(channel_.get(), cq, rpcmethod_PostConvertSessionToToken_, context, request, false);
}

::grpc::Status GrpcServices::Stub::PostCreateTodo(::grpc::ClientContext* context, const ::CreateTodo& request, ::CreateTodoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostCreateTodo_, context, request, response);
}

void GrpcServices::Stub::experimental_async::PostCreateTodo(::grpc::ClientContext* context, const ::CreateTodo* request, ::CreateTodoResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostCreateTodo_, context, request, response, std::move(f));
}

void GrpcServices::Stub::experimental_async::PostCreateTodo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::CreateTodoResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostCreateTodo_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::CreateTodoResponse>* GrpcServices::Stub::AsyncPostCreateTodoRaw(::grpc::ClientContext* context, const ::CreateTodo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::CreateTodoResponse>::Create(channel_.get(), cq, rpcmethod_PostCreateTodo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::CreateTodoResponse>* GrpcServices::Stub::PrepareAsyncPostCreateTodoRaw(::grpc::ClientContext* context, const ::CreateTodo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::CreateTodoResponse>::Create(channel_.get(), cq, rpcmethod_PostCreateTodo_, context, request, false);
}

::grpc::Status GrpcServices::Stub::CallDeleteTodo(::grpc::ClientContext* context, const ::DeleteTodo& request, ::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CallDeleteTodo_, context, request, response);
}

void GrpcServices::Stub::experimental_async::CallDeleteTodo(::grpc::ClientContext* context, const ::DeleteTodo* request, ::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CallDeleteTodo_, context, request, response, std::move(f));
}

void GrpcServices::Stub::experimental_async::CallDeleteTodo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CallDeleteTodo_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::EmptyResponse>* GrpcServices::Stub::AsyncCallDeleteTodoRaw(::grpc::ClientContext* context, const ::DeleteTodo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::EmptyResponse>::Create(channel_.get(), cq, rpcmethod_CallDeleteTodo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::EmptyResponse>* GrpcServices::Stub::PrepareAsyncCallDeleteTodoRaw(::grpc::ClientContext* context, const ::DeleteTodo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::EmptyResponse>::Create(channel_.get(), cq, rpcmethod_CallDeleteTodo_, context, request, false);
}

::grpc::Status GrpcServices::Stub::CallDeleteTodos(::grpc::ClientContext* context, const ::DeleteTodos& request, ::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CallDeleteTodos_, context, request, response);
}

void GrpcServices::Stub::experimental_async::CallDeleteTodos(::grpc::ClientContext* context, const ::DeleteTodos* request, ::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CallDeleteTodos_, context, request, response, std::move(f));
}

void GrpcServices::Stub::experimental_async::CallDeleteTodos(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CallDeleteTodos_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::EmptyResponse>* GrpcServices::Stub::AsyncCallDeleteTodosRaw(::grpc::ClientContext* context, const ::DeleteTodos& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::EmptyResponse>::Create(channel_.get(), cq, rpcmethod_CallDeleteTodos_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::EmptyResponse>* GrpcServices::Stub::PrepareAsyncCallDeleteTodosRaw(::grpc::ClientContext* context, const ::DeleteTodos& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::EmptyResponse>::Create(channel_.get(), cq, rpcmethod_CallDeleteTodos_, context, request, false);
}

::grpc::Status GrpcServices::Stub::PostGetAccessToken(::grpc::ClientContext* context, const ::GetAccessToken& request, ::GetAccessTokenResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostGetAccessToken_, context, request, response);
}

void GrpcServices::Stub::experimental_async::PostGetAccessToken(::grpc::ClientContext* context, const ::GetAccessToken* request, ::GetAccessTokenResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostGetAccessToken_, context, request, response, std::move(f));
}

void GrpcServices::Stub::experimental_async::PostGetAccessToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetAccessTokenResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostGetAccessToken_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::GetAccessTokenResponse>* GrpcServices::Stub::AsyncPostGetAccessTokenRaw(::grpc::ClientContext* context, const ::GetAccessToken& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::GetAccessTokenResponse>::Create(channel_.get(), cq, rpcmethod_PostGetAccessToken_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GetAccessTokenResponse>* GrpcServices::Stub::PrepareAsyncPostGetAccessTokenRaw(::grpc::ClientContext* context, const ::GetAccessToken& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::GetAccessTokenResponse>::Create(channel_.get(), cq, rpcmethod_PostGetAccessToken_, context, request, false);
}

::grpc::Status GrpcServices::Stub::CallGetTodo(::grpc::ClientContext* context, const ::GetTodo& request, ::GetTodoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CallGetTodo_, context, request, response);
}

void GrpcServices::Stub::experimental_async::CallGetTodo(::grpc::ClientContext* context, const ::GetTodo* request, ::GetTodoResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CallGetTodo_, context, request, response, std::move(f));
}

void GrpcServices::Stub::experimental_async::CallGetTodo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetTodoResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CallGetTodo_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::GetTodoResponse>* GrpcServices::Stub::AsyncCallGetTodoRaw(::grpc::ClientContext* context, const ::GetTodo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::GetTodoResponse>::Create(channel_.get(), cq, rpcmethod_CallGetTodo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GetTodoResponse>* GrpcServices::Stub::PrepareAsyncCallGetTodoRaw(::grpc::ClientContext* context, const ::GetTodo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::GetTodoResponse>::Create(channel_.get(), cq, rpcmethod_CallGetTodo_, context, request, false);
}

::grpc::Status GrpcServices::Stub::CallGetTodos(::grpc::ClientContext* context, const ::GetTodos& request, ::GetTodosResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CallGetTodos_, context, request, response);
}

void GrpcServices::Stub::experimental_async::CallGetTodos(::grpc::ClientContext* context, const ::GetTodos* request, ::GetTodosResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CallGetTodos_, context, request, response, std::move(f));
}

void GrpcServices::Stub::experimental_async::CallGetTodos(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetTodosResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CallGetTodos_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::GetTodosResponse>* GrpcServices::Stub::AsyncCallGetTodosRaw(::grpc::ClientContext* context, const ::GetTodos& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::GetTodosResponse>::Create(channel_.get(), cq, rpcmethod_CallGetTodos_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GetTodosResponse>* GrpcServices::Stub::PrepareAsyncCallGetTodosRaw(::grpc::ClientContext* context, const ::GetTodos& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::GetTodosResponse>::Create(channel_.get(), cq, rpcmethod_CallGetTodos_, context, request, false);
}

::grpc::Status GrpcServices::Stub::GetHello(::grpc::ClientContext* context, const ::Hello& request, ::HelloResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetHello_, context, request, response);
}

void GrpcServices::Stub::experimental_async::GetHello(::grpc::ClientContext* context, const ::Hello* request, ::HelloResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetHello_, context, request, response, std::move(f));
}

void GrpcServices::Stub::experimental_async::GetHello(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HelloResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetHello_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::HelloResponse>* GrpcServices::Stub::AsyncGetHelloRaw(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::HelloResponse>::Create(channel_.get(), cq, rpcmethod_GetHello_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::HelloResponse>* GrpcServices::Stub::PrepareAsyncGetHelloRaw(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::HelloResponse>::Create(channel_.get(), cq, rpcmethod_GetHello_, context, request, false);
}

::grpc::Status GrpcServices::Stub::PostHello(::grpc::ClientContext* context, const ::Hello& request, ::HelloResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostHello_, context, request, response);
}

void GrpcServices::Stub::experimental_async::PostHello(::grpc::ClientContext* context, const ::Hello* request, ::HelloResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostHello_, context, request, response, std::move(f));
}

void GrpcServices::Stub::experimental_async::PostHello(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HelloResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostHello_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::HelloResponse>* GrpcServices::Stub::AsyncPostHelloRaw(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::HelloResponse>::Create(channel_.get(), cq, rpcmethod_PostHello_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::HelloResponse>* GrpcServices::Stub::PrepareAsyncPostHelloRaw(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::HelloResponse>::Create(channel_.get(), cq, rpcmethod_PostHello_, context, request, false);
}

::grpc::Status GrpcServices::Stub::PutHello(::grpc::ClientContext* context, const ::Hello& request, ::HelloResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PutHello_, context, request, response);
}

void GrpcServices::Stub::experimental_async::PutHello(::grpc::ClientContext* context, const ::Hello* request, ::HelloResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PutHello_, context, request, response, std::move(f));
}

void GrpcServices::Stub::experimental_async::PutHello(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HelloResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PutHello_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::HelloResponse>* GrpcServices::Stub::AsyncPutHelloRaw(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::HelloResponse>::Create(channel_.get(), cq, rpcmethod_PutHello_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::HelloResponse>* GrpcServices::Stub::PrepareAsyncPutHelloRaw(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::HelloResponse>::Create(channel_.get(), cq, rpcmethod_PutHello_, context, request, false);
}

::grpc::Status GrpcServices::Stub::DeleteHello(::grpc::ClientContext* context, const ::Hello& request, ::HelloResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteHello_, context, request, response);
}

void GrpcServices::Stub::experimental_async::DeleteHello(::grpc::ClientContext* context, const ::Hello* request, ::HelloResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteHello_, context, request, response, std::move(f));
}

void GrpcServices::Stub::experimental_async::DeleteHello(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HelloResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteHello_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::HelloResponse>* GrpcServices::Stub::AsyncDeleteHelloRaw(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::HelloResponse>::Create(channel_.get(), cq, rpcmethod_DeleteHello_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::HelloResponse>* GrpcServices::Stub::PrepareAsyncDeleteHelloRaw(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::HelloResponse>::Create(channel_.get(), cq, rpcmethod_DeleteHello_, context, request, false);
}

::grpc::Status GrpcServices::Stub::PatchHello(::grpc::ClientContext* context, const ::Hello& request, ::HelloResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PatchHello_, context, request, response);
}

void GrpcServices::Stub::experimental_async::PatchHello(::grpc::ClientContext* context, const ::Hello* request, ::HelloResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PatchHello_, context, request, response, std::move(f));
}

void GrpcServices::Stub::experimental_async::PatchHello(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HelloResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PatchHello_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::HelloResponse>* GrpcServices::Stub::AsyncPatchHelloRaw(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::HelloResponse>::Create(channel_.get(), cq, rpcmethod_PatchHello_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::HelloResponse>* GrpcServices::Stub::PrepareAsyncPatchHelloRaw(::grpc::ClientContext* context, const ::Hello& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::HelloResponse>::Create(channel_.get(), cq, rpcmethod_PatchHello_, context, request, false);
}

::grpc::Status GrpcServices::Stub::GetHelloSecure(::grpc::ClientContext* context, const ::HelloSecure& request, ::HelloResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetHelloSecure_, context, request, response);
}

void GrpcServices::Stub::experimental_async::GetHelloSecure(::grpc::ClientContext* context, const ::HelloSecure* request, ::HelloResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetHelloSecure_, context, request, response, std::move(f));
}

void GrpcServices::Stub::experimental_async::GetHelloSecure(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HelloResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetHelloSecure_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::HelloResponse>* GrpcServices::Stub::AsyncGetHelloSecureRaw(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::HelloResponse>::Create(channel_.get(), cq, rpcmethod_GetHelloSecure_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::HelloResponse>* GrpcServices::Stub::PrepareAsyncGetHelloSecureRaw(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::HelloResponse>::Create(channel_.get(), cq, rpcmethod_GetHelloSecure_, context, request, false);
}

::grpc::Status GrpcServices::Stub::PostHelloSecure(::grpc::ClientContext* context, const ::HelloSecure& request, ::HelloResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostHelloSecure_, context, request, response);
}

void GrpcServices::Stub::experimental_async::PostHelloSecure(::grpc::ClientContext* context, const ::HelloSecure* request, ::HelloResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostHelloSecure_, context, request, response, std::move(f));
}

void GrpcServices::Stub::experimental_async::PostHelloSecure(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HelloResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostHelloSecure_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::HelloResponse>* GrpcServices::Stub::AsyncPostHelloSecureRaw(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::HelloResponse>::Create(channel_.get(), cq, rpcmethod_PostHelloSecure_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::HelloResponse>* GrpcServices::Stub::PrepareAsyncPostHelloSecureRaw(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::HelloResponse>::Create(channel_.get(), cq, rpcmethod_PostHelloSecure_, context, request, false);
}

::grpc::Status GrpcServices::Stub::PutHelloSecure(::grpc::ClientContext* context, const ::HelloSecure& request, ::HelloResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PutHelloSecure_, context, request, response);
}

void GrpcServices::Stub::experimental_async::PutHelloSecure(::grpc::ClientContext* context, const ::HelloSecure* request, ::HelloResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PutHelloSecure_, context, request, response, std::move(f));
}

void GrpcServices::Stub::experimental_async::PutHelloSecure(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HelloResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PutHelloSecure_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::HelloResponse>* GrpcServices::Stub::AsyncPutHelloSecureRaw(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::HelloResponse>::Create(channel_.get(), cq, rpcmethod_PutHelloSecure_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::HelloResponse>* GrpcServices::Stub::PrepareAsyncPutHelloSecureRaw(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::HelloResponse>::Create(channel_.get(), cq, rpcmethod_PutHelloSecure_, context, request, false);
}

::grpc::Status GrpcServices::Stub::DeleteHelloSecure(::grpc::ClientContext* context, const ::HelloSecure& request, ::HelloResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteHelloSecure_, context, request, response);
}

void GrpcServices::Stub::experimental_async::DeleteHelloSecure(::grpc::ClientContext* context, const ::HelloSecure* request, ::HelloResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteHelloSecure_, context, request, response, std::move(f));
}

void GrpcServices::Stub::experimental_async::DeleteHelloSecure(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HelloResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteHelloSecure_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::HelloResponse>* GrpcServices::Stub::AsyncDeleteHelloSecureRaw(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::HelloResponse>::Create(channel_.get(), cq, rpcmethod_DeleteHelloSecure_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::HelloResponse>* GrpcServices::Stub::PrepareAsyncDeleteHelloSecureRaw(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::HelloResponse>::Create(channel_.get(), cq, rpcmethod_DeleteHelloSecure_, context, request, false);
}

::grpc::Status GrpcServices::Stub::PatchHelloSecure(::grpc::ClientContext* context, const ::HelloSecure& request, ::HelloResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PatchHelloSecure_, context, request, response);
}

void GrpcServices::Stub::experimental_async::PatchHelloSecure(::grpc::ClientContext* context, const ::HelloSecure* request, ::HelloResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PatchHelloSecure_, context, request, response, std::move(f));
}

void GrpcServices::Stub::experimental_async::PatchHelloSecure(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HelloResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PatchHelloSecure_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::HelloResponse>* GrpcServices::Stub::AsyncPatchHelloSecureRaw(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::HelloResponse>::Create(channel_.get(), cq, rpcmethod_PatchHelloSecure_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::HelloResponse>* GrpcServices::Stub::PrepareAsyncPatchHelloSecureRaw(::grpc::ClientContext* context, const ::HelloSecure& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::HelloResponse>::Create(channel_.get(), cq, rpcmethod_PatchHelloSecure_, context, request, false);
}

::grpc::Status GrpcServices::Stub::PutRegister(::grpc::ClientContext* context, const ::Register& request, ::RegisterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PutRegister_, context, request, response);
}

void GrpcServices::Stub::experimental_async::PutRegister(::grpc::ClientContext* context, const ::Register* request, ::RegisterResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PutRegister_, context, request, response, std::move(f));
}

void GrpcServices::Stub::experimental_async::PutRegister(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::RegisterResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PutRegister_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::RegisterResponse>* GrpcServices::Stub::AsyncPutRegisterRaw(::grpc::ClientContext* context, const ::Register& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::RegisterResponse>::Create(channel_.get(), cq, rpcmethod_PutRegister_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::RegisterResponse>* GrpcServices::Stub::PrepareAsyncPutRegisterRaw(::grpc::ClientContext* context, const ::Register& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::RegisterResponse>::Create(channel_.get(), cq, rpcmethod_PutRegister_, context, request, false);
}

::grpc::Status GrpcServices::Stub::PostRegister(::grpc::ClientContext* context, const ::Register& request, ::RegisterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostRegister_, context, request, response);
}

void GrpcServices::Stub::experimental_async::PostRegister(::grpc::ClientContext* context, const ::Register* request, ::RegisterResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostRegister_, context, request, response, std::move(f));
}

void GrpcServices::Stub::experimental_async::PostRegister(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::RegisterResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostRegister_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::RegisterResponse>* GrpcServices::Stub::AsyncPostRegisterRaw(::grpc::ClientContext* context, const ::Register& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::RegisterResponse>::Create(channel_.get(), cq, rpcmethod_PostRegister_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::RegisterResponse>* GrpcServices::Stub::PrepareAsyncPostRegisterRaw(::grpc::ClientContext* context, const ::Register& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::RegisterResponse>::Create(channel_.get(), cq, rpcmethod_PostRegister_, context, request, false);
}

::grpc::Status GrpcServices::Stub::PostResetTodos(::grpc::ClientContext* context, const ::ResetTodos& request, ::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostResetTodos_, context, request, response);
}

void GrpcServices::Stub::experimental_async::PostResetTodos(::grpc::ClientContext* context, const ::ResetTodos* request, ::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostResetTodos_, context, request, response, std::move(f));
}

void GrpcServices::Stub::experimental_async::PostResetTodos(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostResetTodos_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::EmptyResponse>* GrpcServices::Stub::AsyncPostResetTodosRaw(::grpc::ClientContext* context, const ::ResetTodos& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::EmptyResponse>::Create(channel_.get(), cq, rpcmethod_PostResetTodos_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::EmptyResponse>* GrpcServices::Stub::PrepareAsyncPostResetTodosRaw(::grpc::ClientContext* context, const ::ResetTodos& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::EmptyResponse>::Create(channel_.get(), cq, rpcmethod_PostResetTodos_, context, request, false);
}

::grpc::ClientReader< ::FileContent>* GrpcServices::Stub::ServerStreamFilesRaw(::grpc::ClientContext* context, const ::StreamFiles& request) {
  return ::grpc::internal::ClientReaderFactory< ::FileContent>::Create(channel_.get(), rpcmethod_ServerStreamFiles_, context, request);
}

void GrpcServices::Stub::experimental_async::ServerStreamFiles(::grpc::ClientContext* context, ::StreamFiles* request, ::grpc::experimental::ClientReadReactor< ::FileContent>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::FileContent>::Create(stub_->channel_.get(), stub_->rpcmethod_ServerStreamFiles_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::FileContent>* GrpcServices::Stub::AsyncServerStreamFilesRaw(::grpc::ClientContext* context, const ::StreamFiles& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::FileContent>::Create(channel_.get(), cq, rpcmethod_ServerStreamFiles_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::FileContent>* GrpcServices::Stub::PrepareAsyncServerStreamFilesRaw(::grpc::ClientContext* context, const ::StreamFiles& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::FileContent>::Create(channel_.get(), cq, rpcmethod_ServerStreamFiles_, context, request, false, nullptr);
}

::grpc::ClientReader< ::StreamServerEventsResponse>* GrpcServices::Stub::ServerStreamServerEventsRaw(::grpc::ClientContext* context, const ::StreamServerEvents& request) {
  return ::grpc::internal::ClientReaderFactory< ::StreamServerEventsResponse>::Create(channel_.get(), rpcmethod_ServerStreamServerEvents_, context, request);
}

void GrpcServices::Stub::experimental_async::ServerStreamServerEvents(::grpc::ClientContext* context, ::StreamServerEvents* request, ::grpc::experimental::ClientReadReactor< ::StreamServerEventsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::StreamServerEventsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ServerStreamServerEvents_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::StreamServerEventsResponse>* GrpcServices::Stub::AsyncServerStreamServerEventsRaw(::grpc::ClientContext* context, const ::StreamServerEvents& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::StreamServerEventsResponse>::Create(channel_.get(), cq, rpcmethod_ServerStreamServerEvents_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::StreamServerEventsResponse>* GrpcServices::Stub::PrepareAsyncServerStreamServerEventsRaw(::grpc::ClientContext* context, const ::StreamServerEvents& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::StreamServerEventsResponse>::Create(channel_.get(), cq, rpcmethod_ServerStreamServerEvents_, context, request, false, nullptr);
}

::grpc::Status GrpcServices::Stub::PostUnAssignRoles(::grpc::ClientContext* context, const ::UnAssignRoles& request, ::UnAssignRolesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostUnAssignRoles_, context, request, response);
}

void GrpcServices::Stub::experimental_async::PostUnAssignRoles(::grpc::ClientContext* context, const ::UnAssignRoles* request, ::UnAssignRolesResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostUnAssignRoles_, context, request, response, std::move(f));
}

void GrpcServices::Stub::experimental_async::PostUnAssignRoles(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::UnAssignRolesResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostUnAssignRoles_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::UnAssignRolesResponse>* GrpcServices::Stub::AsyncPostUnAssignRolesRaw(::grpc::ClientContext* context, const ::UnAssignRoles& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::UnAssignRolesResponse>::Create(channel_.get(), cq, rpcmethod_PostUnAssignRoles_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::UnAssignRolesResponse>* GrpcServices::Stub::PrepareAsyncPostUnAssignRolesRaw(::grpc::ClientContext* context, const ::UnAssignRoles& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::UnAssignRolesResponse>::Create(channel_.get(), cq, rpcmethod_PostUnAssignRoles_, context, request, false);
}

::grpc::Status GrpcServices::Stub::PutUpdateTodo(::grpc::ClientContext* context, const ::UpdateTodo& request, ::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PutUpdateTodo_, context, request, response);
}

void GrpcServices::Stub::experimental_async::PutUpdateTodo(::grpc::ClientContext* context, const ::UpdateTodo* request, ::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PutUpdateTodo_, context, request, response, std::move(f));
}

void GrpcServices::Stub::experimental_async::PutUpdateTodo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PutUpdateTodo_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::EmptyResponse>* GrpcServices::Stub::AsyncPutUpdateTodoRaw(::grpc::ClientContext* context, const ::UpdateTodo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::EmptyResponse>::Create(channel_.get(), cq, rpcmethod_PutUpdateTodo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::EmptyResponse>* GrpcServices::Stub::PrepareAsyncPutUpdateTodoRaw(::grpc::ClientContext* context, const ::UpdateTodo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::EmptyResponse>::Create(channel_.get(), cq, rpcmethod_PutUpdateTodo_, context, request, false);
}

GrpcServices::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcServices_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpcServices::Service, ::AssignRoles, ::AssignRolesResponse>(
          std::mem_fn(&GrpcServices::Service::PostAssignRoles), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcServices_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpcServices::Service, ::Authenticate, ::AuthenticateResponse>(
          std::mem_fn(&GrpcServices::Service::OptionsAuthenticate), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcServices_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpcServices::Service, ::Authenticate, ::AuthenticateResponse>(
          std::mem_fn(&GrpcServices::Service::GetAuthenticate), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcServices_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpcServices::Service, ::Authenticate, ::AuthenticateResponse>(
          std::mem_fn(&GrpcServices::Service::PostAuthenticate), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcServices_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpcServices::Service, ::Authenticate, ::AuthenticateResponse>(
          std::mem_fn(&GrpcServices::Service::DeleteAuthenticate), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcServices_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpcServices::Service, ::ConvertSessionToToken, ::ConvertSessionToTokenResponse>(
          std::mem_fn(&GrpcServices::Service::PostConvertSessionToToken), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcServices_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpcServices::Service, ::CreateTodo, ::CreateTodoResponse>(
          std::mem_fn(&GrpcServices::Service::PostCreateTodo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcServices_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpcServices::Service, ::DeleteTodo, ::EmptyResponse>(
          std::mem_fn(&GrpcServices::Service::CallDeleteTodo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcServices_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpcServices::Service, ::DeleteTodos, ::EmptyResponse>(
          std::mem_fn(&GrpcServices::Service::CallDeleteTodos), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcServices_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpcServices::Service, ::GetAccessToken, ::GetAccessTokenResponse>(
          std::mem_fn(&GrpcServices::Service::PostGetAccessToken), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcServices_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpcServices::Service, ::GetTodo, ::GetTodoResponse>(
          std::mem_fn(&GrpcServices::Service::CallGetTodo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcServices_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpcServices::Service, ::GetTodos, ::GetTodosResponse>(
          std::mem_fn(&GrpcServices::Service::CallGetTodos), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcServices_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpcServices::Service, ::Hello, ::HelloResponse>(
          std::mem_fn(&GrpcServices::Service::GetHello), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcServices_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpcServices::Service, ::Hello, ::HelloResponse>(
          std::mem_fn(&GrpcServices::Service::PostHello), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcServices_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpcServices::Service, ::Hello, ::HelloResponse>(
          std::mem_fn(&GrpcServices::Service::PutHello), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcServices_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpcServices::Service, ::Hello, ::HelloResponse>(
          std::mem_fn(&GrpcServices::Service::DeleteHello), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcServices_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpcServices::Service, ::Hello, ::HelloResponse>(
          std::mem_fn(&GrpcServices::Service::PatchHello), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcServices_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpcServices::Service, ::HelloSecure, ::HelloResponse>(
          std::mem_fn(&GrpcServices::Service::GetHelloSecure), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcServices_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpcServices::Service, ::HelloSecure, ::HelloResponse>(
          std::mem_fn(&GrpcServices::Service::PostHelloSecure), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcServices_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpcServices::Service, ::HelloSecure, ::HelloResponse>(
          std::mem_fn(&GrpcServices::Service::PutHelloSecure), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcServices_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpcServices::Service, ::HelloSecure, ::HelloResponse>(
          std::mem_fn(&GrpcServices::Service::DeleteHelloSecure), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcServices_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpcServices::Service, ::HelloSecure, ::HelloResponse>(
          std::mem_fn(&GrpcServices::Service::PatchHelloSecure), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcServices_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpcServices::Service, ::Register, ::RegisterResponse>(
          std::mem_fn(&GrpcServices::Service::PutRegister), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcServices_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpcServices::Service, ::Register, ::RegisterResponse>(
          std::mem_fn(&GrpcServices::Service::PostRegister), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcServices_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpcServices::Service, ::ResetTodos, ::EmptyResponse>(
          std::mem_fn(&GrpcServices::Service::PostResetTodos), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcServices_method_names[25],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< GrpcServices::Service, ::StreamFiles, ::FileContent>(
          std::mem_fn(&GrpcServices::Service::ServerStreamFiles), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcServices_method_names[26],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< GrpcServices::Service, ::StreamServerEvents, ::StreamServerEventsResponse>(
          std::mem_fn(&GrpcServices::Service::ServerStreamServerEvents), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcServices_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpcServices::Service, ::UnAssignRoles, ::UnAssignRolesResponse>(
          std::mem_fn(&GrpcServices::Service::PostUnAssignRoles), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcServices_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpcServices::Service, ::UpdateTodo, ::EmptyResponse>(
          std::mem_fn(&GrpcServices::Service::PutUpdateTodo), this)));
}

GrpcServices::Service::~Service() {
}

::grpc::Status GrpcServices::Service::PostAssignRoles(::grpc::ServerContext* context, const ::AssignRoles* request, ::AssignRolesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpcServices::Service::OptionsAuthenticate(::grpc::ServerContext* context, const ::Authenticate* request, ::AuthenticateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpcServices::Service::GetAuthenticate(::grpc::ServerContext* context, const ::Authenticate* request, ::AuthenticateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpcServices::Service::PostAuthenticate(::grpc::ServerContext* context, const ::Authenticate* request, ::AuthenticateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpcServices::Service::DeleteAuthenticate(::grpc::ServerContext* context, const ::Authenticate* request, ::AuthenticateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpcServices::Service::PostConvertSessionToToken(::grpc::ServerContext* context, const ::ConvertSessionToToken* request, ::ConvertSessionToTokenResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpcServices::Service::PostCreateTodo(::grpc::ServerContext* context, const ::CreateTodo* request, ::CreateTodoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpcServices::Service::CallDeleteTodo(::grpc::ServerContext* context, const ::DeleteTodo* request, ::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpcServices::Service::CallDeleteTodos(::grpc::ServerContext* context, const ::DeleteTodos* request, ::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpcServices::Service::PostGetAccessToken(::grpc::ServerContext* context, const ::GetAccessToken* request, ::GetAccessTokenResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpcServices::Service::CallGetTodo(::grpc::ServerContext* context, const ::GetTodo* request, ::GetTodoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpcServices::Service::CallGetTodos(::grpc::ServerContext* context, const ::GetTodos* request, ::GetTodosResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpcServices::Service::GetHello(::grpc::ServerContext* context, const ::Hello* request, ::HelloResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpcServices::Service::PostHello(::grpc::ServerContext* context, const ::Hello* request, ::HelloResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpcServices::Service::PutHello(::grpc::ServerContext* context, const ::Hello* request, ::HelloResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpcServices::Service::DeleteHello(::grpc::ServerContext* context, const ::Hello* request, ::HelloResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpcServices::Service::PatchHello(::grpc::ServerContext* context, const ::Hello* request, ::HelloResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpcServices::Service::GetHelloSecure(::grpc::ServerContext* context, const ::HelloSecure* request, ::HelloResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpcServices::Service::PostHelloSecure(::grpc::ServerContext* context, const ::HelloSecure* request, ::HelloResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpcServices::Service::PutHelloSecure(::grpc::ServerContext* context, const ::HelloSecure* request, ::HelloResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpcServices::Service::DeleteHelloSecure(::grpc::ServerContext* context, const ::HelloSecure* request, ::HelloResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpcServices::Service::PatchHelloSecure(::grpc::ServerContext* context, const ::HelloSecure* request, ::HelloResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpcServices::Service::PutRegister(::grpc::ServerContext* context, const ::Register* request, ::RegisterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpcServices::Service::PostRegister(::grpc::ServerContext* context, const ::Register* request, ::RegisterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpcServices::Service::PostResetTodos(::grpc::ServerContext* context, const ::ResetTodos* request, ::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpcServices::Service::ServerStreamFiles(::grpc::ServerContext* context, const ::StreamFiles* request, ::grpc::ServerWriter< ::FileContent>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpcServices::Service::ServerStreamServerEvents(::grpc::ServerContext* context, const ::StreamServerEvents* request, ::grpc::ServerWriter< ::StreamServerEventsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpcServices::Service::PostUnAssignRoles(::grpc::ServerContext* context, const ::UnAssignRoles* request, ::UnAssignRolesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpcServices::Service::PutUpdateTodo(::grpc::ServerContext* context, const ::UpdateTodo* request, ::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


