// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: services.proto
// </auto-generated>
// Original file comments:
// Options:
// Date: 2019-12-08 23:23:15
// Version: 5.71
// Tip: To override a DTO option, remove "//" prefix before updating
// BaseUrl: https://localhost:5001
//
// //GlobalNamespace: 
// //AddDescriptionAsComments: True
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace TodoWorld {
  public static partial class GrpcServices
  {
    static readonly string __ServiceName = "GrpcServices";

    static readonly grpc::Marshaller<global::TodoWorld.AssignRoles> __Marshaller_AssignRoles = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TodoWorld.AssignRoles.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TodoWorld.AssignRolesResponse> __Marshaller_AssignRolesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TodoWorld.AssignRolesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TodoWorld.Authenticate> __Marshaller_Authenticate = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TodoWorld.Authenticate.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TodoWorld.AuthenticateResponse> __Marshaller_AuthenticateResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TodoWorld.AuthenticateResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TodoWorld.ConvertSessionToToken> __Marshaller_ConvertSessionToToken = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TodoWorld.ConvertSessionToToken.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TodoWorld.ConvertSessionToTokenResponse> __Marshaller_ConvertSessionToTokenResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TodoWorld.ConvertSessionToTokenResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TodoWorld.CreateTodo> __Marshaller_CreateTodo = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TodoWorld.CreateTodo.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TodoWorld.CreateTodoResponse> __Marshaller_CreateTodoResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TodoWorld.CreateTodoResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TodoWorld.DeleteTodo> __Marshaller_DeleteTodo = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TodoWorld.DeleteTodo.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TodoWorld.EmptyResponse> __Marshaller_EmptyResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TodoWorld.EmptyResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TodoWorld.DeleteTodos> __Marshaller_DeleteTodos = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TodoWorld.DeleteTodos.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TodoWorld.GetAccessToken> __Marshaller_GetAccessToken = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TodoWorld.GetAccessToken.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TodoWorld.GetAccessTokenResponse> __Marshaller_GetAccessTokenResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TodoWorld.GetAccessTokenResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TodoWorld.GetTodo> __Marshaller_GetTodo = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TodoWorld.GetTodo.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TodoWorld.GetTodoResponse> __Marshaller_GetTodoResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TodoWorld.GetTodoResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TodoWorld.GetTodos> __Marshaller_GetTodos = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TodoWorld.GetTodos.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TodoWorld.GetTodosResponse> __Marshaller_GetTodosResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TodoWorld.GetTodosResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TodoWorld.Hello> __Marshaller_Hello = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TodoWorld.Hello.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TodoWorld.HelloResponse> __Marshaller_HelloResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TodoWorld.HelloResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TodoWorld.HelloSecure> __Marshaller_HelloSecure = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TodoWorld.HelloSecure.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TodoWorld.Register> __Marshaller_Register = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TodoWorld.Register.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TodoWorld.RegisterResponse> __Marshaller_RegisterResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TodoWorld.RegisterResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TodoWorld.ResetTodos> __Marshaller_ResetTodos = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TodoWorld.ResetTodos.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TodoWorld.StreamFiles> __Marshaller_StreamFiles = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TodoWorld.StreamFiles.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TodoWorld.FileContent> __Marshaller_FileContent = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TodoWorld.FileContent.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TodoWorld.StreamServerEvents> __Marshaller_StreamServerEvents = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TodoWorld.StreamServerEvents.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TodoWorld.StreamServerEventsResponse> __Marshaller_StreamServerEventsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TodoWorld.StreamServerEventsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TodoWorld.UnAssignRoles> __Marshaller_UnAssignRoles = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TodoWorld.UnAssignRoles.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TodoWorld.UnAssignRolesResponse> __Marshaller_UnAssignRolesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TodoWorld.UnAssignRolesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TodoWorld.UpdateTodo> __Marshaller_UpdateTodo = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TodoWorld.UpdateTodo.Parser.ParseFrom);

    static readonly grpc::Method<global::TodoWorld.AssignRoles, global::TodoWorld.AssignRolesResponse> __Method_PostAssignRoles = new grpc::Method<global::TodoWorld.AssignRoles, global::TodoWorld.AssignRolesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostAssignRoles",
        __Marshaller_AssignRoles,
        __Marshaller_AssignRolesResponse);

    static readonly grpc::Method<global::TodoWorld.Authenticate, global::TodoWorld.AuthenticateResponse> __Method_OptionsAuthenticate = new grpc::Method<global::TodoWorld.Authenticate, global::TodoWorld.AuthenticateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "OptionsAuthenticate",
        __Marshaller_Authenticate,
        __Marshaller_AuthenticateResponse);

    static readonly grpc::Method<global::TodoWorld.Authenticate, global::TodoWorld.AuthenticateResponse> __Method_GetAuthenticate = new grpc::Method<global::TodoWorld.Authenticate, global::TodoWorld.AuthenticateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAuthenticate",
        __Marshaller_Authenticate,
        __Marshaller_AuthenticateResponse);

    static readonly grpc::Method<global::TodoWorld.Authenticate, global::TodoWorld.AuthenticateResponse> __Method_PostAuthenticate = new grpc::Method<global::TodoWorld.Authenticate, global::TodoWorld.AuthenticateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostAuthenticate",
        __Marshaller_Authenticate,
        __Marshaller_AuthenticateResponse);

    static readonly grpc::Method<global::TodoWorld.Authenticate, global::TodoWorld.AuthenticateResponse> __Method_DeleteAuthenticate = new grpc::Method<global::TodoWorld.Authenticate, global::TodoWorld.AuthenticateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAuthenticate",
        __Marshaller_Authenticate,
        __Marshaller_AuthenticateResponse);

    static readonly grpc::Method<global::TodoWorld.ConvertSessionToToken, global::TodoWorld.ConvertSessionToTokenResponse> __Method_PostConvertSessionToToken = new grpc::Method<global::TodoWorld.ConvertSessionToToken, global::TodoWorld.ConvertSessionToTokenResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostConvertSessionToToken",
        __Marshaller_ConvertSessionToToken,
        __Marshaller_ConvertSessionToTokenResponse);

    static readonly grpc::Method<global::TodoWorld.CreateTodo, global::TodoWorld.CreateTodoResponse> __Method_PostCreateTodo = new grpc::Method<global::TodoWorld.CreateTodo, global::TodoWorld.CreateTodoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostCreateTodo",
        __Marshaller_CreateTodo,
        __Marshaller_CreateTodoResponse);

    static readonly grpc::Method<global::TodoWorld.DeleteTodo, global::TodoWorld.EmptyResponse> __Method_CallDeleteTodo = new grpc::Method<global::TodoWorld.DeleteTodo, global::TodoWorld.EmptyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CallDeleteTodo",
        __Marshaller_DeleteTodo,
        __Marshaller_EmptyResponse);

    static readonly grpc::Method<global::TodoWorld.DeleteTodos, global::TodoWorld.EmptyResponse> __Method_CallDeleteTodos = new grpc::Method<global::TodoWorld.DeleteTodos, global::TodoWorld.EmptyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CallDeleteTodos",
        __Marshaller_DeleteTodos,
        __Marshaller_EmptyResponse);

    static readonly grpc::Method<global::TodoWorld.GetAccessToken, global::TodoWorld.GetAccessTokenResponse> __Method_PostGetAccessToken = new grpc::Method<global::TodoWorld.GetAccessToken, global::TodoWorld.GetAccessTokenResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostGetAccessToken",
        __Marshaller_GetAccessToken,
        __Marshaller_GetAccessTokenResponse);

    static readonly grpc::Method<global::TodoWorld.GetTodo, global::TodoWorld.GetTodoResponse> __Method_CallGetTodo = new grpc::Method<global::TodoWorld.GetTodo, global::TodoWorld.GetTodoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CallGetTodo",
        __Marshaller_GetTodo,
        __Marshaller_GetTodoResponse);

    static readonly grpc::Method<global::TodoWorld.GetTodos, global::TodoWorld.GetTodosResponse> __Method_CallGetTodos = new grpc::Method<global::TodoWorld.GetTodos, global::TodoWorld.GetTodosResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CallGetTodos",
        __Marshaller_GetTodos,
        __Marshaller_GetTodosResponse);

    static readonly grpc::Method<global::TodoWorld.Hello, global::TodoWorld.HelloResponse> __Method_GetHello = new grpc::Method<global::TodoWorld.Hello, global::TodoWorld.HelloResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetHello",
        __Marshaller_Hello,
        __Marshaller_HelloResponse);

    static readonly grpc::Method<global::TodoWorld.Hello, global::TodoWorld.HelloResponse> __Method_PostHello = new grpc::Method<global::TodoWorld.Hello, global::TodoWorld.HelloResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostHello",
        __Marshaller_Hello,
        __Marshaller_HelloResponse);

    static readonly grpc::Method<global::TodoWorld.Hello, global::TodoWorld.HelloResponse> __Method_PutHello = new grpc::Method<global::TodoWorld.Hello, global::TodoWorld.HelloResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PutHello",
        __Marshaller_Hello,
        __Marshaller_HelloResponse);

    static readonly grpc::Method<global::TodoWorld.Hello, global::TodoWorld.HelloResponse> __Method_DeleteHello = new grpc::Method<global::TodoWorld.Hello, global::TodoWorld.HelloResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteHello",
        __Marshaller_Hello,
        __Marshaller_HelloResponse);

    static readonly grpc::Method<global::TodoWorld.Hello, global::TodoWorld.HelloResponse> __Method_PatchHello = new grpc::Method<global::TodoWorld.Hello, global::TodoWorld.HelloResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchHello",
        __Marshaller_Hello,
        __Marshaller_HelloResponse);

    static readonly grpc::Method<global::TodoWorld.HelloSecure, global::TodoWorld.HelloResponse> __Method_GetHelloSecure = new grpc::Method<global::TodoWorld.HelloSecure, global::TodoWorld.HelloResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetHelloSecure",
        __Marshaller_HelloSecure,
        __Marshaller_HelloResponse);

    static readonly grpc::Method<global::TodoWorld.HelloSecure, global::TodoWorld.HelloResponse> __Method_PostHelloSecure = new grpc::Method<global::TodoWorld.HelloSecure, global::TodoWorld.HelloResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostHelloSecure",
        __Marshaller_HelloSecure,
        __Marshaller_HelloResponse);

    static readonly grpc::Method<global::TodoWorld.HelloSecure, global::TodoWorld.HelloResponse> __Method_PutHelloSecure = new grpc::Method<global::TodoWorld.HelloSecure, global::TodoWorld.HelloResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PutHelloSecure",
        __Marshaller_HelloSecure,
        __Marshaller_HelloResponse);

    static readonly grpc::Method<global::TodoWorld.HelloSecure, global::TodoWorld.HelloResponse> __Method_DeleteHelloSecure = new grpc::Method<global::TodoWorld.HelloSecure, global::TodoWorld.HelloResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteHelloSecure",
        __Marshaller_HelloSecure,
        __Marshaller_HelloResponse);

    static readonly grpc::Method<global::TodoWorld.HelloSecure, global::TodoWorld.HelloResponse> __Method_PatchHelloSecure = new grpc::Method<global::TodoWorld.HelloSecure, global::TodoWorld.HelloResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchHelloSecure",
        __Marshaller_HelloSecure,
        __Marshaller_HelloResponse);

    static readonly grpc::Method<global::TodoWorld.Register, global::TodoWorld.RegisterResponse> __Method_PutRegister = new grpc::Method<global::TodoWorld.Register, global::TodoWorld.RegisterResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PutRegister",
        __Marshaller_Register,
        __Marshaller_RegisterResponse);

    static readonly grpc::Method<global::TodoWorld.Register, global::TodoWorld.RegisterResponse> __Method_PostRegister = new grpc::Method<global::TodoWorld.Register, global::TodoWorld.RegisterResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostRegister",
        __Marshaller_Register,
        __Marshaller_RegisterResponse);

    static readonly grpc::Method<global::TodoWorld.ResetTodos, global::TodoWorld.EmptyResponse> __Method_PostResetTodos = new grpc::Method<global::TodoWorld.ResetTodos, global::TodoWorld.EmptyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostResetTodos",
        __Marshaller_ResetTodos,
        __Marshaller_EmptyResponse);

    static readonly grpc::Method<global::TodoWorld.StreamFiles, global::TodoWorld.FileContent> __Method_ServerStreamFiles = new grpc::Method<global::TodoWorld.StreamFiles, global::TodoWorld.FileContent>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ServerStreamFiles",
        __Marshaller_StreamFiles,
        __Marshaller_FileContent);

    static readonly grpc::Method<global::TodoWorld.StreamServerEvents, global::TodoWorld.StreamServerEventsResponse> __Method_ServerStreamServerEvents = new grpc::Method<global::TodoWorld.StreamServerEvents, global::TodoWorld.StreamServerEventsResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ServerStreamServerEvents",
        __Marshaller_StreamServerEvents,
        __Marshaller_StreamServerEventsResponse);

    static readonly grpc::Method<global::TodoWorld.UnAssignRoles, global::TodoWorld.UnAssignRolesResponse> __Method_PostUnAssignRoles = new grpc::Method<global::TodoWorld.UnAssignRoles, global::TodoWorld.UnAssignRolesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostUnAssignRoles",
        __Marshaller_UnAssignRoles,
        __Marshaller_UnAssignRolesResponse);

    static readonly grpc::Method<global::TodoWorld.UpdateTodo, global::TodoWorld.EmptyResponse> __Method_PutUpdateTodo = new grpc::Method<global::TodoWorld.UpdateTodo, global::TodoWorld.EmptyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PutUpdateTodo",
        __Marshaller_UpdateTodo,
        __Marshaller_EmptyResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::TodoWorld.ServicesReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of GrpcServices</summary>
    [grpc::BindServiceMethod(typeof(GrpcServices), "BindService")]
    public abstract partial class GrpcServicesBase
    {
      public virtual global::System.Threading.Tasks.Task<global::TodoWorld.AssignRolesResponse> PostAssignRoles(global::TodoWorld.AssignRoles request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TodoWorld.AuthenticateResponse> OptionsAuthenticate(global::TodoWorld.Authenticate request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TodoWorld.AuthenticateResponse> GetAuthenticate(global::TodoWorld.Authenticate request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TodoWorld.AuthenticateResponse> PostAuthenticate(global::TodoWorld.Authenticate request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TodoWorld.AuthenticateResponse> DeleteAuthenticate(global::TodoWorld.Authenticate request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TodoWorld.ConvertSessionToTokenResponse> PostConvertSessionToToken(global::TodoWorld.ConvertSessionToToken request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TodoWorld.CreateTodoResponse> PostCreateTodo(global::TodoWorld.CreateTodo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TodoWorld.EmptyResponse> CallDeleteTodo(global::TodoWorld.DeleteTodo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TodoWorld.EmptyResponse> CallDeleteTodos(global::TodoWorld.DeleteTodos request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TodoWorld.GetAccessTokenResponse> PostGetAccessToken(global::TodoWorld.GetAccessToken request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TodoWorld.GetTodoResponse> CallGetTodo(global::TodoWorld.GetTodo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TodoWorld.GetTodosResponse> CallGetTodos(global::TodoWorld.GetTodos request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TodoWorld.HelloResponse> GetHello(global::TodoWorld.Hello request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TodoWorld.HelloResponse> PostHello(global::TodoWorld.Hello request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TodoWorld.HelloResponse> PutHello(global::TodoWorld.Hello request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TodoWorld.HelloResponse> DeleteHello(global::TodoWorld.Hello request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TodoWorld.HelloResponse> PatchHello(global::TodoWorld.Hello request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TodoWorld.HelloResponse> GetHelloSecure(global::TodoWorld.HelloSecure request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TodoWorld.HelloResponse> PostHelloSecure(global::TodoWorld.HelloSecure request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TodoWorld.HelloResponse> PutHelloSecure(global::TodoWorld.HelloSecure request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TodoWorld.HelloResponse> DeleteHelloSecure(global::TodoWorld.HelloSecure request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TodoWorld.HelloResponse> PatchHelloSecure(global::TodoWorld.HelloSecure request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TodoWorld.RegisterResponse> PutRegister(global::TodoWorld.Register request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TodoWorld.RegisterResponse> PostRegister(global::TodoWorld.Register request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TodoWorld.EmptyResponse> PostResetTodos(global::TodoWorld.ResetTodos request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task ServerStreamFiles(global::TodoWorld.StreamFiles request, grpc::IServerStreamWriter<global::TodoWorld.FileContent> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task ServerStreamServerEvents(global::TodoWorld.StreamServerEvents request, grpc::IServerStreamWriter<global::TodoWorld.StreamServerEventsResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TodoWorld.UnAssignRolesResponse> PostUnAssignRoles(global::TodoWorld.UnAssignRoles request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TodoWorld.EmptyResponse> PutUpdateTodo(global::TodoWorld.UpdateTodo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for GrpcServices</summary>
    public partial class GrpcServicesClient : grpc::ClientBase<GrpcServicesClient>
    {
      /// <summary>Creates a new client for GrpcServices</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public GrpcServicesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for GrpcServices that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public GrpcServicesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected GrpcServicesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected GrpcServicesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::TodoWorld.AssignRolesResponse PostAssignRoles(global::TodoWorld.AssignRoles request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAssignRoles(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TodoWorld.AssignRolesResponse PostAssignRoles(global::TodoWorld.AssignRoles request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostAssignRoles, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.AssignRolesResponse> PostAssignRolesAsync(global::TodoWorld.AssignRoles request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAssignRolesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.AssignRolesResponse> PostAssignRolesAsync(global::TodoWorld.AssignRoles request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostAssignRoles, null, options, request);
      }
      public virtual global::TodoWorld.AuthenticateResponse OptionsAuthenticate(global::TodoWorld.Authenticate request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OptionsAuthenticate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TodoWorld.AuthenticateResponse OptionsAuthenticate(global::TodoWorld.Authenticate request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_OptionsAuthenticate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.AuthenticateResponse> OptionsAuthenticateAsync(global::TodoWorld.Authenticate request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OptionsAuthenticateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.AuthenticateResponse> OptionsAuthenticateAsync(global::TodoWorld.Authenticate request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_OptionsAuthenticate, null, options, request);
      }
      public virtual global::TodoWorld.AuthenticateResponse GetAuthenticate(global::TodoWorld.Authenticate request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAuthenticate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TodoWorld.AuthenticateResponse GetAuthenticate(global::TodoWorld.Authenticate request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAuthenticate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.AuthenticateResponse> GetAuthenticateAsync(global::TodoWorld.Authenticate request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAuthenticateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.AuthenticateResponse> GetAuthenticateAsync(global::TodoWorld.Authenticate request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAuthenticate, null, options, request);
      }
      public virtual global::TodoWorld.AuthenticateResponse PostAuthenticate(global::TodoWorld.Authenticate request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAuthenticate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TodoWorld.AuthenticateResponse PostAuthenticate(global::TodoWorld.Authenticate request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostAuthenticate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.AuthenticateResponse> PostAuthenticateAsync(global::TodoWorld.Authenticate request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAuthenticateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.AuthenticateResponse> PostAuthenticateAsync(global::TodoWorld.Authenticate request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostAuthenticate, null, options, request);
      }
      public virtual global::TodoWorld.AuthenticateResponse DeleteAuthenticate(global::TodoWorld.Authenticate request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAuthenticate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TodoWorld.AuthenticateResponse DeleteAuthenticate(global::TodoWorld.Authenticate request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAuthenticate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.AuthenticateResponse> DeleteAuthenticateAsync(global::TodoWorld.Authenticate request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAuthenticateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.AuthenticateResponse> DeleteAuthenticateAsync(global::TodoWorld.Authenticate request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAuthenticate, null, options, request);
      }
      public virtual global::TodoWorld.ConvertSessionToTokenResponse PostConvertSessionToToken(global::TodoWorld.ConvertSessionToToken request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostConvertSessionToToken(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TodoWorld.ConvertSessionToTokenResponse PostConvertSessionToToken(global::TodoWorld.ConvertSessionToToken request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostConvertSessionToToken, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.ConvertSessionToTokenResponse> PostConvertSessionToTokenAsync(global::TodoWorld.ConvertSessionToToken request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostConvertSessionToTokenAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.ConvertSessionToTokenResponse> PostConvertSessionToTokenAsync(global::TodoWorld.ConvertSessionToToken request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostConvertSessionToToken, null, options, request);
      }
      public virtual global::TodoWorld.CreateTodoResponse PostCreateTodo(global::TodoWorld.CreateTodo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostCreateTodo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TodoWorld.CreateTodoResponse PostCreateTodo(global::TodoWorld.CreateTodo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostCreateTodo, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.CreateTodoResponse> PostCreateTodoAsync(global::TodoWorld.CreateTodo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostCreateTodoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.CreateTodoResponse> PostCreateTodoAsync(global::TodoWorld.CreateTodo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostCreateTodo, null, options, request);
      }
      public virtual global::TodoWorld.EmptyResponse CallDeleteTodo(global::TodoWorld.DeleteTodo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CallDeleteTodo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TodoWorld.EmptyResponse CallDeleteTodo(global::TodoWorld.DeleteTodo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CallDeleteTodo, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.EmptyResponse> CallDeleteTodoAsync(global::TodoWorld.DeleteTodo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CallDeleteTodoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.EmptyResponse> CallDeleteTodoAsync(global::TodoWorld.DeleteTodo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CallDeleteTodo, null, options, request);
      }
      public virtual global::TodoWorld.EmptyResponse CallDeleteTodos(global::TodoWorld.DeleteTodos request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CallDeleteTodos(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TodoWorld.EmptyResponse CallDeleteTodos(global::TodoWorld.DeleteTodos request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CallDeleteTodos, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.EmptyResponse> CallDeleteTodosAsync(global::TodoWorld.DeleteTodos request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CallDeleteTodosAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.EmptyResponse> CallDeleteTodosAsync(global::TodoWorld.DeleteTodos request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CallDeleteTodos, null, options, request);
      }
      public virtual global::TodoWorld.GetAccessTokenResponse PostGetAccessToken(global::TodoWorld.GetAccessToken request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostGetAccessToken(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TodoWorld.GetAccessTokenResponse PostGetAccessToken(global::TodoWorld.GetAccessToken request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostGetAccessToken, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.GetAccessTokenResponse> PostGetAccessTokenAsync(global::TodoWorld.GetAccessToken request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostGetAccessTokenAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.GetAccessTokenResponse> PostGetAccessTokenAsync(global::TodoWorld.GetAccessToken request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostGetAccessToken, null, options, request);
      }
      public virtual global::TodoWorld.GetTodoResponse CallGetTodo(global::TodoWorld.GetTodo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CallGetTodo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TodoWorld.GetTodoResponse CallGetTodo(global::TodoWorld.GetTodo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CallGetTodo, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.GetTodoResponse> CallGetTodoAsync(global::TodoWorld.GetTodo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CallGetTodoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.GetTodoResponse> CallGetTodoAsync(global::TodoWorld.GetTodo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CallGetTodo, null, options, request);
      }
      public virtual global::TodoWorld.GetTodosResponse CallGetTodos(global::TodoWorld.GetTodos request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CallGetTodos(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TodoWorld.GetTodosResponse CallGetTodos(global::TodoWorld.GetTodos request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CallGetTodos, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.GetTodosResponse> CallGetTodosAsync(global::TodoWorld.GetTodos request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CallGetTodosAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.GetTodosResponse> CallGetTodosAsync(global::TodoWorld.GetTodos request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CallGetTodos, null, options, request);
      }
      public virtual global::TodoWorld.HelloResponse GetHello(global::TodoWorld.Hello request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHello(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TodoWorld.HelloResponse GetHello(global::TodoWorld.Hello request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetHello, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.HelloResponse> GetHelloAsync(global::TodoWorld.Hello request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHelloAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.HelloResponse> GetHelloAsync(global::TodoWorld.Hello request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetHello, null, options, request);
      }
      public virtual global::TodoWorld.HelloResponse PostHello(global::TodoWorld.Hello request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostHello(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TodoWorld.HelloResponse PostHello(global::TodoWorld.Hello request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostHello, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.HelloResponse> PostHelloAsync(global::TodoWorld.Hello request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostHelloAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.HelloResponse> PostHelloAsync(global::TodoWorld.Hello request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostHello, null, options, request);
      }
      public virtual global::TodoWorld.HelloResponse PutHello(global::TodoWorld.Hello request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutHello(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TodoWorld.HelloResponse PutHello(global::TodoWorld.Hello request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PutHello, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.HelloResponse> PutHelloAsync(global::TodoWorld.Hello request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutHelloAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.HelloResponse> PutHelloAsync(global::TodoWorld.Hello request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PutHello, null, options, request);
      }
      public virtual global::TodoWorld.HelloResponse DeleteHello(global::TodoWorld.Hello request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteHello(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TodoWorld.HelloResponse DeleteHello(global::TodoWorld.Hello request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteHello, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.HelloResponse> DeleteHelloAsync(global::TodoWorld.Hello request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteHelloAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.HelloResponse> DeleteHelloAsync(global::TodoWorld.Hello request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteHello, null, options, request);
      }
      public virtual global::TodoWorld.HelloResponse PatchHello(global::TodoWorld.Hello request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchHello(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TodoWorld.HelloResponse PatchHello(global::TodoWorld.Hello request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchHello, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.HelloResponse> PatchHelloAsync(global::TodoWorld.Hello request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchHelloAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.HelloResponse> PatchHelloAsync(global::TodoWorld.Hello request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchHello, null, options, request);
      }
      public virtual global::TodoWorld.HelloResponse GetHelloSecure(global::TodoWorld.HelloSecure request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHelloSecure(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TodoWorld.HelloResponse GetHelloSecure(global::TodoWorld.HelloSecure request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetHelloSecure, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.HelloResponse> GetHelloSecureAsync(global::TodoWorld.HelloSecure request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHelloSecureAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.HelloResponse> GetHelloSecureAsync(global::TodoWorld.HelloSecure request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetHelloSecure, null, options, request);
      }
      public virtual global::TodoWorld.HelloResponse PostHelloSecure(global::TodoWorld.HelloSecure request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostHelloSecure(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TodoWorld.HelloResponse PostHelloSecure(global::TodoWorld.HelloSecure request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostHelloSecure, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.HelloResponse> PostHelloSecureAsync(global::TodoWorld.HelloSecure request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostHelloSecureAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.HelloResponse> PostHelloSecureAsync(global::TodoWorld.HelloSecure request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostHelloSecure, null, options, request);
      }
      public virtual global::TodoWorld.HelloResponse PutHelloSecure(global::TodoWorld.HelloSecure request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutHelloSecure(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TodoWorld.HelloResponse PutHelloSecure(global::TodoWorld.HelloSecure request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PutHelloSecure, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.HelloResponse> PutHelloSecureAsync(global::TodoWorld.HelloSecure request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutHelloSecureAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.HelloResponse> PutHelloSecureAsync(global::TodoWorld.HelloSecure request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PutHelloSecure, null, options, request);
      }
      public virtual global::TodoWorld.HelloResponse DeleteHelloSecure(global::TodoWorld.HelloSecure request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteHelloSecure(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TodoWorld.HelloResponse DeleteHelloSecure(global::TodoWorld.HelloSecure request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteHelloSecure, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.HelloResponse> DeleteHelloSecureAsync(global::TodoWorld.HelloSecure request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteHelloSecureAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.HelloResponse> DeleteHelloSecureAsync(global::TodoWorld.HelloSecure request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteHelloSecure, null, options, request);
      }
      public virtual global::TodoWorld.HelloResponse PatchHelloSecure(global::TodoWorld.HelloSecure request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchHelloSecure(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TodoWorld.HelloResponse PatchHelloSecure(global::TodoWorld.HelloSecure request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchHelloSecure, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.HelloResponse> PatchHelloSecureAsync(global::TodoWorld.HelloSecure request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchHelloSecureAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.HelloResponse> PatchHelloSecureAsync(global::TodoWorld.HelloSecure request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchHelloSecure, null, options, request);
      }
      public virtual global::TodoWorld.RegisterResponse PutRegister(global::TodoWorld.Register request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutRegister(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TodoWorld.RegisterResponse PutRegister(global::TodoWorld.Register request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PutRegister, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.RegisterResponse> PutRegisterAsync(global::TodoWorld.Register request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutRegisterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.RegisterResponse> PutRegisterAsync(global::TodoWorld.Register request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PutRegister, null, options, request);
      }
      public virtual global::TodoWorld.RegisterResponse PostRegister(global::TodoWorld.Register request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostRegister(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TodoWorld.RegisterResponse PostRegister(global::TodoWorld.Register request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostRegister, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.RegisterResponse> PostRegisterAsync(global::TodoWorld.Register request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostRegisterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.RegisterResponse> PostRegisterAsync(global::TodoWorld.Register request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostRegister, null, options, request);
      }
      public virtual global::TodoWorld.EmptyResponse PostResetTodos(global::TodoWorld.ResetTodos request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostResetTodos(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TodoWorld.EmptyResponse PostResetTodos(global::TodoWorld.ResetTodos request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostResetTodos, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.EmptyResponse> PostResetTodosAsync(global::TodoWorld.ResetTodos request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostResetTodosAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.EmptyResponse> PostResetTodosAsync(global::TodoWorld.ResetTodos request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostResetTodos, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::TodoWorld.FileContent> ServerStreamFiles(global::TodoWorld.StreamFiles request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ServerStreamFiles(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::TodoWorld.FileContent> ServerStreamFiles(global::TodoWorld.StreamFiles request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ServerStreamFiles, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::TodoWorld.StreamServerEventsResponse> ServerStreamServerEvents(global::TodoWorld.StreamServerEvents request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ServerStreamServerEvents(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::TodoWorld.StreamServerEventsResponse> ServerStreamServerEvents(global::TodoWorld.StreamServerEvents request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ServerStreamServerEvents, null, options, request);
      }
      public virtual global::TodoWorld.UnAssignRolesResponse PostUnAssignRoles(global::TodoWorld.UnAssignRoles request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostUnAssignRoles(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TodoWorld.UnAssignRolesResponse PostUnAssignRoles(global::TodoWorld.UnAssignRoles request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostUnAssignRoles, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.UnAssignRolesResponse> PostUnAssignRolesAsync(global::TodoWorld.UnAssignRoles request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostUnAssignRolesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.UnAssignRolesResponse> PostUnAssignRolesAsync(global::TodoWorld.UnAssignRoles request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostUnAssignRoles, null, options, request);
      }
      public virtual global::TodoWorld.EmptyResponse PutUpdateTodo(global::TodoWorld.UpdateTodo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutUpdateTodo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TodoWorld.EmptyResponse PutUpdateTodo(global::TodoWorld.UpdateTodo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PutUpdateTodo, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.EmptyResponse> PutUpdateTodoAsync(global::TodoWorld.UpdateTodo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutUpdateTodoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TodoWorld.EmptyResponse> PutUpdateTodoAsync(global::TodoWorld.UpdateTodo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PutUpdateTodo, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override GrpcServicesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GrpcServicesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(GrpcServicesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_PostAssignRoles, serviceImpl.PostAssignRoles)
          .AddMethod(__Method_OptionsAuthenticate, serviceImpl.OptionsAuthenticate)
          .AddMethod(__Method_GetAuthenticate, serviceImpl.GetAuthenticate)
          .AddMethod(__Method_PostAuthenticate, serviceImpl.PostAuthenticate)
          .AddMethod(__Method_DeleteAuthenticate, serviceImpl.DeleteAuthenticate)
          .AddMethod(__Method_PostConvertSessionToToken, serviceImpl.PostConvertSessionToToken)
          .AddMethod(__Method_PostCreateTodo, serviceImpl.PostCreateTodo)
          .AddMethod(__Method_CallDeleteTodo, serviceImpl.CallDeleteTodo)
          .AddMethod(__Method_CallDeleteTodos, serviceImpl.CallDeleteTodos)
          .AddMethod(__Method_PostGetAccessToken, serviceImpl.PostGetAccessToken)
          .AddMethod(__Method_CallGetTodo, serviceImpl.CallGetTodo)
          .AddMethod(__Method_CallGetTodos, serviceImpl.CallGetTodos)
          .AddMethod(__Method_GetHello, serviceImpl.GetHello)
          .AddMethod(__Method_PostHello, serviceImpl.PostHello)
          .AddMethod(__Method_PutHello, serviceImpl.PutHello)
          .AddMethod(__Method_DeleteHello, serviceImpl.DeleteHello)
          .AddMethod(__Method_PatchHello, serviceImpl.PatchHello)
          .AddMethod(__Method_GetHelloSecure, serviceImpl.GetHelloSecure)
          .AddMethod(__Method_PostHelloSecure, serviceImpl.PostHelloSecure)
          .AddMethod(__Method_PutHelloSecure, serviceImpl.PutHelloSecure)
          .AddMethod(__Method_DeleteHelloSecure, serviceImpl.DeleteHelloSecure)
          .AddMethod(__Method_PatchHelloSecure, serviceImpl.PatchHelloSecure)
          .AddMethod(__Method_PutRegister, serviceImpl.PutRegister)
          .AddMethod(__Method_PostRegister, serviceImpl.PostRegister)
          .AddMethod(__Method_PostResetTodos, serviceImpl.PostResetTodos)
          .AddMethod(__Method_ServerStreamFiles, serviceImpl.ServerStreamFiles)
          .AddMethod(__Method_ServerStreamServerEvents, serviceImpl.ServerStreamServerEvents)
          .AddMethod(__Method_PostUnAssignRoles, serviceImpl.PostUnAssignRoles)
          .AddMethod(__Method_PutUpdateTodo, serviceImpl.PutUpdateTodo).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, GrpcServicesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_PostAssignRoles, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TodoWorld.AssignRoles, global::TodoWorld.AssignRolesResponse>(serviceImpl.PostAssignRoles));
      serviceBinder.AddMethod(__Method_OptionsAuthenticate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TodoWorld.Authenticate, global::TodoWorld.AuthenticateResponse>(serviceImpl.OptionsAuthenticate));
      serviceBinder.AddMethod(__Method_GetAuthenticate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TodoWorld.Authenticate, global::TodoWorld.AuthenticateResponse>(serviceImpl.GetAuthenticate));
      serviceBinder.AddMethod(__Method_PostAuthenticate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TodoWorld.Authenticate, global::TodoWorld.AuthenticateResponse>(serviceImpl.PostAuthenticate));
      serviceBinder.AddMethod(__Method_DeleteAuthenticate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TodoWorld.Authenticate, global::TodoWorld.AuthenticateResponse>(serviceImpl.DeleteAuthenticate));
      serviceBinder.AddMethod(__Method_PostConvertSessionToToken, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TodoWorld.ConvertSessionToToken, global::TodoWorld.ConvertSessionToTokenResponse>(serviceImpl.PostConvertSessionToToken));
      serviceBinder.AddMethod(__Method_PostCreateTodo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TodoWorld.CreateTodo, global::TodoWorld.CreateTodoResponse>(serviceImpl.PostCreateTodo));
      serviceBinder.AddMethod(__Method_CallDeleteTodo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TodoWorld.DeleteTodo, global::TodoWorld.EmptyResponse>(serviceImpl.CallDeleteTodo));
      serviceBinder.AddMethod(__Method_CallDeleteTodos, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TodoWorld.DeleteTodos, global::TodoWorld.EmptyResponse>(serviceImpl.CallDeleteTodos));
      serviceBinder.AddMethod(__Method_PostGetAccessToken, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TodoWorld.GetAccessToken, global::TodoWorld.GetAccessTokenResponse>(serviceImpl.PostGetAccessToken));
      serviceBinder.AddMethod(__Method_CallGetTodo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TodoWorld.GetTodo, global::TodoWorld.GetTodoResponse>(serviceImpl.CallGetTodo));
      serviceBinder.AddMethod(__Method_CallGetTodos, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TodoWorld.GetTodos, global::TodoWorld.GetTodosResponse>(serviceImpl.CallGetTodos));
      serviceBinder.AddMethod(__Method_GetHello, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TodoWorld.Hello, global::TodoWorld.HelloResponse>(serviceImpl.GetHello));
      serviceBinder.AddMethod(__Method_PostHello, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TodoWorld.Hello, global::TodoWorld.HelloResponse>(serviceImpl.PostHello));
      serviceBinder.AddMethod(__Method_PutHello, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TodoWorld.Hello, global::TodoWorld.HelloResponse>(serviceImpl.PutHello));
      serviceBinder.AddMethod(__Method_DeleteHello, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TodoWorld.Hello, global::TodoWorld.HelloResponse>(serviceImpl.DeleteHello));
      serviceBinder.AddMethod(__Method_PatchHello, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TodoWorld.Hello, global::TodoWorld.HelloResponse>(serviceImpl.PatchHello));
      serviceBinder.AddMethod(__Method_GetHelloSecure, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TodoWorld.HelloSecure, global::TodoWorld.HelloResponse>(serviceImpl.GetHelloSecure));
      serviceBinder.AddMethod(__Method_PostHelloSecure, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TodoWorld.HelloSecure, global::TodoWorld.HelloResponse>(serviceImpl.PostHelloSecure));
      serviceBinder.AddMethod(__Method_PutHelloSecure, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TodoWorld.HelloSecure, global::TodoWorld.HelloResponse>(serviceImpl.PutHelloSecure));
      serviceBinder.AddMethod(__Method_DeleteHelloSecure, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TodoWorld.HelloSecure, global::TodoWorld.HelloResponse>(serviceImpl.DeleteHelloSecure));
      serviceBinder.AddMethod(__Method_PatchHelloSecure, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TodoWorld.HelloSecure, global::TodoWorld.HelloResponse>(serviceImpl.PatchHelloSecure));
      serviceBinder.AddMethod(__Method_PutRegister, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TodoWorld.Register, global::TodoWorld.RegisterResponse>(serviceImpl.PutRegister));
      serviceBinder.AddMethod(__Method_PostRegister, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TodoWorld.Register, global::TodoWorld.RegisterResponse>(serviceImpl.PostRegister));
      serviceBinder.AddMethod(__Method_PostResetTodos, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TodoWorld.ResetTodos, global::TodoWorld.EmptyResponse>(serviceImpl.PostResetTodos));
      serviceBinder.AddMethod(__Method_ServerStreamFiles, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::TodoWorld.StreamFiles, global::TodoWorld.FileContent>(serviceImpl.ServerStreamFiles));
      serviceBinder.AddMethod(__Method_ServerStreamServerEvents, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::TodoWorld.StreamServerEvents, global::TodoWorld.StreamServerEventsResponse>(serviceImpl.ServerStreamServerEvents));
      serviceBinder.AddMethod(__Method_PostUnAssignRoles, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TodoWorld.UnAssignRoles, global::TodoWorld.UnAssignRolesResponse>(serviceImpl.PostUnAssignRoles));
      serviceBinder.AddMethod(__Method_PutUpdateTodo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TodoWorld.UpdateTodo, global::TodoWorld.EmptyResponse>(serviceImpl.PutUpdateTodo));
    }

  }
}
#endregion
